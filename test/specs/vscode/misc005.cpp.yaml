- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' CEKO LIBRARY'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' This is a library written and maintained by Jeff Hykin'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' the handlful of outside sources that were used are cited in the definition of functions that used them'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - keyword.control.directive.conditional.ifndef
  scopes:
    - punctuation.definition.directive
- source: ifndef
  scopesEnd:
    - keyword.control.directive.conditional.ifndef
- source: CEKO_LIBRARY
  scopes:
    - meta.preprocessor.conditional
    - entity.name.function.preprocessor
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: CEKO_LIBRARY
  scopes:
    - entity.name.function.preprocessor
  scopesEnd:
    - meta.preprocessor.macro
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' includes '
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: ios
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' part of creating clear_cin'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: istream
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' part of creating clear_cin'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: iostream
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' cout , getline '
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' strings '
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: sstream
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' stringstreams '
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: vector
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' vectors'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: cmath
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' abs , pow '
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: regex
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' regular expressions '
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: stdlib.h
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' exit(0) '
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: stdio.h
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopes:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: iomanip
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' setw , setprecision , showpoint , fixed '
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: limits
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' inf, max:: '
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: fstream
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' fstream , .open() , .close()'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: algorithm
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' min ()'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: random
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' rand()'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: cctype
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' isalpha()'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: sys/time.h
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' gettimeofday()'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: time.h
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' time()'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: ctime
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' time stuff'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: chrono
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' sleep_for() , sleep_until'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: thread
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' system_clock, seconds'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: map
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' maps / dictionarys '
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: bitset
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' binary output/input'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: sys/mman.h
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' used in ReadFile'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: sys/stat.h
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' used in ReadFile'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: fcntl.h
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' used in ReadFile, used in Threads'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: pthread.h
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' threads '
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: type_traits
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' used in converting lambda to function pointer '
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: utility
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' used in converting lambda to function pointer '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' defines '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' name space '
  scopesEnd:
    - comment.line.double-slash
- source: using
  scopesBegin:
    - meta.using-namespace
  scopes:
    - keyword.other.using.directive
- source: namespace
  scopes:
    - keyword.other.namespace.directive
    - storage.type.namespace.directive
- source: std
  scopes:
    - entity.name.namespace
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: namespace
  scopes:
    - keyword.other.namespace.directive
    - storage.type.namespace.directive
- source: this_thread
  scopes:
    - entity.name.namespace
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.using-namespace
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' sleep_for, sleep_until'
  scopesEnd:
    - comment.line.double-slash
- source: using
  scopesBegin:
    - meta.using-namespace
  scopes:
    - keyword.other.using.directive
- source: namespace
  scopes:
    - keyword.other.namespace.directive
    - storage.type.namespace.directive
- source: chrono
  scopes:
    - entity.name.namespace
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.using-namespace
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' nanoseconds, system_clock, seconds  '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Constants'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: Infinite
  scopes:
    - entity.name.function.preprocessor
- source: numeric_limits
  scopes:
    - entity.name.scope-resolution
  scopesEnd:
    - meta.preprocessor.macro
- source: <
  scopes:
    - keyword.operator.comparison
- source: long
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: double
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '::'
  scopesBegin:
    - meta.preprocessor.macro
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: infinity
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '#'
  scopesBegin:
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: DoubleMax
  scopes:
    - entity.name.function.preprocessor
  scopesEnd:
    - meta.preprocessor.macro
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '79769'
  scopes:
    - constant.numeric.decimal
- source: e
  scopes:
    - keyword.other.unit.exponent.decimal
- source: +
  scopes:
    - keyword.operator.plus.exponent.decimal
- source: '308'
  scopes:
    - constant.numeric.exponent.decimal
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: Pi
  scopes:
    - entity.name.function.preprocessor
  scopesEnd:
    - meta.preprocessor.macro
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '1415926535897932384626'
  scopes:
    - constant.numeric.decimal
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' ToDo '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' range'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' timing functions'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' vector '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' add -- overload to vector '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' bool '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' make it a thing!!'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Custom Yes/No'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' [] overload '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' implicit overload'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' = overload  '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Number  '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' handle big numbers'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' correct comparison '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' String  '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' make it a thing!!'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' [] overload w/ -1 working '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Regex, make XD regex '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' find , replace , for '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Grid    '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' make it a thing!!'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' overload multiple []'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' lots of member functions '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' * , / , +  <> << >>'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' List    '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' add AskList()'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' overload list {} so it can be declared like a vector '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' add more member functions to list, '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' RemoveDuplicates()'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Reverse()'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' add math functions to lists (Sum, Average, Mean, Max, Min, Random, etc)'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' implicit conversion for lists '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' allow range-based loop'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' operator overloads for list'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' +'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' != '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' ++'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' <<   // for non-streams'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' >>   // for non-streams'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' <'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' >'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' == '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' <='
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' <<='
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' =>>'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' &&   // and ''and'' operator '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' , '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' . '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' allow for removal of items via a negative index .Remove(-1)'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' think about adding dual vector_ data holders, so that AddToTop can be as efficient as AddToBottom'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Item    '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' add AskItem()!'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' add VisualFormat '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' overload item[] so they can reference lists!!'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' add more memeber functions to item '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Math '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Abs  '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' overload moar things!'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' ++'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' --'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' != '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' <<   // for non-streams'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' >>   // for non-streams'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' <'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' >'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' == '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' <='
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' <<='
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' =>>'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' , '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' . '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' make item deal in_ long double type'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' make item fix a lot of the precision issues '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Explore possibilty of using pointers to create Item references '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' function declares and variables'
  scopesEnd:
    - comment.line.double-slash
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ClearScreen
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: streamsize
- source: FlushCin
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Pause
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: System
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input_string
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: string
- source: Getline
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: string
- source: Getline
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_string
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: string
- source: Getline
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: string
- source: Getline
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_string
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: string
- source: StreamAsString
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: string
- source: StreamStatus
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: string
- source: Literal
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: string
- source: Literal
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: IsAllUpperCase
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: IsAllUpperCase
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__CharIn__String
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: test_val
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: input_string
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: string
- source: EverythingUpTo
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: end_symbol
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: istream
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: string
- source: EverythingUpTo
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: end_symbol
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: EndProgram
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Poke
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: id_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: StreamFailed
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: DidStreamFail
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: EndOfStream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: StreamMatchesString
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: input_string
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: string
- source: Type
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: string
- source: AsString
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: pthread_mutex_t
  scopes:
    - support.type.posix-reserved.pthread
    - support.type.built-in.posix-reserved.pthread
- source: ' mutex_for_output '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' PTHREAD_MUTEX_INITIALIZER'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: //////////////////////
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '  Functions'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: //////////////////////
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Debugging and errors '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' there is one more Debugging tool inside the , operator overload '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' (should be in the ''print'' section near the bottom)'
  scopesEnd:
    - comment.line.double-slash
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Debugging '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' a switch for turning Debugging on and off '
  scopesEnd:
    - comment.line.double-slash
- source: struct
  scopesBegin:
    - meta.block.struct
    - meta.head.struct
  scopes:
    - storage.type.struct
- source: Errors
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.struct
  scopesEnd:
    - meta.head.struct
- source: '                string info'
  scopesBegin:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Errors
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: string
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input_error
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: ' info '
  scopesBegin:
    - meta.body.function.definition.special.constructor
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' input_error'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
    - meta.body.function.definition.special.constructor
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: ostream
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.qualified_type
    - entity.name.type
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '<<'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: ostream
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: output_stream
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Errors
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_error
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: ' output_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: input_error
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: info
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Error
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input_error
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: throw
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.throw
- source: Errors
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' input_error '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: error
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input_error
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: throw
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.throw
- source: Errors
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_error
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: POKE
  scopes:
    - entity.name.function.preprocessor
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: here
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: EndProgram
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.preprocessor.macro
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' COUNTER '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' advanced things'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Convertion of lambda into function pointer'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' https://stackoverflow.com/a/45365798/4367134'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' depends on:'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '    #include<type_traits>'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '    #include<utility>'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' example usage:'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' int i = 42;'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' // string is the return type of the lambda function'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' auto function_ptr_1 = convertToFuncPtr<string()>([&]{cout << i; return "hello;";});'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: typename
  scopes:
    - storage.modifier
- source: Callable
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: union
  scopesBegin:
    - meta.block.union
    - meta.head.union
  scopes:
    - storage.type.union
- source: storage
  scopes:
    - entity.name.type.union
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.union
  scopesEnd:
    - meta.head.union
- source: storage
  scopesBegin:
    - meta.body.union
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
- source: decay_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - keyword.operator.comparison
- source: Callable
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' callable'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.union
  scopesEnd:
    - meta.body.union
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.union
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: typename
  scopes:
    - storage.modifier
- source: Callable
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: typename
  scopes:
    - storage.modifier
- source: Ret
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: typename
  scopes:
    - storage.modifier.typename
- source: ... Args
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: internalConversionToFuncPtr
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: Callable
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: a_callable
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: Ret
- source: (
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - punctuation.section.parens.begin.bracket.round.function.pointer
- source: '*'
  scopes:
    - punctuation.definition.function.pointer.dereference
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.function.pointer
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.function.pointer
- source: Args
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: ...
  scopes:
    - punctuation.vararg-ellipses
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.function.pointer
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: static
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.modifier.specifier.static
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' used '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: ' storage'
- source: <
  scopes:
    - keyword.operator.comparison
- source: Callable
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' a_storage_of_callable'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - meta.declaration.type.alias
    - keyword.other.using.directive
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: type
- source: =
  scopes:
    - meta.function.definition
    - meta.body.function.definition
    - meta.declaration.type.alias
    - keyword.operator.assignment
- source: decltype
  scopes:
    - keyword.operator.functionlike
    - keyword.other.decltype
    - storage.type.decltype
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.decltype
- source: a_storage_of_callable
  scopesBegin:
    - meta.arguments.decltype
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callable
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.arguments.decltype
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.decltype
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.declaration.type.alias
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: used
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: a_storage_of_callable
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
- source: callable.
- source: ~type
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: new
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.new
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '&'
  scopes:
    - keyword.operator
- source: a_storage_of_callable
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callable
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: type
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: forward
  scopes:
    - entity.name.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: Callable
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: a_callable
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    used '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: Args
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: args
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '->'
  scopes:
    - punctuation.definition.lambda.return-type
- source: ' Ret '
  scopes:
    - storage.type.return-type.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: return
  scopes:
    - keyword.control.return
- source: Ret
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: a_storage_of_callable
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callable
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: forward
  scopes:
    - entity.name.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.function.definition.body.lambda
- source: <
  scopes:
    - keyword.operator.comparison
- source: Args
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: args
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ...
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: typename
  scopes:
    - storage.modifier
- source: RETURN_TYPE
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' N '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: typename
  scopes:
    - storage.modifier
- source: Callable
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: RETURN_TYPE
- source: '*'
  scopes:
    - keyword.operator
- source: convertToFunctionPointer
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: Callable
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: c
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: internalConversionToFuncPtr
  scopes:
    - entity.name.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: 'N'
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: forward
  scopes:
    - entity.name.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: Callable
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: c
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: RETURN_TYPE
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Operator Overloads'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' vector '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' << >>'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' template <class ANYTYPE> ostream& operator<<(ostream& output_stream, const vector<ANYTYPE>& input_vector)'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '     {'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '         for ( int LoopNumber = 1 ; LoopNumber <= input_vector.size(); LoopNumber++ ) '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '             { '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                 output_stream << input_vector[LoopNumber-1] << ''\n'';'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '             }'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '         return output_stream;'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '     }'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' alternative output for vector'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ' ostream'
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '<<'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: ostream
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: output_stream
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_vector
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                        output_stream '
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '[ '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: input_vector
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                output_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: input_vector
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: LoopNumber
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.bracket.square.access
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.bracket.square.access
    - punctuation.definition.end.bracket.square
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ', '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' output_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ']'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ' istream'
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '>>'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: istream
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                        input_ '
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: =
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        ANYTYPE element_holder'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' should_always_be_a_newline'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'input_stream '
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' element_holder'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: element_holder
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'should_always_be_a_newline '
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_stream
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' input_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' +    '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ' vector'
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYTYPE
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: vec1
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: vec2
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                        vector'
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYTYPE
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' vec3 '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' vec1'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: vec3
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: reserve
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: vec1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: vec2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' ANYTYPE each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' vec2 '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: vec3
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: each
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' vec3'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ' vector'
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYTYPE
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: vec1
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
- source: input_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                        vector'
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYTYPE
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' vec2 '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' vec1'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: vec2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: input_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' vec2'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ' vector'
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYTYPE
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
- source: input_
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: vec1
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                        vector'
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYTYPE
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' vec2 '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' vec1'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: vec2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: vec2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: input_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' vec2'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' map    '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYSECONDTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ' ostream'
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '<<'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: ostream
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: output_stream
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: pair
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ANYSECONDTYPE
- source: ','
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ' ANYTYPE'
- source: '>'
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_pair
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: ' output_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: input_pair
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ':'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: input_pair
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYSECONDTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ' ostream'
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '<<'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: ostream
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: output_stream
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: map
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ANYSECONDTYPE
- source: ','
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ' ANYTYPE'
- source: '>'
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_map
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: for
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' pair'
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYSECONDTYPE
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' ANYTYPE'
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' input_map '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                        output_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' each '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' output_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYSECONDTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ' istream'
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '>>'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: istream
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pair
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ANYSECONDTYPE
- source: ','
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ' ANYTYPE'
- source: '>'
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_pair
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: char
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' should_always_be_a_colon'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    ANYTYPE first_value'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    ANYSECONDTYPE second_value'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    input_stream '
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' first_value '
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' should_always_be_a_colon '
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' second_value'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: input_pair
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' second_value'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: input_pair
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' first_value'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' input_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYSECONDTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ' istream'
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '>>'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: istream
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: map
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ANYSECONDTYPE
- source: ','
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ' ANYTYPE'
- source: '>'
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_map
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: input_map
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: clear
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    pair'
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYTYPE
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANYSECONDTYPE
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' pair_holder'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' should_always_be_a_newline'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'input_stream '
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' pair_holder'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: input_map
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pair_holder
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: =
  scopes:
    - keyword.operator.assignment
- source: pair_holder
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'should_always_be_a_newline '
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_stream
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' input_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Core helper functions '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' indent           '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' data for indent '
  scopesEnd:
    - comment.line.double-slash
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: ' INDENT_SIZE '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '            string'
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: ' INDENT      '
- source: =
  scopes:
    - keyword.operator.assignment
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: INDENT_SIZE
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' functions '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: string
- source: Indent
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    stringstream a_stream'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    a_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' a_char'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string output_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' INDENT'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: a_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: a_char
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'a_char '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                    output_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' output_string '
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: ' INDENT'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '                                output_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' output_string '
- source: +
  scopes:
    - keyword.operator
- source: ' a_char'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' output_string'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Indent
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    string output '
  scopesBegin:
    - meta.body.function.definition
- source: =
  scopes:
    - keyword.operator.assignment
- source: StreamAsString
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Indent
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: stringstream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                string output '
  scopesBegin:
    - meta.body.function.definition
- source: =
  scopes:
    - keyword.operator.assignment
- source: StreamAsString
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' create an unindent for streams only'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' should always return a \n at the end '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' if it returns "" it failed'
  scopesEnd:
    - comment.line.double-slash
- source: string
- source: Input_Unindent
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: bool
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' local_debug '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: local_debug
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: starting Input_Unindent()
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' char_holder'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string unindented_stuff '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' for each line '
  scopesEnd:
    - comment.line.double-slash
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' get the first char'
  scopesEnd:
    - comment.line.double-slash
- source: in_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: char_holder
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' break if end of file '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: in_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: eof
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: local_debug
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: exiting via end of input
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' put the char back into the stream '
  scopesEnd:
    - comment.line.double-slash
- source: in_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: unget
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: local_debug
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'char is:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Literal
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: char_holder
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if it doesn start with an indent, break'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'char_holder '
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: local_debug
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: exiting via no indent start
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if for some reason the stream has a space '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' but is not fully indented'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' then fail (this will mess up the stream because)'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' the spaces cannot be (reliably) un-got'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: StreamMatchesString
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' INDENT'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: local_debug
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: exiting via started with space but not indent
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: local_debug
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'counter is:'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' COUNTER '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' put the whole line into a string'
  scopesEnd:
    - comment.line.double-slash
- source: '                            string next_line '
- source: =
  scopes:
    - keyword.operator.assignment
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if there wasnt a newline at the end then fail '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: next_line
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: next_line
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
    - meta.bracket.square.access
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - meta.bracket.square.access
    - punctuation.definition.end.bracket.square
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: local_debug
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: exiting via no newline at end of string
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: local_debug
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'line was:'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Literal
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: next_line
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                            unindented_stuff '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: ' next_line'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' unindented_stuff'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Random numbers   '
  scopesEnd:
    - comment.line.double-slash
- source: float
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Rand
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: rand
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '%'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '10000'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: /
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '10000'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: float
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Randn
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: sqrt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - keyword.operator
- source: log
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: Rand
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator
- source: cos
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - keyword.operator
- source: ' Pi '
- source: '*'
  scopes:
    - keyword.operator
- source: Rand
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Time'
  scopesEnd:
    - comment.line.double-slash
- source: long
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: long
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: CurrentTimeInMicroSeconds
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: struct
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.struct.declare
- source: timeval
  scopes:
    - entity.name.type.struct
- source: a_time
  scopes:
    - variable.other.object.declare
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: gettimeofday
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '&'
  scopes:
    - keyword.operator
- source: a_time
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: a_time
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: tv_sec
  scopes:
    - variable.other.property
- source: '*'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1000000'
  scopes:
    - constant.numeric.decimal
- source: +
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - keyword.operator
- source: a_time
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: tv_usec
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: long
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: NumberOfMicrosecondsBetween
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: struct
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.struct
- source: timeval
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: start_time
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: struct
  scopes:
    - storage.type.struct
- source: timeval
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: end_time
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: long
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' seconds       '
- source: =
  scopes:
    - keyword.operator.assignment
- source: end_time
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: tv_sec
  scopes:
    - variable.other.property
- source: '-'
  scopes:
    - keyword.operator
- source: start_time
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: tv_sec
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: long
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' micro_seconds '
- source: =
  scopes:
    - keyword.operator.assignment
- source: end_time
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: tv_usec
  scopes:
    - variable.other.property
- source: '-'
  scopes:
    - keyword.operator
- source: start_time
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: tv_usec
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'micro_seconds '
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                            micro_seconds '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: e
  scopes:
    - keyword.other.unit.exponent.decimal
- source: '6'
  scopes:
    - constant.numeric.exponent.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: '                            seconds'
- source: '--'
  scopes:
    - keyword.operator.decrement
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'seconds '
- source: '*'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '1000000'
  scopes:
    - constant.numeric.decimal
- source: +
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - keyword.operator
- source: ' micro_seconds'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: BriefDelay
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: sleep_for
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: milliseconds
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '200'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: BriefDelay
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: double
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: seconds_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: sleep_for
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: milliseconds
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'seconds_ '
- source: '*'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '100'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: LittleRandomDelay
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: BriefDelay
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: Randn
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const
  scopes:
    - meta.head.function.definition
    - storage.modifier.const
  scopesEnd:
    - meta.function.definition
- source: string
- source: currentDateTime
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: '  modified this a bit from http://stackoverflow.com/questions/997946/how-to-get-current-time-and-date-in_-c'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' depends on:'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '     #include <iostream>'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '     #include <string>'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '     #include <stdio.h>'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '     #include <time.h>'
  scopesEnd:
    - comment.line.double-slash
- source: time_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '     now '
- source: =
  scopes:
    - keyword.operator.assignment
- source: time
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: struct
  scopes:
    - storage.type.struct.declare
- source: tm
  scopes:
    - entity.name.type.struct
- source: tstruct
  scopes:
    - variable.other.object.declare
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.bracket.square.access
- source: '80'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.bracket.square.access
    - punctuation.definition.end.bracket.square
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    tstruct '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '*'
  scopes:
    - keyword.operator
- source: localtime
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '&'
  scopes:
    - keyword.operator
- source: now
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Visit http://en.cppreference.com/w/cpp/chrono/c/strftime'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' for more information about date/time format'
  scopesEnd:
    - comment.line.double-slash
- source: strftime
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: buf
  scopes:
    - meta.arguments.operator.sizeof
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%Y-%m-'
- source: '%d'
  scopesBegin:
    - constant.other.placeholder
- source: '%X'
  scopesEnd:
    - constant.other.placeholder
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '&'
  scopes:
    - keyword.operator
- source: tstruct
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' buf'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Stream functions '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' mostly for cout, cin '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: streamsize
- source: FlushStream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: basic_istream
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: always_discard
  scopes:
    - variable.parameter
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: '  this code is a visually modified version of the code from: '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '  https://www.daniweb.com/programming/software-development/threads/90228/flushing-the-input-stream'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '  (which is a great explaination of the process ) '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '  it allows correct clearing of the cin buffer '
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '  depends on:'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '         #include <ios>'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '         #include <istream>'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '         #include <limits>'
  scopesEnd:
    - comment.line.double-slash
- source: '                        streamsize num_of_chars_discarded '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' always_discard '
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: rdbuf
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: sungetc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: char_traits
  scopes:
    - entity.name.scope-resolution
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
    - meta.parens
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYTYPE
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '::'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
    - meta.parens
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: eof
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: widen
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' The stream is good, and we haven''t'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' read a full line yet, so clear it out'
  scopesEnd:
    - comment.line.double-slash
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: ignore
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: numeric_limits
  scopes:
    - entity.name.scope-resolution
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
- source: <
  scopes:
    - keyword.operator.comparison
- source: streamsize
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '::'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: max
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: widen
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                num_of_chars_discarded '
- source: =
  scopes:
    - keyword.operator.assignment
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: gcount
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' num_of_chars_discarded'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ClearScreen
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                        cout '
  scopesBegin:
    - meta.body.function.definition
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \033
  scopes:
    - constant.character.escape
- source: '[2J'
- source: \033
  scopes:
    - constant.character.escape
- source: '[1;1H'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' http://stackoverflow.com/questions/17335816/clear-screen-using-c'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: streamsize
- source: FlushCin
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: FlushStream
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' cin '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Getline
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                        string input_data'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: FlushCin
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: getline
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: cin
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input_data'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' input_data'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Getline
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_string
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: FlushCin
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: getline
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: cin
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input_string'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' input_string'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Getline
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                        string input_string'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: FlushCin
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: getline
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_stream
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input_string'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' input_string'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Getline
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_string
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: FlushCin
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: getline
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_stream
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input_string'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' input_string'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Pause
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: FlushCin
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: cin
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: cin
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: clear
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: cin
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: ignore
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: BackSpace
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: number_of_places
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '{'
  scopesBegin:
    - meta.body.function.definition
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '  number_of_places     '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                            cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \b
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \b
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: cout
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: flush
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: LittleRandomDelay
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: TypeOut
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input_string
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '{'
  scopesBegin:
    - meta.body.function.definition
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'input_string '
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' EachChar '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' LoopNumber '
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: cout
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: flush
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: input_string
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: "\_EachChar "
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: cout
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: flush
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: LittleRandomDelay
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: BriefDelay
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '7'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' stream helpers '
  scopesEnd:
    - comment.line.double-slash
- source: string
- source: StreamAsString
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                        stringstream output'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' each_char'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: in_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: each_char
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                            output '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' each_char'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        string output_str '
- source: =
  scopes:
    - keyword.operator.assignment
- source: output
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' output_str'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: StreamStatus
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                        string output'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' good'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: in_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: good
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                            output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Good: Yes'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: '                            output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Good: No'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' eof'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: in_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: eof
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                            output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'EOF : Yes'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: '                            output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'EOF : No'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' fail '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: in_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: fail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                            output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Fail: Yes'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: '                            output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Fail: No'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' bad'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: in_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: bad
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                            output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Bad : Yes'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: '                            output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Bad : No'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: StreamFailed
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: input_stream
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: clear
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: clear
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ios_base
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: failbit
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' input_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: DidStreamFail
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: eof
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: fail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: EndOfStream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: eof
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: StreamMatchesString
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: input_string
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: char
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' char_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: input_string
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if the stream runs out of characters, false '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: char_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if string doesn''t match, false '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' char_ '
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: input_string
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: LoopNumber
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.parens
    - meta.bracket.square.access
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.parens
  scopes:
    - meta.bracket.square.access
    - punctuation.definition.end.bracket.square
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: EverythingUpTo
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: end_symbol
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: istream
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_stream
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: char
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' char_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                       string output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: char_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                output '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' output '
- source: +
  scopes:
    - keyword.operator
- source: ' char_ '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'char_ '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' end_symbol'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: ' output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: EverythingUpTo
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: end_symbol
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: char
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' char_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                       string output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cin
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: char_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                output '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' output '
- source: +
  scopes:
    - keyword.operator
- source: ' char_ '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'char_ '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' end_symbol'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: ' output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' System           '
  scopesEnd:
    - comment.line.double-slash
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: System
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input_string
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: const
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.modifier.specifier.const
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: ' conv_my_str '
- source: =
  scopes:
    - keyword.operator.assignment
- source: input_string
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: c_str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: system
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: conv_my_str
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: EndProgram
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' save a success log'
  scopesEnd:
    - comment.line.double-slash
- source: '                        ofstream'
- source: the_file_stream
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: .success.log
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        the_file_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: success
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: the_file_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: close
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' press enter to exit'
  scopesEnd:
    - comment.line.double-slash
- source: '                        cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: press enter to exit
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Pause
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: exit
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Poke
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: id_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    cout '
  scopesBegin:
    - meta.body.function.definition
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Poked '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' id_ '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: EndProgram
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' String Helpers'
  scopesEnd:
    - comment.line.double-slash
- source: string
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '*'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: string
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: base
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: long
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: long
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - keyword.operator
- source: repetitions
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                    string result'
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' i '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: <
  scopes:
    - keyword.operator.comparison
- source: ' repetitions'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                        result '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: ' base'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' result'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: string
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '*'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: long
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: long
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - keyword.operator
- source: repetitions
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: string
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: base
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                    string result'
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' i '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: <
  scopes:
    - keyword.operator.comparison
- source: ' repetitions'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                        result '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: ' base'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' result'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: string
- source: Substring
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: start
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: finish
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'start '
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '                        start '
- source: =
  scopes:
    - keyword.operator.assignment
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: ' start'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'start '
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                        start '
- source: =
  scopes:
    - keyword.operator.assignment
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'finish '
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '                        finish '
- source: =
  scopes:
    - keyword.operator.assignment
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: ' finish'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'finish '
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                        finish '
- source: =
  scopes:
    - keyword.operator.assignment
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'start '
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' finish'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' swap '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' start'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        start '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' finish'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        finish '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' swap'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: start
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' finish '
- source: '-'
  scopes:
    - keyword.operator
- source: ' start'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Substring
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: start
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Substring
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: base
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' start'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Join
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: string
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: delimiter
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    string result'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' i '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: <
  scopes:
    - keyword.operator.comparison
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' i'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                        result '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: base
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: +
  scopes:
    - keyword.operator
- source: ' delimiter'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    result '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: base
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.bracket.square.access
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.bracket.square.access
    - punctuation.definition.end.bracket.square
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' result'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Join
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: string
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: delimiter
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Join
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: base
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' delimiter'
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Replace
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: oldstring
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: newstring
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: int
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' index '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: '                    string current'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'index '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
- source: oldstring
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: index
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: oldstring
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' oldstring'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                            current '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: ' newstring'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            index '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: oldstring
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                        current '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: base
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: index
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        index'
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' current'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Replace
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: oldstring
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: newstring
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Replace
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: base
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' oldstring'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' newstring'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Replace
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: oldstring
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: newstring
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Replace
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: base
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' oldstring'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' newstring'
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Replace
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: oldstring
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: newstring
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Replace
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: base
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' oldstring'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' newstring'
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Replace
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: oldstring
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Replace
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: base
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' oldstring'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Replace
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: oldstring
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Replace
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: base
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' oldstring'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Strip
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: junk
  scopes:
    - variable.parameter
- source: =
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' num_front '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ++
  scopes:
    - keyword.operator.increment
- source: num_front
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' junk'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' num_end '
- source: =
  scopes:
    - keyword.operator.assignment
- source: input
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '--'
  scopes:
    - keyword.operator.decrement
- source: num_end
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' junk'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: input
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: num_front
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: +
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - keyword.operator
- source: 'num_end '
- source: '-'
  scopes:
    - keyword.operator
- source: ' num_front'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: GetWhileIncluded
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: included_characters
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    string output '
  scopesBegin:
    - meta.body.function.definition
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' input'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if its valid '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__CharIn__String
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: each
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' included_characters'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' add it'
  scopesEnd:
    - comment.line.double-slash
- source: output
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: each
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: RemoveWhileIncluded
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: included_characters
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    string output '
  scopesBegin:
    - meta.body.function.definition
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' number_of_char_to_ignore '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' input'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if its valid '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__CharIn__String
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: each
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' included_characters'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ++
  scopes:
    - keyword.operator.increment
- source: number_of_char_to_ignore
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                    output '
- source: =
  scopes:
    - keyword.operator.assignment
- source: input
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: number_of_char_to_ignore
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: output
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: string
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Split
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: splitter
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    vector'
  scopesBegin:
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: string
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' chunks'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: chunks
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    input '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Strip
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' splitter'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' char_index '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' chunk_index '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' prev_char_was_splitter '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ++
  scopes:
    - keyword.operator.increment
- source: 'char_index '
- source: <
  scopes:
    - keyword.operator.comparison
- source: input
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' current_character '
- source: =
  scopes:
    - keyword.operator.assignment
- source: input
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: char_index
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'current_character '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' splitter'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: not
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.not
- source: ' prev_char_was_splitter'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: chunks
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: chunk_index
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                                    prev_char_was_splitter '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                    prev_char_was_splitter '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: chunks
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: chunk_index
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: current_character
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' chunks'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE2
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: StartIndexOfFirst__In__
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: target_anytype
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANYTYPE2
  scopes:
    - entity.name.type.parameter
- source: base_anytype
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' convert target to string'
  scopesEnd:
    - comment.line.double-slash
- source: '                    ostringstream stream1'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    stream1 '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' target_anytype'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string target '
- source: =
  scopes:
    - keyword.operator.assignment
- source: stream1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' convert base to string'
  scopesEnd:
    - comment.line.double-slash
- source: '                    ostringstream stream2'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    stream2 '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' base_anytype'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string base '
- source: =
  scopes:
    - keyword.operator.assignment
- source: stream2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' index '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'index '
- source: +
  scopes:
    - keyword.operator
- source: target
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: <=
  scopes:
    - keyword.operator.comparison
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: index
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: target
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' target'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: ' index'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        index'
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE2
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: StartIndexOfLast__In__
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: target_anytype
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANYTYPE2
  scopes:
    - entity.name.type.parameter
- source: base_anytype
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' convert target to string'
  scopesEnd:
    - comment.line.double-slash
- source: '                    ostringstream stream1'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    stream1 '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' target_anytype'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string target '
- source: =
  scopes:
    - keyword.operator.assignment
- source: stream1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' convert base to string'
  scopesEnd:
    - comment.line.double-slash
- source: '                    ostringstream stream2'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    stream2 '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' base_anytype'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string base '
- source: =
  scopes:
    - keyword.operator.assignment
- source: stream2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' index '
- source: =
  scopes:
    - keyword.operator.assignment
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
- source: target
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: index
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: index
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: target
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' target'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: ' index'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        index'
- source: '--'
  scopes:
    - keyword.operator.decrement
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Indices
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
- source: target_anytype
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' convert target to string'
  scopesEnd:
    - comment.line.double-slash
- source: '                    ostringstream stream1'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    stream1 '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' target_anytype'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string target '
- source: =
  scopes:
    - keyword.operator.assignment
- source: stream1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    vector'
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' indices'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' index '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'index '
- source: +
  scopes:
    - keyword.operator
- source: target
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: <=
  scopes:
    - keyword.operator.comparison
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: index
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: target
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' target'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: indices
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: index
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        index'
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' indices'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Includes
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
- source: target_anytype
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' convert target to string'
  scopesEnd:
    - comment.line.double-slash
- source: '                    ostringstream stream1'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    stream1 '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' target_anytype'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string target '
- source: =
  scopes:
    - keyword.operator.assignment
- source: stream1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: StartIndexOfFirst__In__
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: target
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' base'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Startswith
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
- source: target_anytype
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' convert target to string'
  scopesEnd:
    - comment.line.double-slash
- source: '                    ostringstream stream1'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    stream1 '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' target_anytype'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string target '
- source: =
  scopes:
    - keyword.operator.assignment
- source: stream1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: target
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - punctuation.separator.delimiter.comma
- source: target
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' target'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Endswith
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
- source: target_anytype
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' convert target to string'
  scopesEnd:
    - comment.line.double-slash
- source: '                    ostringstream stream1'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    stream1 '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' target_anytype'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string target '
- source: =
  scopes:
    - keyword.operator.assignment
- source: stream1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: target
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
- source: target
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' target'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: string
- source: the__thDigitOf__
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: position
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
- source: input_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    string input_as_string '
  scopesBegin:
    - meta.body.function.definition
- source: =
  scopes:
    - keyword.operator.assignment
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: input_
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
- source: ' position  '
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: IsALegitFileName
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: attempt_filename
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' letters, numbers, and dashes (must have at least one of any of those)'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' allows a period only for file extentions'
  scopesEnd:
    - comment.line.double-slash
- source: '                        regex is_not_obnoxious '
- source: =
  scopes:
    - keyword.operator.assignment
- source: regex
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '[A-Za-z_0-9'
- source: \\
  scopes:
    - constant.character.escape
- source: '-]+('
- source: \\
  scopes:
    - constant.character.escape
- source: '.[A-Za-z]+|)'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: regex_match
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: attempt_filename
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' is_not_obnoxious'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Literal
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: char
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' each_char'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    stringstream char_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    char_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' space_counter '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' newline_counter '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: char_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: each_char
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' spaces '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'each_char '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                    space_counter'
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: char_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: peek
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                            output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \\
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: space_counter
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: SPACES
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                            space_counter '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' newlines'
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'each_char '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                    newline_counter'
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: char_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: peek
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                            output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \\
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: newline_counter
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'n'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                            newline_counter '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' everything else '
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'each_char '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \\
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                                output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \\
  scopesBegin:
    - constant.character.escape
- source: \\
  scopesEnd:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'each_char '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \t
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                                output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \\
  scopes:
    - constant.character.escape
- source: t
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'each_char '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \0
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                                output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \\
  scopes:
    - constant.character.escape
- source: '0'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'each_char '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \r
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                                output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \\
  scopes:
    - constant.character.escape
- source: r
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'each_char '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \v
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                                output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \\
  scopes:
    - constant.character.escape
- source: v
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'each_char '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \b
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                                output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \\
  scopes:
    - constant.character.escape
- source: b
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: '                                output '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: ' each_char'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Literal
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    stringstream output'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    output '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string output_str '
- source: =
  scopes:
    - keyword.operator.assignment
- source: output
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: Literal
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output_str
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: IsAllUpperCase
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '{'
  scopesBegin:
    - meta.body.function.definition
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'input '
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' EachChar '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' LoopNumber '
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: not
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.not
- source: isupper
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: EachChar
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: IsAllUpperCase
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: IsAllUpperCase
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: AsString
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__CharIn__String
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: test_val
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: input_string
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: for
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' input_string'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'each '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' test_val'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: string
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ExtractArguments
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: content
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: end_characters
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: ignore_characters
  scopes:
    - variable.parameter
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \t
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: encapsulate_characters
  scopes:
    - variable.parameter
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \"
  scopesBegin:
    - constant.character.escape
- source: \'
  scopesEnd:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: pair
- source: <
  scopes:
    - keyword.operator.comparison
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: encapsulating_pairs
  scopes:
    - variable.parameter
- source: =
  scopes:
    - keyword.operator.assignment
- source: '{'
- source: make_pair
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: (
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    vector'
  scopesBegin:
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: string
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' arguments'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' index '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: '                    vector'
- source: <
  scopes:
    - keyword.operator.comparison
- source: string
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' char_context_stack '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string previous_char_as_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' content'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                            index'
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            string context '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '*'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: char_context_stack
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' no context'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'context '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if ending character then we''re done'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__CharIn__String
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: each
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' end_characters'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' dont count the final character'
  scopesEnd:
    - comment.line.double-slash
- source: '                                            index'
- source: '--'
  scopes:
    - keyword.operator.decrement
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if ignore_characters, go to next character'
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__CharIn__String
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: each
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' ignore_characters'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' this is like continue, but needs to set a loop variable'
  scopesEnd:
    - comment.line.double-slash
- source: goto
  scopes:
    - keyword.control.goto
- source: ' SKIP_CHAR'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if valid/normal'
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' add argument if needed'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' special case if its the first argument'
  scopesEnd:
    - comment.line.double-slash
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' is_first_arg '
- source: =
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'previous_char_as_string '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' transition to new argument'
  scopesEnd:
    - comment.line.double-slash
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' is_new_arg '
- source: =
  scopes:
    - keyword.operator.assignment
- source: not
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.not
- source: ' is_first_arg '
- source: and
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.and
- source: Is__CharIn__String
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: previous_char_as_string
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' ignore_characters'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'is_first_arg '
- source: or
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.or
- source: ' is_new_arg'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: arguments
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' add the character to the argument'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '*'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: arguments
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: each
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' check for new contexts'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' basic encapsulator'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__CharIn__String
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: each
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' encapsulate_characters'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: char_context_stack
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: AsString
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: each
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' paired encapsulators'
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' each_pair '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' encapsulating_pairs'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if it matches the first char in a pair'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__CharIn__String
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: each
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: AsString
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: each_pair
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' add the other half as the context'
  scopesEnd:
    - comment.line.double-slash
- source: char_context_stack
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: each_pair
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if there is context'
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' add the character '
  scopesEnd:
    - comment.line.double-slash
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '*'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: arguments
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.parens
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.parens
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: each
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check if that was the end'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__CharIn__String
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: each
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' context'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' remove the context'
  scopesEnd:
    - comment.line.double-slash
- source: char_context_stack
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pop_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: SKIP_CHAR
  scopes:
    - entity.name.label
- source: ':'
  scopes:
    - punctuation.separator.label
- source: '                            previous_char_as_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: AsString
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: each
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' remove the parsed part'
  scopesEnd:
    - comment.line.double-slash
- source: '                    content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: index
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' arguments'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Number helpers'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: ANYTYPE
  scopes:
    - entity.name.type.class
  scopesEnd:
    - meta.block.class
    - meta.head.class
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: string
- source: ToBinary
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' depends on #include <bitset>'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: bitset
  scopes:
    - entity.name.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: '8'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: to_string
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: BinaryToInt
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' depends on #include <bitset>'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: bitset
  scopes:
    - entity.name.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: '8'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: to_ulong
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Round
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: double
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input_number
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: ' input_number '
- source: +
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Round
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: float
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input_number
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: ' input_number '
- source: +
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' range'
  scopesEnd:
    - comment.line.double-slash
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Range
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: lower
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: increment
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: upper
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    vector'
  scopesBegin:
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' result'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'increment '
- source: '>'
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' i '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' lower'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: <
  scopes:
    - keyword.operator.comparison
- source: ' upper'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: ' increment'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: result
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' i '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' lower'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' upper'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: ' increment'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: result
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' result'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Range
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: lower
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: upper
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Range
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: lower
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' upper'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Range
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: upper
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Range
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - meta.function.definition
    - meta.body.function.definition
    - punctuation.separator.delimiter.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' upper'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' IO basic types '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' CopyPaste Class IO'
- source: //
  scopes:
    - punctuation.definition.comment
- source: 'ostream& output (ostream& out, const classname& input_)'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '    {'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '        // name of class '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '        out << "classname" << ''\n'';'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '                stringstream data_members;'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '        // for each datamember'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '        output( data_members , input_.datamember()); data_members << ''\n'';'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '                // format and return stream'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                out << Indent( data_members.str() ) << ''\n'';'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                return out;'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '    }'
- source: //
  scopes:
    - punctuation.definition.comment
- source: 'istream& input  (istream& in_,        classname& input_)'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '    {'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '        // check name of type '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '        if ( EverythingUpTo(''\n'',in_) != "classname\n")'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '            return StreamFailed(in_);'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '                // unindent members'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                string content = Input_Unindent(in_);'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                // check fail'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                if (content == "")'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                    return StreamFailed(in_);'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                // check end '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                if (content[content.size()-1] != ''\n'')'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                    return StreamFailed(in_);'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                // setup vars'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                char should_always_be_a_newline;'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                stringstream transfer_method;'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                // get rid of the class''s newline'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                transfer_method << content.substr(0,content.size()-1);'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '        // create empty versions of all data members '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '        datatype datamember;'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '        input( transfer_method, datamember ); transfer_method.get(should_always_be_a_newline);'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '                // if stream fails, then return fail '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                if (DidStreamFail(transfer_method))'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                    return StreamFailed(in_);'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
- source: //
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '        // check the data, make sure its valid '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '        if ( !IsDataValid(datamember)) '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '            return StreamFailed(in_);'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '        // add the data to the input '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '        input_.data = datamember'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '                // if everything worked return the stream! '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                return in_;'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '    }  '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' bool IO        '
  scopesEnd:
    - comment.line.double-slash
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: output
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ostream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: bool
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' each data member in_ class'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                            out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'true'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: '                            out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'false'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' out'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check name of type '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: bool
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unindent everything'
  scopesEnd:
    - comment.line.double-slash
- source: '                            string content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' try to input data'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'true'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                                input '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'false'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                                input '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if not true or false, then fail'
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if everything worked return the stream! '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' char IO        '
  scopesEnd:
    - comment.line.double-slash
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: output
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ostream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_char
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: char
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' each data member in_ class'
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_char
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' out'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_char
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' reset the char'
  scopesEnd:
    - comment.line.double-slash
- source: '                            input_char '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \0
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check name of class '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: char
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unindent everything'
  scopesEnd:
    - comment.line.double-slash
- source: '                            string char_content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'char_content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' try to input data'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: char_content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: char_content
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
    - meta.bracket.square.access
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - meta.bracket.square.access
    - punctuation.definition.end.bracket.square
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                                        input_char '
- source: =
  scopes:
    - keyword.operator.assignment
- source: char_content
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.bracket.square.access
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
  scopes:
    - meta.bracket.square.access
    - punctuation.definition.end.bracket.square
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if everything worked return the stream! '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' int IO         '
  scopesEnd:
    - comment.line.double-slash
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: output
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ostream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: integer
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' each data member in_ class'
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' out'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check name of type '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: integer
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unindent everything'
  scopesEnd:
    - comment.line.double-slash
- source: '                            string content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' try to input data'
  scopesEnd:
    - comment.line.double-slash
- source: '                            stringstream content_as_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            content_as_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' content'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' should_always_be_a_newline'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            content_as_stream '
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: content_as_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if failed somewhere, then return fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: DidStreamFail
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: content_as_stream
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if everything worked return the stream! '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' double IO      '
  scopesEnd:
    - comment.line.double-slash
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: output
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ostream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: double
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' make sure and get all the decimals '
  scopesEnd:
    - comment.line.double-slash
- source: '                        stringstream output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        output '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: setprecision
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '20'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' each data member in_ class'
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' out'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check name of type '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: double
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unindent everything'
  scopesEnd:
    - comment.line.double-slash
- source: '                            string content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' try to input data'
  scopesEnd:
    - comment.line.double-slash
- source: '                            stringstream content_as_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            content_as_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' content'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' should_always_be_a_newline'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            content_as_stream '
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: content_as_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if failed somewhere, then return fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: DidStreamFail
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: content_as_stream
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if everything worked return the stream! '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' long double IO '
  scopesEnd:
    - comment.line.double-slash
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: output
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ostream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: long
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: double
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: double
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' make sure and get all the decimals '
  scopesEnd:
    - comment.line.double-slash
- source: '                        stringstream output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        output '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: setprecision
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '20'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' each data member in_ class'
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' out'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: long
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: double
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check name of type '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: double
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unindent everything'
  scopesEnd:
    - comment.line.double-slash
- source: '                            string content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' try to input data'
  scopesEnd:
    - comment.line.double-slash
- source: '                            stringstream content_as_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            content_as_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' content'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' should_always_be_a_newline'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            content_as_stream '
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: content_as_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if failed somewhere, then return fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: DidStreamFail
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: content_as_stream
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if everything worked return the stream! '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' string IO      '
  scopesEnd:
    - comment.line.double-slash
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: output
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ostream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: string
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' each data member in_ class'
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' out'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check name of class '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unindent everything'
  scopesEnd:
    - comment.line.double-slash
- source: '                            string content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if it doesn''t end in_ newline, then fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: content
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
    - meta.bracket.square.access
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - meta.bracket.square.access
    - punctuation.definition.end.bracket.square
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' try to input data'
  scopesEnd:
    - comment.line.double-slash
- source: '                            input '
- source: =
  scopes:
    - keyword.operator.assignment
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if everything worked return the stream! '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' c-string IO '
  scopesEnd:
    - comment.line.double-slash
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: output
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ostream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input
  scopes:
    - variable.parameter
- source: '['
  scopesBegin:
    - meta.bracket.square.array
  scopes:
    - punctuation.definition.begin.bracket.square.array.type
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.array.type
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
    - meta.bracket.square.array
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' each data member in_ class'
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' out'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' general IO     '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: output
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ostream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: default IO
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' each data member in_ class'
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' out'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check name of type '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: default IO
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unindent everything'
  scopesEnd:
    - comment.line.double-slash
- source: '                            string content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check end '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: content
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
    - meta.bracket.square.access
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - meta.bracket.square.access
    - punctuation.definition.end.bracket.square
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' store data'
  scopesEnd:
    - comment.line.double-slash
- source: '                            stringstream transfer_method'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            transfer_method '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            transfer_method '
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if stream fails, then return fail '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: DidStreamFail
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: transfer_method
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if everything worked return the stream! '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Conversion     '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: string
- source: AsString
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                        stringstream data_stream'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: output
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data_stream
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' get rid of the name '
  scopesEnd:
    - comment.line.double-slash
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' data_stream'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' get the content'
  scopesEnd:
    - comment.line.double-slash
- source: '                        string content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data_stream
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' remove the closing newline'
  scopesEnd:
    - comment.line.double-slash
- source: '                        content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' content'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: string
- source: TypeAsString
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                        stringstream data_stream'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: output
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data_stream
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' get the name of the datatype'
  scopesEnd:
    - comment.line.double-slash
- source: '                        string name '
- source: =
  scopes:
    - keyword.operator.assignment
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' data_stream'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' remove the closing newline'
  scopesEnd:
    - comment.line.double-slash
- source: '                        name '
- source: =
  scopes:
    - keyword.operator.assignment
- source: name
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: name
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' name'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' VisualFormat basic types'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' general VisualFormat'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' for most things just output via their << operator'
  scopesEnd:
    - comment.line.double-slash
- source: string
- source: VisualFormat
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    stringstream out'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: out
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' bool   '
  scopesEnd:
    - comment.line.double-slash
- source: string
- source: VisualFormat
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: bool
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                        string output'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'input '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                            output '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'true'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: '                            output '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'false'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' char   '
  scopesEnd:
    - comment.line.double-slash
- source: string
- source: VisualFormat
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Literal
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' int    '
  scopesEnd:
    - comment.line.double-slash
- source: string
- source: VisualFormat
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' double '
  scopesEnd:
    - comment.line.double-slash
- source: string
- source: VisualFormat
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: double
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' string '
  scopesEnd:
    - comment.line.double-slash
- source: string
- source: VisualFormat
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: ' input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Special Visual Formats '
  scopesEnd:
    - comment.line.double-slash
- source: string
- source: VisualFormatDollars
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: double
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                        stringstream output'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        output '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' fixed '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: setprecision
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        output '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: $
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        output '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: output
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Show'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: ThreadSafeCout
  scopes:
    - entity.name.function.preprocessor
- source: (
  scopes:
    - punctuation.definition.parameters.begin.preprocessor
- source: ARGS
  scopes:
    - variable.parameter.preprocessor
- source: )
  scopes:
    - punctuation.definition.parameters.end.preprocessor
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: stringstream output
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' output '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' ARGS'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: output
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.preprocessor.macro
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: string
- source: Show
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    cout '
  scopesBegin:
    - meta.body.function.definition
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: VisualFormat
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: VisualFormat
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Ask() basic types '
  scopesEnd:
    - comment.line.double-slash
- source: string
- source: Ask
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: question_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    cout '
  scopesBegin:
    - meta.body.function.definition
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '  question_ '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string Answer '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Getline
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: cin
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' Answer'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' Answer'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: AskForAnInt
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: question_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' this will match:'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' *spaces(or nothing)*   *a negative symbol(or nothing)*   *9 digits or less*    *spaces(or nothing)*'
  scopesEnd:
    - comment.line.double-slash
- source: '                    regex'
- source: is_it_an_int
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ( *(-|)
- source: \\
  scopes:
    - constant.character.escape
- source: 'd{1,9} *)'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string answer_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' loop until an integer is given'
  scopesEnd:
    - comment.line.double-slash
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                        answer_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Ask
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: question_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check if the input is actually an integer'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: regex_match
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: answer_
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' is_it_an_int'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: stoi
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: answer_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Sorry, but the input needs to be a (9 digits or less) positive integer'
- source: \n
  scopes:
    - constant.character.escape
- source: please try again
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: AskForANumber
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: question_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' this will match:'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' *spaces(or nothing)*   *a negative symbol(or nothing)*   *9 digits or less*    *spaces(or nothing)*'
  scopesEnd:
    - comment.line.double-slash
- source: '                    regex'
- source: is_it_a_number
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ( *(-|)(
- source: \\
  scopes:
    - constant.character.escape
- source: 'd{0,12}'
- source: \\
  scopes:
    - constant.character.escape
- source: .
- source: \\
  scopes:
    - constant.character.escape
- source: 'd{1,12}|'
- source: \\
  scopes:
    - constant.character.escape
- source: 'd{1,18}) *)'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string answer_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' loop until an integer is given'
  scopesEnd:
    - comment.line.double-slash
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                        answer_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Ask
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: question_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check if the input is actually an integer'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: regex_match
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: answer_
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' is_it_a_number'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: answer_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Sorry, but the input needs to a number (12 digits or less)'
- source: \n
  scopes:
    - constant.character.escape
- source: please try again
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: AskForAnIntFrom__To__
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: question_
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: smallest
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: largest
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: int
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' integer_             '
- source: =
  scopes:
    - keyword.operator.assignment
- source: AskForAnInt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' question_ '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        string internal_question '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Sorry, please just enter a number from '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: smallest
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' to '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: largest
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' keep asking the internal question until a valid number is given'
  scopesEnd:
    - comment.line.double-slash
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'integer_ '
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: ' smallest'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'integer_ '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' largest'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                            integer_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: AskForAnInt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' internal_question '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' integer_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: AskForADoubleFrom__To__
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: question_
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: smallest
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: largest
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: double
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' number_             '
- source: =
  scopes:
    - keyword.operator.assignment
- source: AskForANumber
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' question_ '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        string internal_question '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Sorry, please enter a number from '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: smallest
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' to '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: largest
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' keep asking the internal question until a valid number is given'
  scopesEnd:
    - comment.line.double-slash
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'number_ '
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: ' smallest'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'number_ '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' largest'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                            number_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: AskForANumber
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' internal_question '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' number_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: AskYesOrNo
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: question_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: while
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' FIXME use regex here instead'
  scopesEnd:
    - comment.line.double-slash
- source: '                            string answer_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Ask
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: question_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' answer_ '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '||'
  scopes:
    - keyword.operator.logical
- source: ' answer_ '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Yes'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '||'
  scopes:
    - keyword.operator.logical
- source: ' answer_ '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'y'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '||'
  scopes:
    - keyword.operator.logical
- source: ' answer_ '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Y'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' answer_ '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'no'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '||'
  scopes:
    - keyword.operator.logical
- source: ' answer_ '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'No'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '||'
  scopes:
    - keyword.operator.logical
- source: ' answer_ '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'n'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '||'
  scopes:
    - keyword.operator.logical
- source: ' answer_ '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'N'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                            cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Sorry I don''t understand your input :/'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Use 'yes' and 'no' and try avoiding spaces
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: AskForAFileName
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: question_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: while
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                string file_name '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Ask
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' question_ '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: IsALegitFileName
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: file_name
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: ' file_name'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' else '
  scopesEnd:
    - comment.line.double-slash
- source: '                                cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Sorry, please only use letter, numbers, and underscores in_ the name'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: fstream
- source: AskUserForExistingFile
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: question_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: while
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                string name_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: AskForAFileName
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' question_ '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                fstream'
- source: the_file
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: name_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: the_file
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: ' the_file'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                                cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Sorry I dont see that file, please enter another file name'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' File IO  '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Save__In__
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: data_to_save
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: file_location
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                        ofstream'
  scopesBegin:
    - meta.body.function.definition
- source: the_file_stream
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: file_location
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: output
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: the_file_stream
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' data_to_save'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: the_file_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: close
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Load__From__
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: data_to_load
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: file_location
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                        ifstream'
  scopesBegin:
    - meta.body.function.definition
- source: the_file_stream
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: file_location
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: input
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: the_file_stream
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' data_to_load'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: the_file_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: close
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: SaveFile
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: file_location
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: string
  scopes:
    - entity.name.type.parameter
- source: content
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    ofstream'
  scopesBegin:
    - meta.body.function.definition
- source: the_file_stream
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: file_location
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    the_file_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' content'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: the_file_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: close
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: ReadFile
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: file_location
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    ifstream'
  scopesBegin:
    - meta.body.function.definition
- source: the_file
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: file_location
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string'
- source: content
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: istreambuf_iterator
  scopes:
    - entity.name.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: <
  scopes:
    - keyword.operator.comparison
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: the_file
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: istreambuf_iterator
  scopes:
    - entity.name.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: the_file
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: close
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' content'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: OpenFileAsString
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: file_location
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    fstream'
  scopesBegin:
    - meta.body.function.definition
- source: the_file
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: file_location
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: the_file
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: ReadFile
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: file_location
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Sorry I dont see that file, please enter another file name'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Threads'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' This is a function that is given to '
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: thread_stub
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: void
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '*'
  scopes:
    - keyword.operator
- source: context
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' context is static_cast<void*>(&f) below. We reverse the cast to'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' void* and call the function object.'
  scopesEnd:
    - comment.line.double-slash
- source: '                    function'
- source: <
  scopes:
    - keyword.operator.comparison
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '&'
  scopes:
    - keyword.operator
- source: ' func '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '*'
  scopes:
    - keyword.operator
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: function
- source: <
  scopes:
    - keyword.operator.comparison
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '*'
  scopes:
    - keyword.operator
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: context
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: func
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: ANY_OUTPUT_TYPE
  scopes:
    - entity.name.type.class
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: class
  scopesBegin:
    - meta.qualified_type
  scopes:
    - storage.type.class
- source: ANY_INPUT_TYPE
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.block.class
    - meta.head.class
    - meta.qualified_type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: TaskClass
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: //
  scopesBegin:
    - meta.body.class
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' summary/explaination'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' What is this used for?'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' if you want to run a function on a thread, and you don''t want any segfaults'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' this class makes input/output for threaded functions easy'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' this class makes sure the arguments exist for the whole time that the thread exists (very importatnt)'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' this class works with lambdas as well as normal functions'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' How do I use it?'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' auto immaFunction = function<int(string)>([&](string input_string)'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '     {'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '          cout << "I received this as an argument " << input_string << "\n"; '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '          return 69;'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '     }'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' string the_input = "Hello World";'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' auto a_task = Task(immaFunction, the_input);'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' int output_of_task = a_task.WaitForCompletion();'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Caveats'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' The argument must have a copy constructor and a default (empty) constructor'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' If the class you''re using doesn''t have those, then pass a pointer, or create a wrapper class that does have those'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' How does it work?'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' this class essentially contains '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' 1. a function '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' 2. a copy of the arguments for that function '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' 3. the output of the function'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' 4. a thread id for the thread the function is being run on'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' it wraps the functions it''s given and then passes the wrapper function to the thread'
  scopesEnd:
    - comment.line.double-slash
- source: public
  scopesBegin:
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Data'
  scopesEnd:
    - comment.line.double-slash
- source: pthread_t
  scopes:
    - support.type.posix-reserved.pthread
    - support.type.built-in.posix-reserved.pthread
- source: ' thread'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ANY_OUTPUT_TYPE
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round.function.pointer
- source: '*'
  scopes:
    - punctuation.definition.function.pointer.dereference
- source: thread_function
  scopes:
    - variable.other.definition.pointer.function
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.function.pointer
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.function.pointer
- source: ANY_INPUT_TYPE
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: argument
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.function.pointer
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        function'
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANY_OUTPUT_TYPE
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ANY_INPUT_TYPE argument
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' lambda_thread_function'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        function'
- source: <
  scopes:
    - keyword.operator.comparison
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' functional_wrapper'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        ANY_OUTPUT_TYPE output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        ANY_INPUT_TYPE arguments'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' use_lambda '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' has_been_waited_on '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' by deafult the task is ready to start'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Constructors'
  scopesEnd:
    - comment.line.double-slash
- source: TaskClass
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: TaskClass
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: obj
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: Error
  scopesBegin:
    - meta.body.function.definition.special.constructor
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: >-
    Something somewhere is trying to copy a TaskClass() object. Sadly copying a
    TaskClass is not yet possible.
- source: \n
  scopes:
    - constant.character.escape
- source: >-
    This is likely happening when trying to add a task to a vector or some
    similar operation.
- source: \n
  scopes:
    - constant.character.escape
- source: This can often be fixed by using a TaskClass pointer instead
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.body.function.definition.special.constructor
- source: TaskClass
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: function
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: ANY_OUTPUT_TYPE
- source: (
  scopes:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
    - meta.template.call
- source: ANY_INPUT_TYPE
- source: ' argument'
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
    - meta.template.call
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: input_function
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANY_INPUT_TYPE
  scopes:
    - entity.name.type.parameter
- source: input_arguments
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '                                use_lambda '
  scopesBegin:
    - meta.body.function.definition.special.constructor
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                lambda_thread_function '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' input_function'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                arguments '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' input_arguments'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.body.function.definition.special.constructor
- source: TaskClass
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
- source: ANY_OUTPUT_TYPE
- source: (
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - punctuation.section.parens.begin.bracket.round.function.pointer
- source: '*'
  scopes:
    - punctuation.definition.function.pointer.dereference
- source: input_function
  scopes:
    - variable.parameter.pointer.function
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.function.pointer
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.function.pointer
- source: ANY_INPUT_TYPE
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: argument
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.function.pointer
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '                                thread_function '
  scopesBegin:
    - meta.body.function.definition.special.constructor
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' input_function'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.body.function.definition.special.constructor
- source: TaskClass
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
- source: ANY_OUTPUT_TYPE
- source: (
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - punctuation.section.parens.begin.bracket.round.function.pointer
- source: '*'
  scopes:
    - punctuation.definition.function.pointer.dereference
- source: input_function
  scopes:
    - variable.parameter.pointer.function
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.function.pointer
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.function.pointer
- source: ANY_INPUT_TYPE
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: argument
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.function.pointer
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANY_INPUT_TYPE
  scopes:
    - entity.name.type.parameter
- source: input_arguments
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '                                thread_function '
  scopesBegin:
    - meta.body.function.definition.special.constructor
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' input_function'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                arguments '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ANY_INPUT_TYPE
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_arguments
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
    - meta.body.function.definition.special.constructor
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Methods'
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Start
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: pthread_attr_t
  scopes:
    - support.type.posix-reserved.pthread
    - support.type.built-in.posix-reserved.pthread
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '*'
  scopes:
    - keyword.operator
- source: attributes
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'NULL'
  scopes:
    - constant.language.NULL
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if its possible the task is still running'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'has_been_waited_on '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                        cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'for task with address = '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: this
  scopes:
    - variable.language.this
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                        cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: I think you're trying to start this task but it hasn't been waited on yet.
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                        cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: >-
    either do the_task.WaitForCompletion() before trying to restart this task,
    or create a seperate task object
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if the task wasnt running before, it is now'
  scopesEnd:
    - comment.line.double-slash
- source: '                                has_been_waited_on '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                functional_wrapper '
- source: =
  scopes:
    - keyword.operator.assignment
- source: function
  scopes:
    - entity.name.function.call
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: ']'
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: mutable
  scopes:
    - storage.modifier.lambda.mutable
- source: '->'
  scopes:
    - punctuation.definition.lambda.return-type
- source: ' void* '
  scopes:
    - storage.type.return-type.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' give the input arguments (stored on the the task object) to the function'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' and save the output to the task object'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: use_lambda
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                                output '
- source: =
  scopes:
    - keyword.operator.assignment
- source: lambda_thread_function
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: arguments
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                                output '
- source: =
  scopes:
    - keyword.operator.assignment
- source: thread_function
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: arguments
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                                        has_been_waited_on '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: pthread_exit
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'NULL'
  scopes:
    - constant.language.NULL
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'NULL'
  scopes:
    - constant.language.NULL
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: pthread_create
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '&'
  scopes:
    - keyword.operator
- source: thread
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' attributes'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' thread_stub'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '&'
  scopes:
    - keyword.operator
- source: functional_wrapper
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: ANY_OUTPUT_TYPE
- source: WaitForCompletion
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' wait for the thread to finish'
  scopesEnd:
    - comment.line.double-slash
- source: pthread_join
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: thread
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'NULL'
  scopes:
    - constant.language.NULL
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' this task is no longer running'
  scopesEnd:
    - comment.line.double-slash
- source: '                                has_been_waited_on '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' return the output'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: pthread_t
  scopes:
    - support.type.posix-reserved.pthread
    - support.type.built-in.posix-reserved.pthread
- source: ' __dummy_thread'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: ANY_OUTPUT_TYPE
  scopes:
    - entity.name.type.class
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: class
  scopesBegin:
    - meta.qualified_type
  scopes:
    - storage.type.class
- source: ANY_INPUT_TYPE
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.block.class
    - meta.head.class
    - meta.qualified_type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: Task
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: //
  scopesBegin:
    - meta.body.class
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' summary/explaination:'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' This is just a wrapper for a TaskClass pointer'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' it is created so that copies (shallow copies) can be made without breaking everything and causing a segfault'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' it keeps track of how many shallow copies there are for a proticular task and once the last shallow copy is destroyed it deletes the original TaskClass obj/pointer to prevent memoryleaks'
  scopesEnd:
    - comment.line.double-slash
- source: public
  scopesBegin:
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' data'
  scopesEnd:
    - comment.line.double-slash
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: ' map'
- source: <
  scopes:
    - keyword.operator.comparison
- source: TaskClass
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANY_OUTPUT_TYPE
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' ANY_INPUT_TYPE'
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '*'
  scopes:
    - keyword.operator
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' links_to'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        TaskClass'
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANY_OUTPUT_TYPE
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' ANY_INPUT_TYPE'
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '*'
  scopes:
    - keyword.operator
- source: ' ptr_to_original '
- source: =
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: pthread_t
  scopes:
    - support.type.posix-reserved.pthread
    - support.type.built-in.posix-reserved.pthread
- source: '&'
  scopes:
    - keyword.operator
- source: ' thread'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' constructors'
  scopesEnd:
    - comment.line.double-slash
- source: Task
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: thread
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: __dummy_thread
  scopes:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
- source: Task
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: TaskClass
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: ANY_OUTPUT_TYPE
- source: ','
  scopes:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ' ANY_INPUT_TYPE'
- source: '>'
  scopes:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '*'
  scopes:
    - keyword.operator
- source: a_task_ptr
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: thread
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: __dummy_thread
  scopes:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '                                ptr_to_original '
  scopesBegin:
    - meta.body.function.definition.special.constructor
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' a_task_ptr'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if no links'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: links_to
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ptr_to_original
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: links_to
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' then set the initial number of links to 0'
  scopesEnd:
    - comment.line.double-slash
- source: links_to
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: ptr_to_original
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.body.function.definition.special.constructor
    - meta.block
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.body.function.definition.special.constructor
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' add one link'
  scopesEnd:
    - comment.line.double-slash
- source: ++
  scopes:
    - keyword.operator.increment
- source: links_to
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: ptr_to_original
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                thread '
- source: =
  scopes:
    - keyword.operator.assignment
- source: a_task_ptr
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.body.function.definition.special.constructor
- source: Task
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Task
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: obj
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: thread
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: __dummy_thread
  scopes:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '                                ptr_to_original '
  scopesBegin:
    - meta.body.function.definition.special.constructor
- source: =
  scopes:
    - keyword.operator.assignment
- source: obj
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: ptr_to_original
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                thread '
- source: =
  scopes:
    - keyword.operator.assignment
- source: obj
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.body.function.definition.special.constructor
- source: ptr_to_original
- source: '-'
  scopes:
    - keyword.operator
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: thread
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.body.function.definition.special.constructor
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if no links'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: links_to
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ptr_to_original
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: links_to
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' then set the initial number of links to 0'
  scopesEnd:
    - comment.line.double-slash
- source: links_to
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: ptr_to_original
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.body.function.definition.special.constructor
    - meta.block
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.body.function.definition.special.constructor
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' add one link'
  scopesEnd:
    - comment.line.double-slash
- source: ++
  scopes:
    - keyword.operator.increment
- source: links_to
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: ptr_to_original
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
    - meta.body.function.definition.special.constructor
- source: ~Task
  scopesBegin:
    - meta.function.definition.special.member.destructor
    - meta.head.function.definition.special.member.destructor
  scopes:
    - entity.name.function.destructor
    - entity.name.function.definition.special.member.destructor
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.member.destructor
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.member.destructor
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.member.destructor
  scopesEnd:
    - meta.head.function.definition.special.member.destructor
- source: //
  scopesBegin:
    - meta.body.function.definition.special.member.destructor
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' decrement one link'
  scopesEnd:
    - comment.line.double-slash
- source: '--'
  scopes:
    - keyword.operator.decrement
- source: links_to
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: ptr_to_original
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if no links, then delete'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: links_to
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: ptr_to_original
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.member.destructor
    - meta.body.function.definition.special.member.destructor
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.member.destructor
    - meta.body.function.definition.special.member.destructor
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: delete
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.delete
- source: ' ptr_to_original'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.member.destructor
  scopesEnd:
    - meta.function.definition.special.member.destructor
    - meta.body.function.definition.special.member.destructor
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' methods'
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: SetOriginal
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: TaskClass
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANY_OUTPUT_TYPE
- source: ','
  scopes:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ' ANY_INPUT_TYPE'
- source: '>'
  scopes:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '*'
  scopes:
    - keyword.operator
- source: a_pointer
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                                ptr_to_original '
  scopesBegin:
    - meta.body.function.definition
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' a_pointer'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: links_to
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: ptr_to_original
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                thread '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '&'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Start
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: pthread_attr_t
  scopes:
    - support.type.posix-reserved.pthread
    - support.type.built-in.posix-reserved.pthread
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '*'
  scopes:
    - keyword.operator
- source: attributes
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'NULL'
  scopes:
    - constant.language.NULL
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'ptr_to_original '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ThreadSafeCout
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'You''re tring to start a Task object, but its pointer points to nullptr'
- source: \n
  scopes:
    - constant.character.escape
- source: 'The address of the object is: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: this
  scopes:
    - variable.language.this
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ptr_to_original
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: Start
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: ANY_OUTPUT_TYPE
- source: WaitForCompletion
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: ptr_to_original
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: WaitForCompletion
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: StillRunning
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: not
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.not
- source: ptr_to_original
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: has_been_waited_on
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' operators'
  scopesEnd:
    - comment.line.double-slash
- source: Task
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.qualified_type
    - entity.name.type
  scopesEnd:
    - meta.block.class
    - meta.body.class
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: =
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Task
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: obj
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                                ptr_to_original '
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: =
  scopes:
    - keyword.operator.assignment
- source: obj
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: ptr_to_original
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                thread '
- source: =
  scopes:
    - keyword.operator.assignment
- source: obj
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: ptr_to_original
- source: '-'
  scopes:
    - keyword.operator
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: thread
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if no links'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: links_to
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ptr_to_original
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: links_to
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' then set the initial number of links to 0'
  scopesEnd:
    - comment.line.double-slash
- source: links_to
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: ptr_to_original
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' add one link'
  scopesEnd:
    - comment.line.double-slash
- source: ++
  scopes:
    - keyword.operator.increment
- source: links_to
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: ptr_to_original
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANY_OUTPUT_TYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANY_INPUT_TYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ' map'
- source: <
  scopes:
    - keyword.operator.comparison
- source: TaskClass
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANY_OUTPUT_TYPE
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' ANY_INPUT_TYPE'
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '*'
  scopes:
    - keyword.operator
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Task
  scopes:
    - entity.name.scope-resolution
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANY_OUTPUT_TYPE
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' ANY_INPUT_TYPE'
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: links_to
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' have the TaskClass automatically detect the argument and return type'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: Task
  scopes:
    - entity.name.function.preprocessor
- source: (
  scopes:
    - punctuation.definition.parameters.begin.preprocessor
- source: FUNC
  scopes:
    - variable.parameter.preprocessor
- source: ','
  scopes:
    - punctuation.separator.parameters
- source: ARG
  scopes:
    - variable.parameter.preprocessor
- source: )
  scopes:
    - punctuation.definition.parameters.end.preprocessor
- source: Task
  scopes:
    - entity.name.function.call
  scopesEnd:
    - meta.preprocessor.macro
- source: <
  scopes:
    - keyword.operator.comparison
- source: decltype
  scopes:
    - keyword.operator.functionlike
    - keyword.other.decltype
    - storage.type.decltype
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.decltype
- source: FUNC
  scopesBegin:
    - meta.arguments.decltype
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: decltype
  scopes:
    - keyword.operator.functionlike
    - keyword.other.decltype
    - storage.type.decltype
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.decltype
- source: ARG
  scopes:
    - meta.arguments.decltype
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.decltype
- source: '{}'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.arguments.decltype
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.decltype
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: decltype
  scopes:
    - keyword.operator.functionlike
    - keyword.other.decltype
    - storage.type.decltype
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.decltype
- source: ARG
  scopes:
    - meta.arguments.decltype
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.decltype
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.preprocessor.macro
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: new
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.new
- source: TaskClass
  scopes:
    - entity.name.function.call
  scopesEnd:
    - meta.preprocessor.macro
- source: <
  scopes:
    - keyword.operator.comparison
- source: decltype
  scopes:
    - keyword.operator.functionlike
    - keyword.other.decltype
    - storage.type.decltype
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.decltype
- source: FUNC
  scopesBegin:
    - meta.arguments.decltype
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: decltype
  scopes:
    - keyword.operator.functionlike
    - keyword.other.decltype
    - storage.type.decltype
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.decltype
- source: ARG
  scopes:
    - meta.arguments.decltype
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.decltype
- source: '{}'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.arguments.decltype
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.decltype
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: decltype
  scopes:
    - keyword.operator.functionlike
    - keyword.other.decltype
    - storage.type.decltype
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.decltype
- source: ARG
  scopes:
    - meta.arguments.decltype
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.decltype
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.preprocessor.macro
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: FUNC
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' ARG'
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.preprocessor.macro
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Helpers'
  scopesEnd:
    - comment.line.double-slash
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: WaitFor
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: pthread_t
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - support.type.posix-reserved.pthread
    - support.type.built-in.posix-reserved.pthread
- source: thread
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: void
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: ' _Nullable '
- source: '*'
  scopes:
    - keyword.operator
- source: ' _Nullable output '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'NULL'
  scopes:
    - constant.language.NULL
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: pthread_join
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: thread
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' output'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: output
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: LockManagerClass
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: public
  scopesBegin:
    - meta.body.class
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' data'
  scopesEnd:
    - comment.line.double-slash
- source: '                        map'
- source: <
  scopes:
    - keyword.operator.comparison
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pthread_mutex_t
  scopes:
    - support.type.posix-reserved.pthread
    - support.type.built-in.posix-reserved.pthread
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' map_of_locks'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' methods'
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Lock
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: void
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
- source: '*'
  scopes:
    - keyword.operator
- source: varaible_address
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if there isn''t a mutex for the address, then make one'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: map_of_locks
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: varaible_address
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: map_of_locks
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' make a mutex'
  scopesEnd:
    - comment.line.double-slash
- source: map_of_locks
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: varaible_address
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' PTHREAD_MUTEX_INITIALIZER'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' lock the mutex'
  scopesEnd:
    - comment.line.double-slash
- source: pthread_mutex_lock
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '&'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: map_of_locks
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: varaible_address
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Unlock
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: void
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
- source: '*'
  scopes:
    - keyword.operator
- source: varaible_address
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' If there isn''t a mutex for the var, then do nothing'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: map_of_locks
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: varaible_address
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: map_of_locks
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unlock the mutex '
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: pthread_mutex_unlock
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '&'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: map_of_locks
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: varaible_address
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: LockManager
  scopes:
    - meta.tail.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: Lock
  scopes:
    - entity.name.function.preprocessor
- source: (
  scopes:
    - punctuation.definition.parameters.begin.preprocessor
- source: ARGS
  scopes:
    - variable.parameter.preprocessor
- source: )
  scopes:
    - punctuation.definition.parameters.end.preprocessor
- source: LockManager
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Lock
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '&'
  scopes:
    - keyword.operator
- source: ARGS
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '#'
  scopesBegin:
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: Unlock
  scopes:
    - entity.name.function.preprocessor
- source: (
  scopes:
    - punctuation.definition.parameters.begin.preprocessor
- source: ARGS
  scopes:
    - variable.parameter.preprocessor
- source: )
  scopes:
    - punctuation.definition.parameters.end.preprocessor
- source: LockManager
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Unlock
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '&'
  scopes:
    - keyword.operator
- source: ARGS
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.preprocessor.macro
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ////////////////////
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Secondary helper functions'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ////////////////////
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Vector functions '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' IO           '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: output
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ostream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: bool
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' local_debug '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                    out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: vector
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' each data member in_ class'
  scopesEnd:
    - comment.line.double-slash
- source: '                    stringstream all_members'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' ANYTYPE each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' input_vector '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: output
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: all_members
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' each'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            all_members '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if no data members'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_vector
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '                        all_members '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Indent the whole thing'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: local_debug
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'all_members is '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Literal
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: all_members
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string all_members_str '
- source: =
  scopes:
    - keyword.operator.assignment
- source: all_members
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: all_members_str
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' out'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: bool
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' local_debug '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' reset the input vector'
  scopesEnd:
    - comment.line.double-slash
- source: '                    input_vector '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check name of class '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: vector
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unindent everything'
  scopesEnd:
    - comment.line.double-slash
- source: '                    string vector_content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: local_debug
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'vector content:'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: local_debug
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Literal
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: vector_content
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'vector_content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check no members'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' vector_content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' try to input data'
  scopesEnd:
    - comment.line.double-slash
- source: '                    ANYTYPE data_member'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    stringstream vector_content_as_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    vector_content_as_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' vector_content'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' should_always_be_a_newline'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' try inputting data members till EOF '
  scopesEnd:
    - comment.line.double-slash
- source: do
  scopes:
    - keyword.control.do
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: input
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: vector_content_as_stream
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' data_member'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: vector_content_as_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: DidStreamFail
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: vector_content_as_stream
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: input_vector
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: data_member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: not
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.not
- source: EndOfStream
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: vector_content_as_stream
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if no data members were added, report an error'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_vector
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if everything worked return the stream! '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' VisualFormat '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: string
- source: VisualFormat
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    stringstream output'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' ANYTYPE each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' input '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                            output '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: VisualFormat
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: each
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' helpers      '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Remove__ThElementFrom__Vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: element_number
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: input_vector
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: erase
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: input_vector
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: ' element_number'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__In__Vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: test_val
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: for
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' input_vector'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'each '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' test_val'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__In__
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: test_val
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '{'
  scopesBegin:
    - meta.body.function.definition
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'input_vector '
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' EachItem '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' LoopNumber '
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_vector
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ' EachItem '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' test_val '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: IndexOf__In__Vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: test_val
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '{'
  scopesBegin:
    - meta.body.function.definition
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'input_vector '
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' EachItem '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' LoopNumber '
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_vector
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ' EachItem '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' test_val'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: ' EachItem'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: RemoveFirst__From__Vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: element_
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: int
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' element_number '
- source: =
  scopes:
    - keyword.operator.assignment
- source: IndexOf__In__Vector
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'element_ '
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input_vector'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: input_vector
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: erase
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: input_vector
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: ' element_number'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: NumberOf__In__Vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: test_val
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: int
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' number_of_matches'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'input_vector '
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' EachItem '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' LoopNumber '
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_vector
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ' EachItem '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' test_val '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                            number_of_matches'
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' number_of_matches'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYTYPE
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: RemoveDuplicates
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_vector
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    vector'
  scopesBegin:
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYTYPE
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' search_vector'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'input_vector '
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' EachItem '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' LoopNumber '
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__In__Vector
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_vector
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EachItem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' search_vector '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Remove__ThElementFrom__Vector
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: EachItem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input_vector'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: search_vector
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: input_vector
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EachItem
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopesBegin:
    - keyword.operator
- source: '*'
  scopesEnd:
    - keyword.operator
- source: VectorStringToCStringArray
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: string
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' NOTE if you dont delete the output manually, there will be a memory leak'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' find largest string'
  scopesEnd:
    - comment.line.double-slash
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' largest_string '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' input'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                            largest_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: each
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' largest_string '
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: each
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: ' largest_string'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' create a vector of c-strings'
  scopesEnd:
    - comment.line.double-slash
- source: '                    vector'
- source: <
  scopes:
    - keyword.operator.comparison
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' vector_of_c_strings'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' input'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: ' new_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: new
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.new
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: each
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: strcpy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: new_string
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: each
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: c_str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: vector_of_c_strings
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: new_string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' terminate it with a null pointer'
  scopesEnd:
    - comment.line.double-slash
- source: vector_of_c_strings
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: 'NULL'
  scopes:
    - constant.language.NULL
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' create the array'
  scopesEnd:
    - comment.line.double-slash
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopesBegin:
    - keyword.operator
- source: '*'
  scopesEnd:
    - keyword.operator
- source: ' output '
- source: =
  scopes:
    - keyword.operator.assignment
- source: new
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.new
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: vector_of_c_strings
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: copy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: vector_of_c_strings
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector_of_c_strings
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' output'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' output'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: T
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: T
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Slice
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: T
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: start
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: finish
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    vector'
  scopesBegin:
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: T
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' result'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'start '
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '                        start '
- source: =
  scopes:
    - keyword.operator.assignment
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: ' start'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'start '
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                        start '
- source: =
  scopes:
    - keyword.operator.assignment
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'finish '
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '                        finish '
- source: =
  scopes:
    - keyword.operator.assignment
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: ' finish'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'finish '
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                        finish '
- source: =
  scopes:
    - keyword.operator.assignment
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'start '
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' finish'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' swap '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' start'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        start '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' finish'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        finish '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' swap'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' i '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' start'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: <
  scopes:
    - keyword.operator.comparison
- source: ' finish'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: result
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: base
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' result'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: T
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: T
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Slice
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: T
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: start
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Slice
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: start
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: T
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: T
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Splice
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: T
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: start
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: count
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: T
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: additions
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    vector'
  scopesBegin:
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: T
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' result'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'start '
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '                        start '
- source: =
  scopes:
    - keyword.operator.assignment
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: ' start'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'start '
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                        start '
- source: =
  scopes:
    - keyword.operator.assignment
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'count '
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
- source: ' start'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                        count '
- source: =
  scopes:
    - keyword.operator.assignment
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
- source: ' start'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' i '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: <
  scopes:
    - keyword.operator.comparison
- source: ' start'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: result
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: base
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' i '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: <
  scopes:
    - keyword.operator.comparison
- source: additions
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: result
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: additions
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' i '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' start '
- source: +
  scopes:
    - keyword.operator
- source: ' count'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: <
  scopes:
    - keyword.operator.comparison
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: result
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: base
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' result'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: T
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: T
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Splice
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: T
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: start
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: count
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    vector'
  scopesBegin:
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: T
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' empty'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: Splice
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: base
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' start'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' count'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' empty'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: T
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: T
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Splice
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: T
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: start
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: T
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: additions
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Splice
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: base
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' start'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' additions'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: T
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Index
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: T
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: T
  scopes:
    - entity.name.type.parameter
- source: target
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: int
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' index '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'index '
- source: <
  scopes:
    - keyword.operator.comparison
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: base
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: index
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' target'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: ' index'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        index'
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: T
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: LastIndex
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: T
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: T
  scopes:
    - entity.name.type.parameter
- source: target
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: int
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' index '
- source: =
  scopes:
    - keyword.operator.assignment
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: index
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: base
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: index
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' target'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: ' index'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        index'
- source: '--'
  scopes:
    - keyword.operator.decrement
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: T
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Indices
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: T
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: T
  scopes:
    - entity.name.type.parameter
- source: target
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    vector'
  scopesBegin:
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' indices'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' index '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'index '
- source: <
  scopes:
    - keyword.operator.comparison
- source: base
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: base
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: index
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' target'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: indices
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: index
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        index'
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' indices'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: T
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Includes
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: T
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: T
  scopes:
    - entity.name.type.parameter
- source: target
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Index
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: base
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' target'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Map functions'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' IO           '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Pairs '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYSECONDTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: output
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ostream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: pair
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: ','
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ANYSECONDTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: bool
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' local_debug '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: pair
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        stringstream all_members'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' each data member in_ class'
  scopesEnd:
    - comment.line.double-slash
- source: output
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: all_members
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' all_members '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: output
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: all_members
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' all_members '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Indent the whole thing'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: local_debug
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'all_members is '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Literal
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: all_members
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        string all_members_str '
- source: =
  scopes:
    - keyword.operator.assignment
- source: all_members
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: all_members_str
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' out'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYSECONDTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pair
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: ','
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ANYSECONDTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check name of type '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: pair
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unindent members'
  scopesEnd:
    - comment.line.double-slash
- source: '                                string content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check end '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: content
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
    - meta.bracket.square.access
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - meta.bracket.square.access
    - punctuation.definition.end.bracket.square
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' setup vars'
  scopesEnd:
    - comment.line.double-slash
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' should_always_be_a_newline'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                stringstream transfer_method'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' get rid of the class''s newline'
  scopesEnd:
    - comment.line.double-slash
- source: '                                transfer_method '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' create empty versions of all data members '
  scopesEnd:
    - comment.line.double-slash
- source: '                        ANYTYPE  datamember1'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        ANYSECONDTYPE datamember2'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: input
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' transfer_method'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' datamember1 '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: transfer_method
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: input
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' transfer_method'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' datamember2 '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: transfer_method
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if stream fails, then return fail '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: DidStreamFail
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: transfer_method
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' add the data to the input '
  scopesEnd:
    - comment.line.double-slash
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' datamember1'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' datamember2'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if everything worked return the stream! '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Maps  '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYSECONDTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: output
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ostream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: map
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: ','
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ANYSECONDTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                        out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: map
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                stringstream data_members'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' for each datamember'
  scopesEnd:
    - comment.line.double-slash
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' pair'
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYTYPE
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANYSECONDTYPE
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' input_ '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: output
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data_members
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' each'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' data_members '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' format and return stream'
  scopesEnd:
    - comment.line.double-slash
- source: '                                out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data_members
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' out'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYSECONDTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: map
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: ','
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ANYSECONDTYPE
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check name of type '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: map
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unindent members'
  scopesEnd:
    - comment.line.double-slash
- source: '                                string content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check end '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: content
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
    - meta.bracket.square.access
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - meta.bracket.square.access
    - punctuation.definition.end.bracket.square
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' setup vars'
  scopesEnd:
    - comment.line.double-slash
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' should_always_be_a_newline'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                stringstream transfer_method'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' get rid of the class''s newline'
  scopesEnd:
    - comment.line.double-slash
- source: '                                transfer_method '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check for no members'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' try to input data'
  scopesEnd:
    - comment.line.double-slash
- source: '                        pair'
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYTYPE
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANYSECONDTYPE
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' data_member'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        map'
- source: <
  scopes:
    - keyword.operator.comparison
- source: ANYTYPE
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANYSECONDTYPE
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '  data_member_holder'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' try inputting data members till EOF '
  scopesEnd:
    - comment.line.double-slash
- source: do
  scopes:
    - keyword.control.do
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: input
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: transfer_method
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' data_member'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: transfer_method
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: DidStreamFail
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: transfer_method
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: data_member_holder
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: data_member
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: =
  scopes:
    - keyword.operator.assignment
- source: data_member
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: not
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.not
- source: EndOfStream
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: transfer_method
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' add the data to the input '
  scopesEnd:
    - comment.line.double-slash
- source: '                        input_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' data_member_holder'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if everything worked return the stream! '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' VisualFormat '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' helpers      '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYSECONDTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__KeyIn__Map
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: key
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: map
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: ','
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: '       ANYSECONDTYPE'
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: input_map
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' maps      http://www.cprogramming.com/tutorial/stl/stlmap.html'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_map
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: key
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: input_map
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYSECONDTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__ValueIn__Map
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: value
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: map
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYSECONDTYPE
- source: ','
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ' ANYTYPE'
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: input_map
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' maps     http://stackoverflow.com/questions/26281979/c-loop-through-map'
  scopesEnd:
    - comment.line.double-slash
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: '&'
  scopes:
    - keyword.operator
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' input_map '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: each
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' value'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYSECONDTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ANYSECONDTYPE
- source: KeyOfFirst__ValueIn__Map
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: value
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: map
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYSECONDTYPE
- source: ','
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ' ANYTYPE'
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: input_map
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' maps     http://stackoverflow.com/questions/26281979/c-loop-through-map'
  scopesEnd:
    - comment.line.double-slash
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: '&'
  scopes:
    - keyword.operator
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' input_map '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: each
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ' value'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: each
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                    ANYSECONDTYPE null_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' null_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__In__
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: value
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: map
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: ','
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ' ANYTYPE'
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: input_map
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__KeyIn__Map
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: value
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input_map'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__ValueIn__Map
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: value
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input_map'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYSECONDTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__In__
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: value
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: map
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYTYPE
- source: ','
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ' ANYSECONDTYPE'
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: input_map
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__KeyIn__Map
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: value
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input_map'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYSECONDTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__In__
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: value
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: map
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ANYSECONDTYPE
- source: ','
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.separator.delimiter.comma.template.argument
- source: ' ANYTYPE'
- source: '>'
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: input_map
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__ValueIn__Map
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: value
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input_map'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Misc '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' how to test if a class has a member function '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' SFINAE test'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' from http://stackoverflow.com/questions/257288/is-it-possible-to-write-a-template-to-check-for-a-functions-existence'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '            template <typename ANYTYPE>'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '            class has_nameoffunction'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                {'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                    typedef char one;'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                    typedef long two;'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '                    template <typename TEST_CLASS> static one test( decltype(&TEST_CLASS::nameoffunction) ) ;'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                    template <typename TEST_CLASS> static two test(...);    '
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '                public:'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                    enum { value = sizeof(test<ANYTYPE>(0)) == sizeof(char) };'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '                };'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '            has_nameoffunction<class_that_you_want_to_test>::value // will return true if the class has the member function'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' how to get class names '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' derived this from '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' http://stackoverflow.com/questions/3649278/how-can-i-get-the-class-name-from-a-c-object'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' FIXME, I think this can be replaced with typeid() from #include <typeinfo> https://stackoverflow.com/questions/11310898/how-do-i-get-the-type-of-a-variable#11310937'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: cxxabi.h
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: ANYTYPE
  scopes:
    - entity.name.type.class
  scopesEnd:
    - meta.block.class
    - meta.head.class
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: string
- source: Type
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    stringstream output'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' status'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: ' demangled '
- source: =
  scopes:
    - keyword.operator.assignment
- source: abi
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: __cxa_demangle
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: typeid
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.typeid
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.typeid
- source: input
  scopes:
    - meta.arguments.operator.typeid
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.typeid
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - meta.function.definition
    - meta.body.function.definition
    - punctuation.separator.delimiter.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: '&'
  scopes:
    - keyword.operator
- source: status
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    output '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' demangled '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: free
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: demangled
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: output
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: //////////////////////
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '  Custom Types'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: //////////////////////
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' pre-declare Item'
  scopesEnd:
    - comment.line.double-slash
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: Item
  scopes:
    - entity.name.type.class
  scopesEnd:
    - meta.head.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' List'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: ITEM
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: List
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: //
  scopesBegin:
    - meta.body.class
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' data'
  scopesEnd:
    - comment.line.double-slash
- source: '                vector'
- source: <
  scopes:
    - keyword.operator.comparison
- source: ITEM
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '    vector_ '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                vector'
- source: <
  scopes:
    - keyword.operator.comparison
- source: ITEM
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '    values  '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                vector'
- source: <
  scopes:
    - keyword.operator.comparison
- source: string
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '  names   '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: public
  scopesBegin:
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' member functions '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' NumberOfItems    '
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: NumberOfItems
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: names
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' AddToBottom      '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.body.class
    - meta.template.definition
- source: class
  scopes:
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.body.class
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.template.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: AddToBottom
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: 'vector_ '
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ITEM
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' *AddToTop        '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' needs to change the index of everything in_ map'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' needs to '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' *ExtractTopItem'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' *ExtractBottomItem'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Remove__ThItem   '
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Remove__ThItem
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: long
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - keyword.operator
- source: item_position
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' item_position '
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: or
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.or
- source: ' item_position '
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: >-
    Somewhere there's a command trying to use Remove__ThItem() with an
    out-of-bounds value
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: Remove__ThElementFrom__Vector
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'item_position '
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' vector_'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Remove__         '
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Remove__
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: string
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: name
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '{'
  scopesBegin:
    - meta.body.function.definition
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'names '
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' EachItem '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' LoopNumber '
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' name '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: names
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EachItem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Remove__ThElementFrom__Vector
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: EachItem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' names '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Remove__ThElementFrom__Vector
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: EachItem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' values'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' should be able to end because there should be no duplicate name entrys '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' From__To__       '
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: List
- source: <
  scopes:
    - keyword.operator.comparison
- source: ITEM
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: From__To__
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: starting_spot
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: ending_spot
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                            List'
  scopesBegin:
    - meta.body.function.definition
- source: <
  scopes:
    - keyword.operator.comparison
- source: ITEM
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' output_list'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'ending_spot '
- source: '-'
  scopes:
    - keyword.operator
- source: ' starting_spot '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: +
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: output_list
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: AddToBottom
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: LoopNumber
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' output_list'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' *RemoveFrom__To__'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Data             '
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: ITEM
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Data
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: ' vector_ '
- source: +
  scopes:
    - keyword.operator
- source: ' values'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Vector           '
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: ITEM
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Vector
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: ' vector_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Names            '
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: string
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: Names
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: ' names'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' NamedValues      '
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: ITEM
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: NamedValues
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: ' values'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Is__AName        '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.body.class
    - meta.template.definition
- source: class
  scopes:
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.body.class
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__AName
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if its not a string then it can''t be a name '
  scopesEnd:
    - comment.line.double-slash
- source: '                                ITEM input_as_item '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ITEM
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_as_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: Is__In__Vector
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_as_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' names'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Is__ANamedValue  '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.body.class
    - meta.template.definition
- source: class
  scopes:
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.body.class
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__ANamedValue
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Is__In__Vector
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ITEM
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: values
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Is__AVectorValue '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.body.class
    - meta.template.definition
- source: class
  scopes:
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.body.class
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__AVectorValue
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Is__In__Vector
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ITEM
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Is__AValue       '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.body.class
    - meta.template.definition
- source: class
  scopes:
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.body.class
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__AValue
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__In__Vector
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ITEM
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: values
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Is__In__Vector
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ITEM
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vector_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Has              '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.body.class
    - meta.template.definition
- source: class
  scopes:
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.body.class
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Has
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Is__AName
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ITEM
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '||'
  scopes:
    - keyword.operator.logical
- source: Is__ANamedValue
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ITEM
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '||'
  scopes:
    - keyword.operator.logical
- source: Is__AValue
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ITEM
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' SizeOfLargestName'
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: SizeOfLargestName
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: int
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' largest_size '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: '&'
  scopes:
    - keyword.operator
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' names '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: each
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' largest_size'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                            largest_size '
- source: =
  scopes:
    - keyword.operator.assignment
- source: each
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' largest_size'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Sample           '
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: string
- source: Sample
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if theres nothing in_ the list, return nothing '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: return
  scopes:
    - keyword.control.return
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '*NOTHING*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: short
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' first_few '
- source: =
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '>'
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '?'
  scopes:
    - keyword.operator.ternary
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: ':'
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - keyword.operator.ternary
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            string output_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '  first_few     '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                output_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' output_string '
- source: +
  scopes:
    - keyword.operator
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: LoopNumber
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' output_string'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' At               '
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: ITEM
- source: '&'
  scopes:
    - keyword.operator
- source: At
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: position
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: bool
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' is_in_bounds '
- source: =
  scopes:
    - keyword.operator.assignment
- source: abs
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: position
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: <=
  scopes:
    - keyword.operator.comparison
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: ' position '
- source: '!='
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' is_negative  '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' position      '
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' is_in_bounds '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' is_negative '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if -1 then return the last element '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' if -2 then return 2nd-to-last element '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' etc '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: ' position'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: position
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' is_negative '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Somewhere the code is asking for item '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: position
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' in_ a list'
- source: \b
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'But that item doesn''t exist :/'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Here is a sample of the list:'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: Sample
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if the position doesnt exist, then create it (and all of the inbetween values)'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' missing_items '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' position '
- source: '-'
  scopes:
    - keyword.operator
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '  missing_items     '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ITEM
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: position
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' end if is_in_bounds'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' end at'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Input            '
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: Input
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check name of type '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: List
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unindent members'
  scopesEnd:
    - comment.line.double-slash
- source: '                                    string content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check end '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: content
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
    - meta.bracket.square.access
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - meta.bracket.square.access
    - punctuation.definition.end.bracket.square
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' setup vars'
  scopesEnd:
    - comment.line.double-slash
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' should_always_be_a_newline'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                    stringstream transfer_method'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' get rid of the class''s newline'
  scopesEnd:
    - comment.line.double-slash
- source: '                                    transfer_method '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' create empty versions of all data members '
  scopesEnd:
    - comment.line.double-slash
- source: input
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' transfer_method '
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' vector_ '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: transfer_method
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: input
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' transfer_method '
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' values  '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: transfer_method
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: input
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' transfer_method '
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' names   '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: transfer_method
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if stream fails, then return fail '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: DidStreamFail
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: transfer_method
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if everything worked return the stream! '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' internal overloads'
  scopesEnd:
    - comment.line.double-slash
- source: Item
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.qualified_type
    - entity.name.type
  scopesEnd:
    - meta.block.class
    - meta.body.class
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '[]'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: long
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: position
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: At
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: position
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '[]'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: string
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: name
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if name is in_ names, return the value'
  scopesEnd:
    - comment.line.double-slash
- source: long
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' index_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: IndexOf__In__Vector
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: name
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' names'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' index_ '
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: values
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: index_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' add the name '
  scopesEnd:
    - comment.line.double-slash
- source: 'names '
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '  name  '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: values
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ITEM
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' return the Item '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: values
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: values
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.body.class
    - meta.template.definition
- source: class
  scopes:
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.body.class
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.template.definition
- source: ' List'
- source: <
  scopes:
    - keyword.operator.comparison
- source: ITEM
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: =
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: vector
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ANYTYPE
- source: '>'
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: const
  scopes:
    - storage.modifier.specifier.const
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: assignment_data
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                        vector_ '
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: =
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'assignment_data '
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' EachItem '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' LoopNumber '
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: vector_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: assignment_data
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EachItem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: List
  scopesBegin:
    - meta.qualified_type
  scopes:
    - entity.name.type
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.qualified_type
- source: ITEM
- source: '>'
  scopes:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.qualified_type
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: =
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: vector
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: Item
- source: '>'
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: const
  scopes:
    - storage.modifier.specifier.const
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: assignment_data
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                        vector_ '
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' assignment_data'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' external overloads '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' IO          '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ITEM
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: output
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ostream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: List
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ITEM
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                            out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: List
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                    stringstream data_members'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' for each datamember'
  scopesEnd:
    - comment.line.double-slash
- source: output
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' data_members '
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Vector
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' data_members '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: output
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' data_members '
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Names
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' data_members '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: output
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' data_members '
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: NamedValues
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' data_members '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' format and return stream'
  scopesEnd:
    - comment.line.double-slash
- source: '                                    out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data_members
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' out'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ITEM
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: List
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ITEM
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Input
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' VisualFormat'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: ITEM
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: string
- source: VisualFormat
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: List
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: ITEM
- source: '>'
  scopes:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' output both'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: NamedValues
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '>='
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: and
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.and
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Vector
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '>='
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                        stringstream named_values_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Names
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' EachItem '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' LoopNumber '
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: '                                            named_values_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: setw
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
- source: '15'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Names
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EachItem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' : '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: NamedValues
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EachItem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Vector
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: VisualFormat
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Vector
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Named Values
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: named_values_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' just output vector '
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Vector
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '>='
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: List
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: VisualFormat
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Vector
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' just output named values '
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Names
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '>='
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                        stringstream output_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Names
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' EachItem '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' LoopNumber '
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
  scopes:
    - punctuation.terminator.statement
- source: '                                            output_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: setw
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
- source: '15'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.block
    - meta.block
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Names
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EachItem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' : '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Vector
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EachItem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: List
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' output *NOTHING*  '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '*NOTHING*'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' << >>       '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: ITEM
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ' ostream'
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '<<'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: ostream
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: List
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ITEM
- source: '>'
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: ' out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: VisualFormat
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: typename
  scopes:
    - storage.modifier.typename
- source: ITEM
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: ' istream'
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '>>'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: istream
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: List
  scopes:
    - entity.name.type.parameter
- source: <
  scopes:
    - meta.template.call
    - punctuation.section.angle-brackets.begin.template.call
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ITEM
- source: '>'
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.template.call
    - punctuation.section.angle-brackets.end.template.call
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: input
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input_'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' make it so that List is List<Item>'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: List
  scopes:
    - entity.name.function.preprocessor
- source: ' List'
- source: <
  scopes:
    - keyword.operator.comparison
- source: Item
- source: '>'
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.preprocessor.macro
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name some other names for items '
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: var
  scopes:
    - entity.name.function.preprocessor
- source: ' Item'
  scopesEnd:
    - meta.preprocessor.macro
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: '  Item'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: Item
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: //
  scopesBegin:
    - meta.body.class
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' data'
  scopesEnd:
    - comment.line.double-slash
- source: '                string data'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' later turn both of these into some kind of binary'
  scopesEnd:
    - comment.line.double-slash
- source: '                string type'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: public
  scopesBegin:
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' constructors   '
  scopesEnd:
    - comment.line.double-slash
- source: explicit
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.explicit
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ' data '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Nothing
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Nothing
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: explicit
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.explicit
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '   input_string[] '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ' data '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '  input_string   '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: explicit
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.explicit
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' string input_string   '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ' data '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '  input_string   '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: explicit
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.explicit
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' input_         '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                            stringstream input_method'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' precision should max out before 20'
  scopesEnd:
    - comment.line.double-slash
- source: '                            input_method '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: setprecision
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.block
- source: '20'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.block
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input_ '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            data '
- source: =
  scopes:
    - keyword.operator.assignment
- source: input_method
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.body.class
    - meta.template.definition
- source: class
  scopes:
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.body.class
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: explicit
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.explicit
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' ANYTYPE input '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                stringstream data_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: output
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data_stream
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' get the name'
  scopesEnd:
    - comment.line.double-slash
- source: '                                type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' data_stream'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: type
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.block
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.block
  scopes:
    - punctuation.separator.delimiter.comma
- source: type
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.block
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' get the content'
  scopesEnd:
    - comment.line.double-slash
- source: '                                string content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data_stream
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' remove the closing newline'
  scopesEnd:
    - comment.line.double-slash
- source: '                                content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.block
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.block
  scopes:
    - punctuation.separator.delimiter.comma
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.block
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.block
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                data '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' content'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'type '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: double
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '||'
  scopes:
    - keyword.operator.logical
- source: ' type '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: integer
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                                    type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' methods        '
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: string
- source: Type
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: ' type '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Data
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: ' data '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: Remove0s
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: stoi
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ==
  scopes:
    - keyword.operator.comparison
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stoi
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: 'FIXME, change this to remove trailing 0''s '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' data'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: Input
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check name of type '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: EverythingUpTo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Item
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unindent members'
  scopesEnd:
    - comment.line.double-slash
- source: '                                    string content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: Input_Unindent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check fail'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'content '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check end '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: content
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
    - meta.bracket.square.access
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.parens
  scopes:
    - meta.bracket.square.access
    - punctuation.definition.end.bracket.square
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' setup vars'
  scopesEnd:
    - comment.line.double-slash
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' should_always_be_a_newline'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                    stringstream transfer_method'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' get rid of the class''s newline'
  scopesEnd:
    - comment.line.double-slash
- source: '                                    transfer_method '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.separator.delimiter.comma
- source: content
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' create empty versions of all data members '
  scopesEnd:
    - comment.line.double-slash
- source: input
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' transfer_method'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' data '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: transfer_method
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: input
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' transfer_method'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' type '
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: transfer_method
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: should_always_be_a_newline
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if stream fails, then return fail '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: DidStreamFail
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: transfer_method
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: StreamFailed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check the data, make sure its valid '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' FIXME, do this later'
- source: //
  scopes:
    - punctuation.definition.comment
- source: 'if ( !IsDataValid(datamember)) '
- source: //
  scopes:
    - punctuation.definition.comment
- source: '    return StreamFailed(in_);'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' if everything worked return the stream! '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' in_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' operators      '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' =      '
  scopesEnd:
    - comment.line.double-slash
- source: Item
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.qualified_type
    - entity.name.type
  scopesEnd:
    - meta.block.class
    - meta.body.class
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: =
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: ' data '
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: =
  scopes:
    - keyword.operator.assignment
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: =
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input_string
  scopes:
    - variable.parameter
- source: '['
  scopesBegin:
    - meta.bracket.square.array
  scopes:
    - punctuation.definition.begin.bracket.square.array.type
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.array.type
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.bracket.square.array
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: ' data '
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' input_string              '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: =
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: string
  scopes:
    - entity.name.type.parameter
- source: input_string
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: ' data '
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' input_string              '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: =
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: the_inputeger
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: ' data '
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: =
  scopes:
    - keyword.operator.assignment
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: the_inputeger
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: =
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: float
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                            stringstream input_method'
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' precision should max out before 20'
  scopesEnd:
    - comment.line.double-slash
- source: '                            input_method '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: setprecision
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: '20'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input_ '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            data '
- source: =
  scopes:
    - keyword.operator.assignment
- source: input_method
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: =
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: input_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                            stringstream input_method'
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' precision should max out before 20'
  scopesEnd:
    - comment.line.double-slash
- source: '                            input_method '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: setprecision
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: '20'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input_ '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            data '
- source: =
  scopes:
    - keyword.operator.assignment
- source: input_method
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.body.class
    - meta.template.definition
- source: class
  scopes:
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.body.class
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.template.definition
- source: ' Item'
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: =
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                            stringstream data_stream'
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            data_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            data '
- source: =
  scopes:
    - keyword.operator.assignment
- source: data_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            type '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Unknown
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' implicit conversion '
  scopesEnd:
    - comment.line.double-slash
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: string
  scopes:
    - entity.name.operator.type
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: ' data'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: double
  scopes:
    - entity.name.operator.type
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' type '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Somewhere there is an item thats not a number,'
- source: \n
  scopes:
    - constant.character.escape
- source: and something is trying to make it a double
- source: \n
  scopes:
    - constant.character.escape
- source: 'the item is '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: data
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' IO'
  scopesEnd:
    - comment.line.double-slash
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: output
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ostream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                    out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Item
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            stringstream data_members'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' for each datamember'
  scopesEnd:
    - comment.line.double-slash
- source: output
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' data_members '
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' data_members '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: output
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' data_members '
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' data_members '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' format and return stream'
  scopesEnd:
    - comment.line.double-slash
- source: '                            out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data_members
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ' out'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: istream
- source: '&'
  scopes:
    - keyword.operator
- source: input
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: istream
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Input
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: in_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: string
- source: AsData
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                    stringstream out'
  scopesBegin:
    - meta.body.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' name of class '
  scopesEnd:
    - comment.line.double-slash
- source: '                    out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    stringstream data_members'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' for each datamember'
  scopesEnd:
    - comment.line.double-slash
- source: '                    data_members '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' format and return stream'
  scopesEnd:
    - comment.line.double-slash
- source: '                    out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: Indent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data_members
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: out
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' overloads'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' >>   '
  scopesEnd:
    - comment.line.double-slash
- source: ostream
  scopes:
    - meta.function.definition.special.operator-overload
    - meta.qualified_type
    - entity.name.type
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '<<'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: ostream
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: out
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' number'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: ' out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' list '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: List
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' create a blank list '
  scopesEnd:
    - comment.line.double-slash
- source: '                                    List blank_list'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' put the data into a stream'
  scopesEnd:
    - comment.line.double-slash
- source: '                                    stringstream data_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                    data_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: AsData
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' should_always_be_a_newline'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' populate the list '
  scopesEnd:
    - comment.line.double-slash
- source: input
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: data_stream
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' blank_list'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' output list using it''s own stream operator'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: ' out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' blank_list'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' out '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: istream
  scopes:
    - meta.qualified_type
    - entity.name.type
  scopesEnd:
    - meta.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '>>'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: istream
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: in_
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: input
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: in_
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: input_
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' what to do about lists, bool''s, Grids'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' +'
  scopesEnd:
    - comment.line.double-slash
- source: Item
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: string
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: base
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: repetitions
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '                            string result'
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' i '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: <
  scopes:
    - keyword.operator.comparison
- source: ' repetitions'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '                                result '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: ' base'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: result
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: the_input
  scopes:
    - variable.parameter
- source: '['
  scopesBegin:
    - meta.bracket.square.array
  scopes:
    - punctuation.definition.begin.bracket.square.array.type
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.array.type
  scopesEnd:
    - meta.bracket.square.array
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Trying to add a non-string Item: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' to a string: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Trying to add an int: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' to non-number Item '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Trying to add a double: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' to non-number Item '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: string
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Remove0s
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: the_input
  scopes:
    - variable.parameter
- source: '['
  scopesBegin:
    - meta.bracket.square.array
  scopes:
    - punctuation.definition.begin.bracket.square.array.type
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.array.type
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - meta.bracket.square.array
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Trying to add a non-string Item: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' to a string: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Trying to add an int: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' to a non-number Item '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Trying to add a double: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' to a non-number Item '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: string
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Remove0s
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item1
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item2
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' -    '
  scopesEnd:
    - comment.line.double-slash
- source: Item
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '-'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' the_input '
- source: '-'
  scopes:
    - keyword.operator
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Trying to subtract an int: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' from a non-number Item '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '-'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: '-'
  scopes:
    - keyword.operator
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Trying to subtract a double: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' from a non-number Item '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '-'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '-'
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Trying to subtract a non-number Item: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' from an int: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '-'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: '-'
  scopes:
    - keyword.operator
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Trying to subtract a non-number Item: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' from a double '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '-'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item1
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item2
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '-'
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: I think somewhere in_ the code there is one item subtracting another
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: but they are not both numbers
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: 'the items are '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' and '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' *'
  scopesEnd:
    - comment.line.double-slash
- source: Item
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '*'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: string
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Somewhere there is a string Item: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' being multipled by a string'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' number_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: stoi
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' number_ '
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' number_ '
- source: '>'
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                    string output_string'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '  number_     '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                        output_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' output_string '
- source: +
  scopes:
    - keyword.operator
- source: ' the_input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output_string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Somewhere there is a string be multipled by a negative Item
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '*'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' number_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '  the_input  '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' number_ '
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' number_ '
- source: '>'
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                    string output_string'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '  number_     '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                        output_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' output_string '
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output_string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Somewhere there is a string be multipled by a negative Item
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: +
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '*'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' number_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '  the_input  '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' number_ '
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' number_ '
- source: '>'
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                    string output_string'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '  number_     '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                        output_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' output_string '
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output_string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Somewhere there is a string be multipled by a negative Item
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: +
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '*'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: AsString
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: the_input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator
- source: ' input_item'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '*'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' number_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '  the_input  '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' number_ '
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' number_ '
- source: '>'
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                    string output_string'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '  number_     '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                        output_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' output_string '
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output_string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Somewhere there is a string be multipled by a negative Item
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: +
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '*'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' number_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '  the_input  '
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' number_ '
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' number_ '
- source: '>'
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                    string output_string'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '  number_     '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                        output_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' output_string '
- source: +
  scopes:
    - keyword.operator
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output_string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Somewhere there is a string be multipled by a negative Item
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: +
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '*'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: string
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Somewhere there is a string Item being multipled by a string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' number_ '
- source: =
  scopes:
    - keyword.operator.assignment
- source: stoi
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' number_ '
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' number_ '
- source: '>'
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                    string output_string'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '  number_     '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.block
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                        output_string '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' output_string '
- source: +
  scopes:
    - keyword.operator
- source: ' the_input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output_string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Somewhere there is a string be multipled by a negative Item
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '*'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'input_item '
- source: '*'
  scopes:
    - keyword.operator
- source: AsString
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: the_input
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '*'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item1
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item2
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'input_item1 '
- source: '*'
  scopes:
    - keyword.operator
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator
- source: ' input_item2'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: I think somewhere in_ the code there is one item multipling another
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: but neither of them are numbers
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: 'the items are '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' type: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' and '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' type: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' /    '
  scopesEnd:
    - comment.line.double-slash
- source: Item
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: /
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' the_input '
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Division by 0 somewhere
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: long
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: double
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: /
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Trying to divide something from an item thats not a number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: /
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: float
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: /
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Trying to divide something from an item thats not a number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: /
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: /
  scopes:
    - keyword.operator
- source: ' the_input'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Trying to divide something from an item thats not a number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: /
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: int
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: stoi
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Division by 0 somewhere
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' the_input '
- source: /
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: double
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '00000000001'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
  scopes:
    - keyword.operator.logical
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '00000000001'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Division by 0 somewhere
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: /
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: float
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: stof
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '00001'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
  scopes:
    - keyword.operator.logical
- source: stof
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '00001'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Division by 0 somewhere
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: /
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Trying to divide something from an item thats not a number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: /
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: float
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: int
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: stoi
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Division by 0 somewhere
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' the_input '
- source: /
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: double
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '00000000001'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
  scopes:
    - keyword.operator.logical
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '00000000001'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Division by 0 somewhere
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: /
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: float
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: stof
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '00001'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
  scopes:
    - keyword.operator.logical
- source: stof
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '00001'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Division by 0 somewhere
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: /
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Trying to divide something from an item thats not a number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: /
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: int
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: stoi
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ==
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Division by 0 somewhere
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' the_input '
- source: /
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: double
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '00000000001'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
  scopes:
    - keyword.operator.logical
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '00000000001'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Division by 0 somewhere
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: /
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: float
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: stof
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: <
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '00001'
  scopes:
    - constant.numeric.decimal
- source: '&&'
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
  scopes:
    - keyword.operator.logical
- source: stof
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '00001'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
    - meta.block
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Division by 0 somewhere
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'the_input '
- source: /
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Trying to divide something from an item thats not a number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: /
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item1
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item2
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: /
  scopes:
    - keyword.operator
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: I think somewhere in_ the code there is one item dividing another
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: but they are not both numbers
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: 'the items are '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' and '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' ^    '
  scopesEnd:
    - comment.line.double-slash
- source: Item
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ^
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: pow
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' the_input'
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Trying to use an exponent with something from an item thats not a number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ^
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: float
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: pow
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' the_input'
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Trying to use an exponent with something from an item thats not a number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ^
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: pow
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' the_input'
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Trying to use an exponent with something from an item thats not a number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ^
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: pow
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' the_input'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Trying to use an exponent with something from an item thats not a number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ^
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: float
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: pow
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' the_input'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Trying to use an exponent with something from an item thats not a number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ^
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: the_input
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: pow
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ' the_input'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: stold
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Trying to use an exponent with something from an item thats not a number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: Item
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ^
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item1
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item2
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: number
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Item
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: stod
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ^
  scopes:
    - keyword.operator
- source: ' input_item2'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: I think somewhere in_ the code there is one item to the power of another
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: but they are not both numbers
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: 'the items are '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item1
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ' and '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: input_item2
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: '  Function overloads'
  scopesEnd:
    - comment.line.double-slash
- source: string
- source: to_string
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
    - meta.function.definition.parameters
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: input_item
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - meta.function.definition.parameters
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: input_item
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' List'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' helpers '
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
  scopesEnd:
    - meta.template.definition
- source: class
  scopes:
    - meta.block.class
    - meta.head.class
    - storage.type.class
- source: ANYTYPE
  scopesBegin:
    - meta.template.definition
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Is__In__
  scopesBegin:
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: value
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: List
  scopes:
    - entity.name.type.parameter
- source: input_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                            Item holder '
  scopesBegin:
    - meta.body.function.definition
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' value'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: input_
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: Has
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: holder
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' puts, print, and log '
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' I made this code based on code from the site below'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' I''ve had it for a long time and you can find it on my github'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' I like to think I made it more useful, but all originalality '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' goes to the original author'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' http://wiki.c2.com/?OverloadingCommaOperator'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' puts is the standard way to output things'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: puts
  scopes:
    - entity.name.function.preprocessor
- source: '        __PutsOutputFixerStream'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '#'
  scopesBegin:
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: put_lines
  scopes:
    - entity.name.function.preprocessor
- source: __PutLinesOutputFixerStream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: reset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __PutLinesOutputFixerStream
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.preprocessor.macro
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' and print is puts without a newline'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: Print
  scopes:
    - entity.name.function.preprocessor
- source: '       cout'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.preprocessor.macro
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' log is an incredibly useful Debugging tool'
  scopesEnd:
    - comment.line.double-slash
- source: '    string __OUTPUT_INDENT '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' __INCREASE_INDENT '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: log
  scopes:
    - entity.name.function.preprocessor
- source: __LogOutputFixerStream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: reset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __LogOutputFixerStream
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '#'
  scopesBegin:
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: log_start
  scopes:
    - entity.name.function.preprocessor
- source: '          __INCREASE_INDENT '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __LogOutputFixerStream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: reset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __LogOutputFixerStream
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '#'
  scopesBegin:
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: log_end
  scopes:
    - entity.name.function.preprocessor
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: __OUTPUT_INDENT
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '>='
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.preprocessor.macro
    - meta.parens
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.preprocessor.macro
  scopes:
    - meta.parens
    - punctuation.section.parens.end.bracket.round
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ' __OUTPUT_INDENT '
- source: =
  scopes:
    - keyword.operator.assignment
- source: __OUTPUT_INDENT
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
  scopesEnd:
    - meta.preprocessor.macro
    - meta.block
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopesBegin:
    - meta.preprocessor.macro
    - meta.block
  scopes:
    - punctuation.separator.delimiter.comma
- source: __OUTPUT_INDENT
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
  scopesEnd:
    - meta.preprocessor.macro
    - meta.block
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - meta.preprocessor.macro
    - meta.block
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __LogOutputFixerStream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: reset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __LogOutputFixerStream
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.preprocessor.macro
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: __PutLinesOutputFixerStreamClass
  scopes:
    - entity.name.type.class
- source: ':'
  scopes:
    - punctuation.separator.colon.inheritance
  scopesEnd:
    - meta.block.class
    - meta.head.class
- source: ' public stringstream'
- source: '{'
  scopesBegin:
    - meta.block.class
  scopes:
    - meta.head.class
    - punctuation.section.block.begin.bracket.curly.class
- source: protected
  scopesBegin:
    - meta.body.class
    - storage.type.modifier.access.control.protected
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.protected
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' data '
  scopesEnd:
    - comment.line.double-slash
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' length_of_last_line '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.block.class
    - meta.body.class
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' dont_go_up_a_line '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string what_was_just_output '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    string content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' class helper functions'
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - comment.line.double-slash
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: go_up_a_line
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                            cout '
  scopesBegin:
    - meta.body.function.definition
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \033
  scopes:
    - constant.character.escape
- source: '[1A'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: go_to_the_right
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: number_of_spaces
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                            cout '
  scopesBegin:
    - meta.body.function.definition
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \033
  scopes:
    - constant.character.escape
- source: '['
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator
- source: to_string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: number_of_spaces
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: C
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: save_cursor_position
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                            cout '
  scopesBegin:
    - meta.body.function.definition
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \033
  scopes:
    - constant.character.escape
- source: '[s'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: restore_cursor_position
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                            cout '
  scopesBegin:
    - meta.body.function.definition
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \033
  scopes:
    - constant.character.escape
- source: '[u'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: length_of_previous_line
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: int
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' charaters_till_newline '
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' Max_Value '
- source: =
  scopes:
    - keyword.operator.assignment
- source: what_was_just_output
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' LoopNumber'
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
    - meta.block
    - meta.parens
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber '
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' Max_Value '
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' LoopNumber'
- source: ++
  scopes:
    - keyword.operator.increment
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: what_was_just_output
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: what_was_just_output
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator
- source: ' LoopNumber'
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                        charaters_till_newline'
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' charaters_till_newline'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: public
  scopesBegin:
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - storage.type.modifier.access.control.public
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: reset
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                        length_of_last_line '
  scopesBegin:
    - meta.body.function.definition
- source: =
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
  scopes:
    - punctuation.terminator.statement
- source: '                        dont_go_up_a_line '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        what_was_just_output '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: output_line
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: dont_go_up_a_line
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: save_cursor_position
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' content'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'each '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                                cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' __OUTPUT_INDENT'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                                        cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' each'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                                cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                __INCREASE_INDENT '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                dont_go_up_a_line '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: go_up_a_line
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                length_of_last_line '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: length_of_previous_line
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: go_to_the_right
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: length_of_last_line
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' each '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' content'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'each '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                                cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' __OUTPUT_INDENT'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                                        cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' each'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' FIXME, if the terminal width is really small '
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' and the string is really long, this might mess things up '
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: restore_cursor_position
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.body.function.definition
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: add_content
  scopesBegin:
    - meta.block.class
    - meta.body.class
    - meta.function.definition
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '                        what_was_just_output '
  scopesBegin:
    - meta.body.function.definition
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' content'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                        content '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' input_'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: '    stringstream __PutsOutputFixerStream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '    __PutLinesOutputFixerStreamClass __PutLinesOutputFixerStream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '    __PutLinesOutputFixerStreamClass __LogOutputFixerStream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' for normal input (classes)'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: ANYTYPE
  scopes:
    - entity.name.type.class
  scopesEnd:
    - meta.block.class
    - meta.head.class
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: inline
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.inline
- source: ' ostream'
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ','
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: ostream
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: o
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: value
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - variable.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if its the puts stream then output each thing with a newline after it'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '&'
  scopes:
    - keyword.operator
- source: 'o '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '&'
  scopes:
    - keyword.operator
- source: __PutsOutputFixerStream
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' make this threadsafe by only allowing one printout at a time'
  scopesEnd:
    - comment.line.double-slash
- source: pthread_mutex_lock
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '&'
  scopes:
    - keyword.operator
- source: mutex_for_output
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' put the value into the string stream '
  scopesEnd:
    - comment.line.double-slash
- source: '                    stringstream converter_to_string'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    converter_to_string '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' value'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' get the output as a string'
  scopesEnd:
    - comment.line.double-slash
- source: '                    string content_being_output '
- source: =
  scopes:
    - keyword.operator.assignment
- source: converter_to_string
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' insert the indent at the begining'
  scopesEnd:
    - comment.line.double-slash
- source: '                    cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' __OUTPUT_INDENT'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' insert the indent after every newline in the content'
  scopesEnd:
    - comment.line.double-slash
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' each_char '
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ' content_being_output'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'each_char '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                                    cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' __OUTPUT_INDENT'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '                            cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' each_char'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' send a newline at the end'
  scopesEnd:
    - comment.line.double-slash
- source: '                    cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' unlock the mutex to allow other threads to print things out;'
  scopesEnd:
    - comment.line.double-slash
- source: pthread_mutex_unlock
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '&'
  scopes:
    - keyword.operator
- source: mutex_for_output
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if its the __PutLinesOutputFixerStream, then use __PutLinesOutputFixerStream to output'
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '&'
  scopes:
    - keyword.operator
- source: 'o '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '&'
  scopes:
    - keyword.operator
- source: __PutLinesOutputFixerStream
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' erase the string-stream part of __PutLinesOutputFixerStream'
  scopesEnd:
    - comment.line.double-slash
- source: __PutLinesOutputFixerStream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' add the line to __PutLinesOutputFixerStream'
  scopesEnd:
    - comment.line.double-slash
- source: '                    stringstream out_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    out_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' value'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: __PutLinesOutputFixerStream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: add_content
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '__OUTPUT_INDENT '
- source: +
  scopes:
    - keyword.operator
- source: out_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' output the line '
  scopesEnd:
    - comment.line.double-slash
- source: __PutLinesOutputFixerStream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: output_line
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if its the Debugging_stream'
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '&'
  scopes:
    - keyword.operator
- source: 'o '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '&'
  scopes:
    - keyword.operator
- source: __LogOutputFixerStream
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' erase the string-stream part of __PutLinesOutputFixerStream'
  scopesEnd:
    - comment.line.double-slash
- source: __LogOutputFixerStream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' check if Debugging is on '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'Debugging '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' add the line to __LogOutputFixerStream'
  scopesEnd:
    - comment.line.double-slash
- source: '                            stringstream out_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                            out_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' value'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '__INCREASE_INDENT '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: __LogOutputFixerStream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: add_content
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '__OUTPUT_INDENT '
- source: +
  scopes:
    - keyword.operator
- source: out_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                                    __OUTPUT_INDENT '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: __LogOutputFixerStream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: add_content
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '__OUTPUT_INDENT '
- source: +
  scopes:
    - keyword.operator
- source: out_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' output the line '
  scopesEnd:
    - comment.line.double-slash
- source: __LogOutputFixerStream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: output_line
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' dont output anything '
  scopesEnd:
    - comment.line.double-slash
- source: '                            o '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' end if debugging'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' if it''s some other stream'
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' then just keep going like normal'
  scopesEnd:
    - comment.line.double-slash
- source: '                    stringstream out_stream'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    out_stream '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' value'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                    o '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: out_stream
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' o'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' for stream operators (fixed, setprecision(), etc)'
  scopesEnd:
    - comment.line.double-slash
- source: inline
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.inline
- source: ' ostream'
- source: '&'
  scopes:
    - keyword.operator
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ','
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: ostream
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: '&'
  scopes:
    - keyword.operator
- source: o
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: ostream
- source: '&'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - punctuation.section.parens.begin.bracket.round.function.pointer
- source: '*'
  scopes:
    - punctuation.definition.function.pointer.dereference
- source: manip_fun
  scopes:
    - variable.parameter.pointer.function
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.function.pointer
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.function.pointer
- source: ostream
  scopes:
    - meta.parameter
    - entity.name.type.parameter
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: '&'
  scopes:
    - keyword.operator
- source: )
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - punctuation.section.parameters.end.bracket.round.function.pointer
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if its from print, then use then send it to cout directly '
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '&'
  scopes:
    - keyword.operator
- source: 'o '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '&'
  scopes:
    - keyword.operator
- source: __PutLinesOutputFixerStream
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                    cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' manip_fun'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '&'
  scopes:
    - keyword.operator
- source: 'o '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: '&'
  scopes:
    - keyword.operator
- source: __LogOutputFixerStream
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'Debugging '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '                            cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' manip_fun'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if it''s some other stream'
  scopesEnd:
    - comment.line.double-slash
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' then just keep going like normal'
  scopesEnd:
    - comment.line.double-slash
- source: '                    o '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' manip_fun'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: ' o'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: '#'
  scopesBegin:
    - keyword.control.directive.endif
  scopes:
    - punctuation.definition.directive
- source: endif
