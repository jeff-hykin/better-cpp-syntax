- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: iostream
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: sstream
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Constants'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
- source: //
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Digits'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' decimal'
  scopesEnd:
    - comment.line.double-slash
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '239480'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '239480'
  scopes:
    - constant.numeric.decimal
- source: f
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: f
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: L
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: LL
  scopes:
    - keyword.other.unit.user-defined
- source: '4897430'
  scopes:
    - constant.numeric.decimal
- source: la
  scopes:
    - keyword.other.unit.user-defined
- source: '32094'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '930123'
  scopes:
    - constant.numeric.decimal
- source: a
  scopes:
    - keyword.other.unit.user-defined
- source: '4897430'
  scopes:
    - constant.numeric.decimal
- source: LL
  scopes:
    - keyword.other.unit.suffix.integer
- source: '32094'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '930123'
  scopes:
    - constant.numeric.decimal
- source: F
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: '32094'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '930123'
  scopes:
    - constant.numeric.decimal
- source: f
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: '1'
  scopesBegin:
    - constant.numeric.decimal
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '03'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '432'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '43'
- source: '123232'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '1231321'
- source: '3'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '20'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '94'
  scopesEnd:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '93'
  scopesBegin:
    - constant.numeric.decimal
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '01'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '23'
- source: '3'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '20'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '94'
  scopesEnd:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '93'
  scopesBegin:
    - constant.numeric.decimal
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '1'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '23'
  scopesEnd:
    - constant.numeric.decimal
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' e'
  scopesEnd:
    - comment.line.double-slash
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: e
  scopes:
    - keyword.other.unit.exponent.decimal
- source: '1'
  scopes:
    - constant.numeric.exponent.decimal
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: e
  scopes:
    - keyword.other.unit.exponent.decimal
- source: '10'
  scopes:
    - constant.numeric.exponent.decimal
- source: f
  scopes:
    - keyword.other.unit.suffix.integer
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: e
  scopes:
    - keyword.other.unit.exponent.decimal
- source: '10'
  scopes:
    - constant.numeric.exponent.decimal
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: e
  scopes:
    - keyword.other.unit.exponent.decimal
- source: '10'
  scopes:
    - constant.numeric.exponent.decimal
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: e
  scopes:
    - keyword.other.unit.exponent.decimal
- source: '-'
  scopes:
    - keyword.operator.minus.exponent.decimal
- source: '10'
  scopes:
    - constant.numeric.exponent.decimal
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '79769'
  scopes:
    - constant.numeric.decimal
- source: e
  scopes:
    - keyword.other.unit.exponent.decimal
- source: +
  scopes:
    - keyword.operator.plus.exponent.decimal
- source: '308'
  scopes:
    - constant.numeric.exponent.decimal
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '79'
  scopesBegin:
    - constant.numeric.decimal
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '76'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '9'
  scopesEnd:
    - constant.numeric.decimal
- source: e
  scopes:
    - keyword.other.unit.exponent.decimal
- source: +
  scopes:
    - keyword.operator.plus.exponent.decimal
- source: '3'
  scopesBegin:
    - constant.numeric.exponent.decimal
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '0'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '8'
  scopesEnd:
    - constant.numeric.exponent.decimal
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' octal'
  scopesEnd:
    - comment.line.double-slash
- source: '0'
  scopes:
    - keyword.other.unit.octal
- source: '1'
  scopes:
    - constant.numeric.octal
- source: '0'
  scopes:
    - keyword.other.unit.octal
- source: '1001202'
  scopes:
    - constant.numeric.octal
- source: '0'
  scopes:
    - keyword.other.unit.octal
- source: '10'
  scopesBegin:
    - constant.numeric.octal
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '0'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '120'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '2'
  scopesEnd:
    - constant.numeric.octal
- source: '0'
  scopes:
    - keyword.other.unit.octal
- source: ''''
  scopesBegin:
    - constant.numeric.octal
  scopes:
    - punctuation.separator.constant.numeric
- source: '1'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '2'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '3'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '4'
  scopesEnd:
    - constant.numeric.octal
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' binary'
  scopesEnd:
    - comment.line.double-slash
- source: 0b
  scopes:
    - keyword.other.unit.binary
- source: '101010'
  scopes:
    - constant.numeric.binary
- source: 0b
  scopes:
    - keyword.other.unit.binary
- source: '000001'
  scopes:
    - constant.numeric.binary
- source: 0b
  scopes:
    - keyword.other.unit.binary
- source: '100001'
  scopes:
    - constant.numeric.binary
- source: 0b
  scopes:
    - keyword.other.unit.binary
- source: '1'
  scopesBegin:
    - constant.numeric.binary
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '01'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '010'
  scopesEnd:
    - constant.numeric.binary
- source: 0b
  scopes:
    - keyword.other.unit.binary
- source: '1'
  scopesBegin:
    - constant.numeric.binary
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '00'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '001'
  scopesEnd:
    - constant.numeric.binary
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' hex'
  scopesEnd:
    - comment.line.double-slash
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '01'
  scopes:
    - constant.numeric.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: abcdef
  scopes:
    - constant.numeric.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: aBCDEf
  scopes:
    - constant.numeric.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: ABCDEF
  scopes:
    - constant.numeric.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: AB
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
- source: cd
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: '5'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: f
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: AB
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
- source: cd
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: '5'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: l
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 20394af
  scopes:
    - constant.numeric.hexadecimal
- source: LL
  scopes:
    - keyword.other.unit.suffix.integer
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '01'
  scopes:
    - constant.numeric.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: abc
  scopesBegin:
    - constant.numeric.hexadecimal
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: def
  scopesEnd:
    - constant.numeric.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: a
  scopesBegin:
    - constant.numeric.hexadecimal
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: BC
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: DEf
  scopesEnd:
    - constant.numeric.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: ABC
  scopesBegin:
    - constant.numeric.hexadecimal
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: DEF
  scopesEnd:
    - constant.numeric.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '20'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '394'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: a
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: f
  scopesEnd:
    - constant.numeric.hexadecimal
- source: LL
  scopes:
    - keyword.other.unit.suffix.integer
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' hex floating point literal'
  scopesEnd:
    - comment.line.double-slash
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '0'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
- source: '5'
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: F
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '0'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
- source: '5'
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: f
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 1ff
  scopes:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '0'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
- source: '23'
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '0'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
- source: '234985'
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: L
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '139804'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
- source: '234985'
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: L
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '0'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
- source: '53'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '84'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '92'
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '5'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '0'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
- source: '23'
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: +
  scopes:
    - keyword.operator.plus.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '0'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
- source: '234985'
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: +
  scopes:
    - keyword.operator.plus.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: L
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '139804'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
- source: '234985'
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: '-'
  scopes:
    - keyword.operator.minus.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: L
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '0'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
- source: '53'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '84'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '92'
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: '-'
  scopes:
    - keyword.operator.minus.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '5'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: .
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: +
  scopes:
    - keyword.operator.plus.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '13'
  scopesBegin:
    - constant.numeric.hexadecimal
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '98'
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: '04'
- source: .
- source: '234985'
  scopesEnd:
    - constant.numeric.hexadecimal
- source: p
  scopes:
    - keyword.other.unit.exponent.hexadecimal
- source: '10'
  scopes:
    - constant.numeric.exponent.hexadecimal
- source: L
  scopes:
    - keyword.other.unit.suffix.floating-point
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' custom literals'
  scopesEnd:
    - comment.line.double-slash
- source: '29042'
  scopes:
    - constant.numeric.decimal
- source: ms
  scopes:
    - keyword.other.unit.user-defined
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: abcdef
  scopes:
    - constant.numeric.hexadecimal
- source: mm
  scopes:
    - keyword.other.unit.user-defined
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: abc
  scopesBegin:
    - constant.numeric.hexadecimal
- source: ''''
  scopes:
    - punctuation.separator.constant.numeric
- source: def
  scopesEnd:
    - constant.numeric.hexadecimal
- source: mm
  scopes:
    - keyword.other.unit.user-defined
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: abcdef
  scopes:
    - constant.numeric.hexadecimal
- source: yards
  scopes:
    - keyword.other.unit.user-defined
- source: '20'
  scopes:
    - constant.numeric.decimal
- source: ounces
  scopes:
    - keyword.other.unit.user-defined
- source: '2000'
  scopes:
    - constant.numeric.decimal
- source: miles
  scopes:
    - keyword.other.unit.user-defined
- source: L
  scopesBegin:
    - string.quoted.double
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"'
  scopesEnd:
    - punctuation.definition.string.begin
- source: akdjfhald
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' invalid literals'
  scopesEnd:
    - comment.line.double-slash
- source: 1Ex
  scopesBegin:
    - invalid.illegal.constant.numeric
- source: 0xe+foo
- source: 0x1Px
- source: 0xAB.cdpfl
- source: 0x12345'luyards
- source: 0.'123
- source: 0'.123
- source: 1E'1
- source: 1'E1
  scopesEnd:
    - invalid.illegal.constant.numeric
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' odd valid literals'
  scopesEnd:
    - comment.line.double-slash
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '12345'
  scopes:
    - constant.numeric.hexadecimal
- source: luyards
  scopes:
    - keyword.other.unit.user-defined
- source: '0'
  scopes:
    - keyword.other.unit.octal
- source: ''''
  scopesBegin:
    - constant.numeric.octal
  scopes:
    - punctuation.separator.constant.numeric
- source: '12345'
  scopesEnd:
    - constant.numeric.octal
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 1E
  scopes:
    - constant.numeric.hexadecimal
- source: x
  scopes:
    - keyword.other.unit.user-defined
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: Px
  scopes:
    - keyword.other.unit.user-defined
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' chars'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '1'
- source: ''''
  scopes:
    - punctuation.definition.string.end
- source: ''''
  scopes:
    - punctuation.definition.string.begin
- source: a
- source: ''''
  scopes:
    - punctuation.definition.string.end
- source: ''''
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
- source: ''''
  scopes:
    - punctuation.definition.string.begin
- source: \0
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Strings'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' a '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: things
- source: \n
  scopesBegin:
    - constant.character.escape
- source: \b
- source: \v
- source: \t
  scopesEnd:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' operator words'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' a '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: and
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.and
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' a '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: or
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.or
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' a '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: xor
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.xor
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' type castings'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: dynamic_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.dynamic_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'expression '
- source: +
  scopes:
    - keyword.operator
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: +
  scopes:
    - keyword.operator
- source: ' thing'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: reinterpret_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.reinterpret_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: expression
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: Custom
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: expression
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.const_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: expression
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: dynamic_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.dynamic_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'expression '
- source: +
  scopes:
    - keyword.operator
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: +
  scopes:
    - keyword.operator
- source: ' thing'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: reinterpret_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.reinterpret_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: expression
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: Custom
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: expression
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.const_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: expression
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Storage types'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: pthread_rwlockattr_t
  scopes:
    - support.type.posix-reserved.pthread
    - support.type.built-in.posix-reserved.pthread
- source: ' thing'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: pthread_rwlockattr_t
  scopes:
    - support.type.posix-reserved.pthread
    - support.type.built-in.posix-reserved.pthread
- source: ' thing'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: decltype
  scopes:
    - keyword.operator.functionlike
    - keyword.other.decltype
    - storage.type.decltype
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.decltype
- source: int
  scopes:
    - meta.arguments.decltype
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.decltype
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' operators '
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: typeid
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.typeid
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.typeid
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.typeid
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: alignas
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.alignas
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.alignas
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.alignas
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Memory'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' a '
- source: =
  scopes:
    - keyword.operator.assignment
- source: new
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.new
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.initializer
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.initializer
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: delete
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.delete
- source: ' a'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: new
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.new
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '&'
  scopes:
    - keyword.operator
- source: a_storage_of_callable
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callable
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: type
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: forward
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Callable
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: a_callable
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator
- source: 'array '
- source: =
  scopes:
    - keyword.operator.assignment
- source: new
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.new
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '100'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: delete
  scopesBegin:
    - keyword.operator.wordlike
  scopes:
    - keyword.operator.delete.array
- source: '[]'
  scopes:
    - keyword.operator.delete.array.bracket
  scopesEnd:
    - keyword.operator.wordlike
- source: ' array'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' should_always_be_a_newline'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' deleter'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' namespaces'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: using
  scopesBegin:
    - meta.using-namespace
  scopes:
    - keyword.other.using.directive
- source: namespace
  scopes:
    - keyword.other.namespace.directive
    - storage.type.namespace.directive
- source: std
  scopes:
    - entity.name.namespace
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: namespace
  scopes:
    - keyword.other.namespace.directive
    - storage.type.namespace.directive
- source: std
  scopes:
    - entity.name.namespace
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: namespace
  scopes:
    - keyword.other.namespace.directive
    - storage.type.namespace.directive
- source: std
  scopes:
    - entity.name.namespace
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: namespace
  scopes:
    - keyword.other.namespace.directive
    - storage.type.namespace.directive
- source: parent_namespace
  scopes:
    - entity.name.scope-resolution.namespace.using
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.namespace.using
- source: std
  scopes:
    - entity.name.namespace
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.using-namespace
- source: inline
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.inline
- source: namespace
  scopesBegin:
    - meta.block.namespace
    - meta.head.namespace
  scopes:
    - keyword.other.namespace.definition
    - storage.type.namespace.definition
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.namespace
  scopesEnd:
    - meta.head.namespace
- source: '}'
  scopes:
    - meta.body.namespace
    - punctuation.section.block.end.bracket.curly.namespace
  scopesEnd:
    - meta.block.namespace
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: namespace
  scopesBegin:
    - meta.block.namespace
    - meta.head.namespace
  scopes:
    - keyword.other.namespace.definition
    - storage.type.namespace.definition
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.namespace
  scopesEnd:
    - meta.head.namespace
- source: '}'
  scopes:
    - meta.body.namespace
    - punctuation.section.block.end.bracket.curly.namespace
  scopesEnd:
    - meta.block.namespace
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: namespace
  scopesBegin:
    - meta.block.namespace
    - meta.head.namespace
  scopes:
    - keyword.other.namespace.definition
    - storage.type.namespace.definition
- source: scoped
  scopes:
    - entity.name.scope-resolution.namespace.block
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.namespace.block
- source: console
  scopes:
    - entity.name.namespace
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.namespace
  scopesEnd:
    - meta.head.namespace
- source: '}'
  scopes:
    - meta.body.namespace
    - punctuation.section.block.end.bracket.curly.namespace
  scopesEnd:
    - meta.block.namespace
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: namespace
  scopesBegin:
    - meta.block.namespace
    - meta.head.namespace
  scopes:
    - keyword.other.namespace.definition
    - storage.type.namespace.definition
- source: console
  scopes:
    - entity.name.namespace
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.namespace
  scopesEnd:
    - meta.head.namespace
- source: template
  scopesBegin:
    - meta.body.namespace
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: typename
  scopes:
    - storage.type.template.argument.typename
- source: ANYTYPE
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: __MAGIC__show
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' by default use the stream operator with cout'
  scopesEnd:
    - comment.line.double-slash
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: 'cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.namespace
  scopesEnd:
    - meta.block.namespace
    - meta.body.namespace
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Scope resolution'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: 'cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' input'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: numeric_limits
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: long
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: double
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: infinity
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: char_traits
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: ANYTYPE
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: eof
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: numeric_limits
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: streamsize
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: max
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Task
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: ANY_OUTPUT_TYPE
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: ANY_INPUT_TYPE
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: links_to
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '&'
  scopes:
    - keyword.operator
- source: TEST_CLASS
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: name
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Event
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: ANYTYPE
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: ListenersFor
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: input_event
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: allocator_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: decltype
  scopes:
    - keyword.operator.functionlike
    - keyword.other.decltype
    - storage.type.decltype
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.decltype
- source: acopy
  scopes:
    - meta.arguments.decltype
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.decltype
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: destroy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: acopy
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: allocator_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: decltype
  scopes:
    - keyword.operator.functionlike
    - keyword.other.decltype
    - storage.type.decltype
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.decltype
- source: acopy
  scopes:
    - meta.arguments.decltype
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.decltype
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: deallocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: acopy
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' member access'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: window
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: as
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: translate
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: window
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: MV
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: translate
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.object.property
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.object.property
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.object.property
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.object.property
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ptr_to_original
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: Start
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ptr_to_original
  scopes:
    - variable.other.object.access
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: Start
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ptr_to_original
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: Start
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ptr_to_original
  scopes:
    - variable.other.object.access
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: Start
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thing
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: thread
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: a_pointer
  scopes:
    - variable.other.object.access
- source: .*
  scopes:
    - punctuation.separator.dot-access
- source: thread
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ptr_to_original
  scopes:
    - variable.other.object.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: Start
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ptr_to_original
  scopes:
    - variable.other.object.access
- source: '->*'
  scopes:
    - punctuation.separator.pointer-access
- source: Start
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Operator keyword'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: ostream
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '<<'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: ostream
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: out
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: input_
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '}'
  scopes:
    - meta.body.function.definition.special.operator-overload
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Item
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: +
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: string
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: base
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: repetitions
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '}'
  scopes:
    - meta.body.function.definition.special.operator-overload
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Item
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '-'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: the_input
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: input_item
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '}'
  scopes:
    - meta.body.function.definition.special.operator-overload
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Item
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: /
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: input_item
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: the_input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '}'
  scopes:
    - meta.body.function.definition.special.operator-overload
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Item
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ^
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Item
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: input_item
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: the_input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '}'
  scopes:
    - meta.body.function.definition.special.operator-overload
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' implicit conversions'
  scopesEnd:
    - comment.line.double-slash
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.head.function.definition.special.operator-overload
    - keyword.other.operator.overload
- source: std
  scopes:
    - entity.name.scope-resolution.operator-overload
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.operator-overload
- source: string
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - entity.name.operator.type
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '}'
  scopes:
    - meta.body.function.definition.special.operator-overload
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: double
  scopes:
    - entity.name.operator.type
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '}'
  scopes:
    - meta.body.function.definition.special.operator-overload
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' custom literal'
  scopesEnd:
    - comment.line.double-slash
- source: void
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '""'
  scopesBegin:
    - entity.name.operator.custom-literal
- source: _km
  scopesEnd:
    - entity.name.operator.custom-literal
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: long
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: double
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' preprocessor'
- source: //
  scopesBegin:
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: Infinite
  scopes:
    - entity.name.function.preprocessor
- source: numeric_limits
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: long
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: double
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: infinity
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '#'
  scopesBegin:
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: DoubleMax
  scopes:
    - entity.name.function.preprocessor
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '79769'
  scopes:
    - constant.numeric.decimal
- source: e
  scopes:
    - keyword.other.unit.exponent.decimal
- source: +
  scopes:
    - keyword.operator.plus.exponent.decimal
- source: '308'
  scopes:
    - constant.numeric.exponent.decimal
- source: '#'
  scopesBegin:
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: Pi
  scopes:
    - entity.name.function.preprocessor
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: .
  scopes:
    - constant.numeric.decimal.point
- source: '1415926535897932384626'
  scopes:
    - constant.numeric.decimal
- source: '#'
  scopesBegin:
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: show
  scopes:
    - entity.name.function.preprocessor
- source: (
  scopes:
    - punctuation.definition.parameters.begin.preprocessor
- source: argument
  scopes:
    - variable.parameter.preprocessor
- source: )
  scopes:
    - punctuation.definition.parameters.end.preprocessor
- source: ' cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '#argument'
  scopes:
    - variable.other.macro.argument
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.preprocessor.macro
- source: '#'
  scopesBegin:
    - keyword.control.directive.conditional.ifndef
  scopes:
    - punctuation.definition.directive
- source: ifndef
  scopesEnd:
    - keyword.control.directive.conditional.ifndef
- source: CEKO_LIBRARY
  scopes:
    - meta.preprocessor.conditional
    - entity.name.function.preprocessor
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: CEKO_LIBRARY
  scopes:
    - entity.name.function.preprocessor
  scopesEnd:
    - meta.preprocessor.macro
- source: '#'
  scopesBegin:
    - keyword.control.directive.endif
  scopes:
    - punctuation.definition.directive
- source: endif
  scopesEnd:
    - keyword.control.directive.endif
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' templates'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: func
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: std
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: 'cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: max
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: a
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' b'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: endl
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: 'cout '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: max
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: a
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' b'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: endl
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: namespace
  scopesBegin:
    - meta.block.namespace
    - meta.head.namespace
  scopes:
    - keyword.other.namespace.definition
    - storage.type.namespace.definition
- source: test
  scopes:
    - entity.name.namespace
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.namespace
  scopesEnd:
    - meta.head.namespace
- source: template
  scopesBegin:
    - meta.body.namespace
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: class
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template.argument.class
- source: T
  scopes:
    - entity.name.type.template
  scopesEnd:
    - meta.template.definition
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: '#'
  scopesBegin:
    - keyword.control.directive.conditional.ifdef
  scopes:
    - punctuation.definition.directive
- source: ifdef
  scopesEnd:
    - keyword.control.directive.conditional.ifdef
- source: blah
  scopes:
    - meta.preprocessor.conditional
    - entity.name.function.preprocessor
- source: struct
  scopesBegin:
    - meta.block.struct
    - meta.head.struct
  scopes:
    - storage.type.struct
- source: test
  scopes:
    - entity.name.type.struct
  scopesEnd:
    - meta.block.struct
    - meta.head.struct
- source: '#'
  scopesBegin:
    - keyword.control.directive.endif
  scopes:
    - punctuation.definition.directive
- source: endif
  scopesEnd:
    - keyword.control.directive.endif
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' seperate line template'
  scopesEnd:
    - comment.line.double-slash
- source: '            template '
- source: <
  scopes:
    - keyword.operator.comparison
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: U
  scopes:
    - entity.name.type.class
- source: '= std::'
- source: vector
  scopesBegin:
    - meta.qualified_type
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified_type
    - meta.template.call
- source: '>'
- source: '            template'
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: typename
  scopes:
    - storage.modifier
- source: RETURN_TYPE
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'N'
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: =
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: ' 1'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: ' typename Callable> '
- source: '            bool operator()(U k) '
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: '        }'
  scopes:
    - meta.tail.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: struct
  scopesBegin:
    - meta.block.struct
    - meta.head.struct
  scopes:
    - storage.type.struct
- source: test2
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.struct
  scopesEnd:
    - meta.head.struct
- source: //
  scopesBegin:
    - meta.body.struct
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' same-line template'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: 'class '
  scopes:
    - storage.type.template
- source: U
  scopes:
    - entity.name.type.template
- source: =
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: vector
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ()
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: U
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: k
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '}'
  scopes:
    - meta.body.function.definition.special.operator-overload
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: struct
  scopesBegin:
    - meta.head.struct
  scopes:
    - storage.type.struct
- source: test3
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.struct
  scopesEnd:
    - meta.head.struct
- source: //
  scopesBegin:
    - meta.body.struct
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' same-line template'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: 'class '
  scopes:
    - storage.type.template
- source: U
  scopes:
    - entity.name.type.template
- source: =
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: vector
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ()
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: U
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: k
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: '}'
  scopes:
    - meta.body.function.definition.special.operator-overload
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: struct
  scopesBegin:
    - meta.head.struct
  scopes:
    - storage.type.struct
- source: test2
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.struct
  scopesEnd:
    - meta.head.struct
- source: bool
  scopesBegin:
    - meta.body.struct
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ()
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: =
  scopes:
    - keyword.operator.assignment
- source: delete
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.delete
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' namespace test'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' no syntax highlighting'
  scopesEnd:
    - comment.line.double-slash
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: test2
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: int
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template.argument.int
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: typename
  scopes:
    - storage.type.template.argument.typename
- source: Callable
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: typename
  scopes:
    - storage.type.template.argument.typename
- source: Ret
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: typename
  scopes:
    - storage.type.template
- source: ...
  scopes:
    - punctuation.vararg-ellipses.template.definition
- source: Args
  scopes:
    - entity.name.type.template
  scopesEnd:
    - meta.template.definition
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: auto
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: internalConversionToFuncPtr
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: Callable
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopesBegin:
    - storage.modifier.reference
- source: '&'
  scopesEnd:
    - storage.modifier.reference
- source: a_callable
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Ret
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round.function.pointer
- source: '*'
  scopes:
    - punctuation.definition.function.pointer.dereference
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.function.pointer
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.function.pointer
- source: Args
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: ...
  scopes:
    - punctuation.vararg-ellipses
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.function.pointer
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: static
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.modifier.specifier.static
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' used '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: ' storage'
- source: <
  scopes:
    - keyword.operator.comparison
- source: Callable
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ' a_storage_of_callable'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopesBegin:
    - meta.declaration.type.alias
  scopes:
    - keyword.other.using.directive
- source: type
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: =
  scopes:
    - keyword.operator.assignment
- source: decltype
  scopesBegin:
    - meta.declaration.type.alias.value.unknown
  scopes:
    - keyword.operator.functionlike
    - keyword.other.decltype
    - storage.type.decltype
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.decltype
- source: a_storage_of_callable
  scopesBegin:
    - meta.arguments.decltype
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callable
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.arguments.decltype
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.decltype
  scopesEnd:
    - meta.declaration.type.alias.value.unknown
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.declaration.type.alias
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: used
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: a_storage_of_callable
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callable
  scopes:
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: ~type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: new
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.new
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '&'
  scopes:
    - keyword.operator
- source: a_storage_of_callable
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callable
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: type
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: forward
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Callable
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: a_callable
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '            used '
- source: =
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' lambda '
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: Args
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: args
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '->'
  scopes:
    - punctuation.definition.lambda.return-type
- source: ' Ret '
  scopes:
    - storage.type.return-type.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: return
  scopes:
    - keyword.control.return
- source: Ret
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: a_storage_of_callable
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callable
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: forward
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Args
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: args
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ...
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: typename
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template.argument.typename
- source: RETURN_TYPE
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: 'int '
  scopes:
    - storage.type.template
- source: 'N'
  scopes:
    - entity.name.type.template
- source: =
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: typename
  scopes:
    - storage.type.template.argument.typename
- source: Callable
  scopes:
    - entity.name.type.template
  scopesEnd:
    - meta.template.definition
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: RETURN_TYPE
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: convertToFunctionPointer
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: Callable
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopesBegin:
    - storage.modifier.reference
- source: '&'
  scopesEnd:
    - storage.modifier.reference
- source: c
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: internalConversionToFuncPtr
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: 'N'
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: forward
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Callable
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: c
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: RETURN_TYPE
- source: '*'
  scopes:
    - keyword.operator
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Classes'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: Thing
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: public
  scopesBegin:
    - meta.body.class
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
- source: 'public '
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: 'private '
  scopesBegin:
    - storage.type.modifier.access.control.private
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
- source: private
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.private
- source: protected
  scopesBegin:
    - storage.type.modifier.access.control.protected
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.protected
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' a '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Thing
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: struct
  scopesBegin:
    - meta.block.struct
    - meta.head.struct
  scopes:
    - storage.type.struct
- source: Thing2
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.struct
  scopesEnd:
    - meta.head.struct
- source: public
  scopesBegin:
    - meta.body.struct
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
- source: 'public '
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: 'private '
  scopesBegin:
    - storage.type.modifier.access.control.private
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
- source: private
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.private
- source: protected
  scopesBegin:
    - storage.type.modifier.access.control.protected
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.protected
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' a '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Thing
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: A
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: void
  scopesBegin:
    - meta.body.class
    - meta.function.definition
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: A
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: class
  scopesBegin:
    - meta.head.class
  scopes:
    - storage.type.class
- source: A
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: void
  scopesBegin:
    - meta.body.class
    - meta.function.definition
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: A
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: class
  scopesBegin:
    - meta.head.class
  scopes:
    - storage.type.class
- source: A
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: void
  scopesBegin:
    - meta.body.class
    - meta.function.definition
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: A
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: class
  scopesBegin:
    - meta.head.class
  scopes:
    - storage.type.class
- source: A
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: void
  scopesBegin:
    - meta.body.class
    - meta.function.definition
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: A
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: class
  scopesBegin:
    - meta.head.class
  scopes:
    - storage.type.class
- source: ClassA
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: class
  scopesBegin:
    - meta.head.class
  scopes:
    - storage.type.class
- source: ClassE
  scopes:
    - entity.name.type.class
- source: final
  scopes:
    - storage.type.modifier.final
- source: ':'
  scopes:
    - punctuation.separator.colon.inheritance
  scopesEnd:
    - meta.head.class
- source: public
  scopes:
    - storage.type.modifier.access.public
- source: ClassA
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '{'
  scopes:
    - meta.head.class
    - punctuation.section.block.begin.bracket.curly.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: namespace
  scopesBegin:
    - meta.block.namespace
    - meta.head.namespace
  scopes:
    - keyword.other.namespace.definition
    - storage.type.namespace.definition
- source: foo
  scopes:
    - entity.name.namespace
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.namespace
  scopesEnd:
    - meta.head.namespace
- source: class
  scopesBegin:
    - meta.body.namespace
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: ClassF
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: class
  scopesBegin:
    - meta.head.class
  scopes:
    - storage.type.class
- source: ClassG
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.namespace
  scopesEnd:
    - meta.block.namespace
    - meta.body.namespace
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: ClassH
  scopes:
    - entity.name.type.class
- source: ':'
  scopes:
    - punctuation.separator.colon.inheritance
  scopesEnd:
    - meta.head.class
- source: public
  scopes:
    - storage.type.modifier.access.public
- source: foo
  scopesBegin:
    - meta.qualified_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: ClassF
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified_type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: public
  scopes:
    - storage.type.modifier.access.public
- source: foo
  scopesBegin:
    - meta.qualified_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: ClassG
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified_type
- source: '{'
  scopes:
    - meta.head.class
    - punctuation.section.block.begin.bracket.curly.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: class
  scopesBegin:
    - meta.head.class
  scopes:
    - storage.type.class
- source: foo
  scopes:
    - entity.name.type.class
- source: ':'
  scopes:
    - punctuation.separator.colon.inheritance
  scopesEnd:
    - meta.head.class
- source: bar
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '{'
  scopes:
    - meta.head.class
    - punctuation.section.block.begin.bracket.curly.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: class
  scopesBegin:
    - meta.head.class
  scopes:
    - storage.type.class
- source: foo
  scopes:
    - entity.name.type.class
- source: ':'
  scopes:
    - punctuation.separator.colon.inheritance
  scopesEnd:
    - meta.head.class
- source: public
  scopes:
    - storage.type.modifier.access.public
- source: bar
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '{'
  scopes:
    - meta.head.class
    - punctuation.section.block.begin.bracket.curly.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: struct
  scopesBegin:
    - meta.block.struct
    - meta.head.struct
  scopes:
    - storage.type.struct
- source: copy_storage_helper
  scopes:
    - entity.name.type.struct
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: pointerT
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: hashT
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: allocatorT
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: 'false'
  scopes:
    - constant.language.false
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' copyableT'
  scopesEnd:
    - comment.line.double-slash
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.struct
  scopesEnd:
    - meta.head.struct
- source: '[['
  scopesBegin:
    - meta.body.struct
    - meta.function.definition.special.operator-overload
    - meta.qualified_type
    - support.other.attribute
  scopes:
    - punctuation.section.attribute.begin
- source: noreturn
  scopes:
    - entity.other.attribute.noreturn
- source: ']]'
  scopes:
    - punctuation.section.attribute.end
  scopesEnd:
    - support.other.attribute
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.qualified_type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ()
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: pointerT
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ptr
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: hashT
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: hf
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pointerT
  scopes:
    - entity.name.type.parameter
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ptr_old
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: 'off'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: cnt
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
    - comment.block
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: //
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' `allocatorT::value_type` is not copy-constructible.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Throw an exception unconditionally, even when there is nothing to copy.'
  scopesEnd:
    - comment.line.double-slash
- source: noadl
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: sprintf_and_throw
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: domain_error
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'cow_hashmap: `'
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: '` is not copy-constructible.'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: typeid
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.typeid
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.typeid
- source: typename
  scopesBegin:
    - meta.arguments.operator.typeid
  scopes:
    - storage.modifier
- source: allocatorT
  scopesBegin:
    - meta.qualified_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: value_type
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.arguments.operator.typeid
    - meta.qualified_type
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.typeid
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' enums'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: enum
  scopesBegin:
    - meta.block.enum
    - meta.head.enum
  scopes:
    - storage.type.enum
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.enum
  scopesEnd:
    - meta.head.enum
- source: thing
  scopesBegin:
    - meta.body.enum
  scopes:
    - meta.enum.definition
    - variable.other.enummember
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.enum
  scopesEnd:
    - meta.body.enum
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: enum
  scopesBegin:
    - meta.head.enum
  scopes:
    - storage.type.enum
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.enum
  scopesEnd:
    - meta.head.enum
- source: '}'
  scopes:
    - meta.body.enum
    - punctuation.section.block.end.bracket.curly.enum
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: enum
  scopesBegin:
    - meta.head.enum
  scopes:
    - storage.type.enum
- source: A
  scopes:
    - entity.name.type.enum
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.enum
  scopesEnd:
    - meta.head.enum
- source: a
  scopesBegin:
    - meta.body.enum
    - meta.enum.definition
  scopes:
    - variable.other.enummember
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: b
  scopes:
    - variable.other.enummember
  scopesEnd:
    - meta.enum.definition
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.enum
  scopesEnd:
    - meta.body.enum
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: enum
  scopesBegin:
    - meta.head.enum
  scopes:
    - storage.type.enum
- source: enum1
  scopes:
    - entity.name.type.enum
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.enum
  scopesEnd:
    - meta.head.enum
- source: //
  scopesBegin:
    - meta.body.enum
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' comment'
  scopesEnd:
    - comment.line.double-slash
- source: definition
  scopes:
    - meta.enum.definition
    - variable.other.enummember
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' block comment '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: definition3
  scopesBegin:
    - meta.enum.definition
    - variable.other.enummember
- source: definition
  scopesEnd:
    - variable.other.enummember
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: definition2
  scopes:
    - variable.other.enummember
  scopesEnd:
    - meta.enum.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' comment'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.enum
  scopesEnd:
    - meta.body.enum
- source: //
  scopesBegin:
    - meta.tail.enum
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' inheritance'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: foo
  scopes:
    - entity.name.type.class
- source: ':'
  scopes:
    - punctuation.separator.colon.inheritance
  scopesEnd:
    - meta.head.class
- source: private
  scopes:
    - storage.type.modifier.access.private
- source: bar
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: quix
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: foo
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: public
  scopes:
    - storage.type.modifier.access.public
- source: bar
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: quix
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: foo
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: protected
  scopes:
    - storage.type.modifier.access.protected
- source: bar
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: quix
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '{'
  scopes:
    - meta.head.class
    - punctuation.section.block.begin.bracket.curly.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: struct
  scopes:
    - storage.type.struct.declare
- source: foo
  scopes:
    - entity.name.type.struct
- source: f
  scopes:
    - variable.other.object.declare
  scopesEnd:
    - meta.tail.enum
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.enum
- source: class
  scopes:
    - storage.type.class.declare
- source: foo
  scopes:
    - entity.name.type.class
- source: f
  scopes:
    - variable.other.object.declare
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: struct
  scopesBegin:
    - meta.block.struct
    - meta.head.struct
  scopes:
    - storage.type.struct
- source: thing
  scopes:
    - entity.name.type.struct
- source: ':'
  scopes:
    - punctuation.separator.colon.inheritance
- source: public
  scopes:
    - storage.type.modifier.access.public
- source: A
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: public
  scopes:
    - storage.type.modifier.access.public
- source: B
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.struct
  scopesEnd:
    - meta.head.struct
- source: '}'
  scopes:
    - meta.body.struct
    - punctuation.section.block.end.bracket.curly.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: thing
  scopes:
    - entity.name.type.class
- source: ':'
  scopes:
    - punctuation.separator.colon.inheritance
- source: public
  scopes:
    - storage.type.modifier.access.public
- source: A
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: public
  scopes:
    - storage.type.modifier.access.public
- source: B
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.inheritance
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Functions'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.start.template.definition
- source: class
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template.argument.class
- source: ANYTYPE
  scopes:
    - entity.name.type.template
  scopesEnd:
    - meta.template.definition
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: string
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: ToBinary
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: ANYTYPE
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: input
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' depends on #include <bitset>'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: bitset
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '8'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: input
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: to_string
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' lambdas'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' a '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: a
  scopesBegin:
    - meta.lambda.capture
  scopes:
    - variable.parameter.capture
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: b
  scopes:
    - variable.parameter.capture
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: c
  scopes:
    - variable.parameter.capture
  scopesEnd:
    - meta.lambda.capture
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: Args
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: thing1
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '->'
  scopes:
    - punctuation.definition.lambda.return-type
- source: ' Ret '
  scopes:
    - storage.type.return-type.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: a
  scopesBegin:
    - meta.lambda.capture
  scopes:
    - variable.parameter.capture
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: b
  scopes:
    - variable.parameter.capture
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: c
  scopes:
    - variable.parameter.capture
  scopesEnd:
    - meta.lambda.capture
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: Args
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: thing1
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: mutable
  scopes:
    - storage.modifier.lambda.mutable
- source: '->'
  scopes:
    - punctuation.definition.lambda.return-type
- source: ' Ret '
  scopes:
    - storage.type.return-type.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: a
  scopesBegin:
    - meta.lambda.capture
  scopes:
    - variable.parameter.capture
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: b
  scopes:
    - variable.parameter.capture
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: c
  scopes:
    - variable.parameter.capture
  scopesEnd:
    - meta.lambda.capture
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: Args
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: thing1
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: a
  scopesBegin:
    - meta.lambda.capture
  scopes:
    - variable.parameter.capture
- source: =
  scopes:
    - keyword.operator.assignment
- source: stuff
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: blah
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1324'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: b
  scopes:
    - variable.parameter.capture
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: c
  scopes:
    - variable.parameter.capture
  scopesEnd:
    - meta.lambda.capture
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: Args
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: thing1
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: a
  scopesBegin:
    - meta.lambda.capture
  scopes:
    - variable.parameter.capture
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: b
  scopes:
    - variable.parameter.capture
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: c
  scopes:
    - variable.parameter.capture
  scopesEnd:
    - meta.lambda.capture
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: =
  scopes:
    - meta.lambda.capture
    - keyword.operator.assignment
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: '->'
  scopes:
    - punctuation.definition.lambda.return-type
- source: ' int '
  scopes:
    - storage.type.return-type.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: =
  scopes:
    - meta.lambda.capture
    - keyword.operator.assignment
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: mutable
  scopes:
    - storage.modifier.lambda.mutable
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: return
  scopes:
    - keyword.control.return
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' a '
- source: =
  scopes:
    - keyword.operator.assignment
- source: thing
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' a '
- source: =
  scopes:
    - keyword.operator.assignment
- source: thing
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: Args
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: args
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '->'
  scopes:
    - punctuation.definition.lambda.return-type
- source: ' Ret '
  scopes:
    - storage.type.return-type.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: return
  scopes:
    - keyword.control.return
- source: Ret
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: a_storage_of_callable
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callable
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: forward
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Args
  scopes:
    - meta.qualified_type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: args
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ...
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: a
  scopesBegin:
    - meta.lambda.capture
  scopes:
    - variable.parameter.capture
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: b
  scopes:
    - variable.parameter.capture
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: c
  scopes:
    - variable.parameter.capture
  scopesEnd:
    - meta.lambda.capture
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: Args
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: ...
  scopes:
    - punctuation.vararg-ellipses
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: thing1
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '->'
  scopes:
    - punctuation.definition.lambda.return-type
- source: ' Ret '
  scopes:
    - storage.type.return-type.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: return
  scopes:
    - keyword.control.return
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: a
  scopesBegin:
    - meta.lambda.capture
  scopes:
    - variable.parameter.capture
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: b
  scopes:
    - variable.parameter.capture
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: c
  scopes:
    - variable.parameter.capture
  scopesEnd:
    - meta.lambda.capture
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: '->'
  scopes:
    - punctuation.definition.lambda.return-type
- source: ' int '
  scopes:
    - storage.type.return-type.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' not lambdas'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: test
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: =
  scopes:
    - keyword.operator.assignment
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' no syntax highlighting;'
  scopesEnd:
    - comment.line.double-slash
- source: test
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: =
  scopes:
    - keyword.operator.assignment
- source: '5'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: main
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: int
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' a '
- source: =
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ' thing '
- source: +
  scopes:
    - keyword.operator
- source: '10'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
    - punctuation.definition.comment
- source: //
  scopesEnd:
    - punctuation.definition.comment
- source: ' Attributes'
- source: //
  scopes:
    - punctuation.definition.comment
  scopesEnd:
    - comment.line.double-slash
- source: switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: test
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: case
  scopes:
    - keyword.control.case
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ':'
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopes:
    - keyword.control.case
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ': '
- source: '[['
  scopesBegin:
    - support.other.attribute
  scopes:
    - punctuation.section.attribute.begin
- source: fallthrough
  scopes:
    - entity.other.attribute.fallthrough
- source: ']]'
  scopes:
    - punctuation.section.attribute.end
  scopesEnd:
    - support.other.attribute
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopes:
    - keyword.control.case
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: ':'
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' no syntax highlighting'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: next
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \'
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \"
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \\
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '?'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: next
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: a
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \a
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: b
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \b
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: f
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \f
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 'n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: r
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \r
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: t
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \t
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: v
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \v
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '0'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \0
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: Z
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \x1A
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \x1B
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: U
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '            xcnt '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' 6: "\U123456"'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Fallthrough.'
  scopesEnd:
    - comment.line.double-slash
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: u
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '            xcnt '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' 4: "\u1234"'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Fallthrough.'
  scopesEnd:
    - comment.line.double-slash
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: x
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '            xcnt '
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' 2: "\x12"'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Read hex digits.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'qavail '
- source: <
  scopes:
    - keyword.operator.comparison
- source: ' xcnt '
- source: +
  scopes:
    - keyword.operator
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_escape_sequence_incomplete
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: char32_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: ' cpnt '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' i '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' tlen'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ' i '
- source: <
  scopes:
    - keyword.operator.comparison
- source: ' tlen '
- source: +
  scopes:
    - keyword.operator
- source: ' xcnt'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' s_digits[] '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 00112233445566778899AaBbCcDdEeFf
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' dptr '
- source: =
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '32'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: dptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' i '
- source: +
  scopes:
    - keyword.operator
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_escape_sequence_invalid_hex
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' dvalue '
- source: =
  scopes:
    - keyword.operator.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: char32_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'dptr '
- source: '-'
  scopes:
    - keyword.operator
- source: ' s_digits'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: /
  scopes:
    - keyword.operator
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '                cpnt '
- source: =
  scopes:
    - keyword.operator.assignment
- source: ' cpnt '
- source: '*'
  scopes:
    - keyword.operator
- source: '16'
  scopes:
    - constant.numeric.decimal
- source: +
  scopes:
    - keyword.operator
- source: ' dvalue'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'next '
- source: ==
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: x
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Write the character verbatim.'
  scopesEnd:
    - comment.line.double-slash
- source: value
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Write a Unicode code point.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: D800
  scopes:
    - constant.numeric.hexadecimal
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' cpnt'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'cpnt '
- source: <
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: E000
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '110000'
  scopes:
    - constant.numeric.hexadecimal
- source: <=
  scopes:
    - keyword.operator.comparison
- source: ' cpnt'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Code point value is reserved or too large.'
  scopesEnd:
    - comment.line.double-slash
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' tlen '
- source: +
  scopes:
    - keyword.operator
- source: ' xcnt'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_escape_utf_code_point_invalid
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Encode it.'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ' encode_one '
- source: =
  scopes:
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: unsigned
  scopesBegin:
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: shift
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: unsigned
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: mask
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: value
  scopes:
    - variable.other.object.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '~'
  scopes:
    - keyword.operator
- source: 'mask '
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '|'
  scopes:
    - keyword.operator
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'cpnt '
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: ' shift'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&'
  scopes:
    - keyword.operator
- source: ' mask'
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'cpnt '
- source: <
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '80'
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: FF
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'cpnt '
- source: <
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '800'
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 1F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 3F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'cpnt '
- source: <
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '10000'
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '12'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 0F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 3F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 3F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '18'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '07'
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '12'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 3F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 3F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 3F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: default
  scopes:
    - keyword.control.default
- source: ':'
- source: '            thing'
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: func1
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '[['
  scopesBegin:
    - meta.function.definition
    - meta.qualified_type
    - support.other.attribute
  scopes:
    - punctuation.section.attribute.begin
- source: noreturn
  scopes:
    - entity.other.attribute.noreturn
- source: ']]'
  scopes:
    - punctuation.section.attribute.end
  scopesEnd:
    - support.other.attribute
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
  scopesEnd:
    - meta.qualified_type
- source: func2
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: /*
  scopesBegin:
    - meta.function.definition.parameters
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: syntax highlighting
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - meta.function.definition.parameters
    - comment.block
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' no syntax highlighting'
  scopesEnd:
    - comment.line.double-slash
- source: struct
  scopesBegin:
    - meta.block.struct
    - meta.head.struct
  scopes:
    - storage.type.struct
- source: st
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.struct
  scopesEnd:
    - meta.head.struct
- source: //
  scopesBegin:
    - meta.body.struct
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' syntax highlighting works now'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified_type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: func3
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Universal character name'
  scopesEnd:
    - comment.line.double-slash
- source: class
  scopesBegin:
    - meta.block.class
    - meta.head.class
  scopes:
    - storage.type.class
- source: LineReader
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: class
  scopesBegin:
    - meta.head.class
  scopes:
    - storage.type.class
- source: Line_Reader
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: class
  scopesBegin:
    - meta.head.class
  scopes:
    - storage.type.class
- source: Line\u00b7Reader
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: class
  scopesBegin:
    - meta.head.class
  scopes:
    - storage.type.class
- source: Line\U0002070EReader
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.class
  scopesEnd:
    - meta.head.class
- source: '}'
  scopes:
    - meta.body.class
    - punctuation.section.block.end.bracket.curly.class
- source: ;
  scopes:
    - punctuation.terminator.statement
