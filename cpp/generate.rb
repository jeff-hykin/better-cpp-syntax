require_relative '../textmate_tools.rb'
require_relative './tokens.rb'

# todo
    # fix initializer list "functions" e.g. `int a{5};`
    # fix the ... inside of macros
    # have all patterns with keywords be dynamically generated

cpp_grammar = Grammar.new(
    name:"C++",
    scope_name: "source.cpp",
    version: "https://github.com/jeff-hykin/cpp-textmate-grammar/blob/master/syntaxes/cpp.tmLanguage.json",
    information_for_contributors: [
        "This code was auto generated by a much-more-readble ruby file: https://github.com/jeff-hykin/cpp-textmate-grammar/blob/master/generate.rb",
        "This file essentially an updated/improved fork of the atom syntax https://github.com/atom/language-c/blob/master/grammars/c%2B%2B.cson",
    ],
)

#
# Utils
#
    @semicolon = newPattern(
            match: /;/,
            tag_as: "punctuation.terminator.statement",
        )
    def blockFinderFor( name:"", tag_as:"", start_pattern:nil, needs_semicolon: true, primary_includes: [], head_includes:[], body_includes: [ "$base" ], tail_includes: [ "$base" ], secondary_includes:[])
        lookahead_endings = /[;()>\[\]=]/
        if needs_semicolon
            end_pattern = newPattern(
                match: newPattern(
                        lookBehindFor(/}/).maybe(@spaces).then(@semicolon)
                    ).or(
                        @semicolon
                    ).or(
                        lookAheadFor(lookahead_endings)
                    )
                )
        else
            end_pattern = lookBehindFor(/\}/).or(lookAheadFor(lookahead_endings))
        end
        return Range.new(
            tag_as: tag_as,
            start_pattern: newPattern(
                    match: start_pattern,
                    tag_as: "meta.head."+name,
                ),
            end_pattern: end_pattern,
            includes: [
                *primary_includes,
                # Head
                Range.new(
                    tag_as: "meta.head."+name,
                    start_pattern: /\G/,
                    end_pattern: newPattern(
                        match: /\{/.or(lookAheadFor(/;/)),
                        tag_as: "punctuation.section.block.begin.bracket.curly."+name
                    ),
                    includes: head_includes
                ),
                # Body
                Range.new(
                    tag_as: "meta.body."+name, # body is everything in the {}'s
                    start_pattern: lookBehindFor(/\{/),
                    end_pattern: newPattern(
                            match: /\}/,
                            tag_as: "punctuation.section.block.end.bracket.curly."+name
                        ),
                    includes: body_includes
                ),
                # Tail
                Range.new(
                    tag_as: "meta.tail."+name,
                    start_pattern: lookBehindFor(/}/).then(/[\s\n]*/),
                    end_pattern: newPattern(/[\s\n]*/).lookAheadFor(/;/),
                    includes: tail_includes
                ),
                *secondary_includes
            ]
        )
    end
#
#
# Contexts
#
#
    preprocessor_context = [
        "#preprocessor-rule-enabled",
        "#preprocessor-rule-disabled",
        "#preprocessor-rule-conditional",
        "#hacky_fix_for_stray_directive",
    ]
    type_context = newPattern(
        repository_name: :storage_types,
        includes:  [
            :primitive_types,
            :non_primitive_types,
            :pthread_types,
            :posix_reserved_types,
        ]
        )
    # eventually this context will be more exclusive (can't have class definitons inside of an evaluation)
    # but for now it just includes everything
    evaluation_context = [
        '#cpp_base'
        # function call
        # number literal
        # lambdas
    ]

#
#
# Numbers
#
#
    #
    # misc
    #
        number_seperator_pattern = newPattern(
            should_fully_match: [ "'" ],
            should_partial_match: [ "1'1", "1'", "'1" ],
            should_not_partial_match: [ "1''1", "1''" ],
            repository_name: 'literal_numeric_seperator',
            match: lookBehindToAvoid(/'/).then(/'/).lookAheadToAvoid(/'/),
            tag_as:"punctuation.separator.constant.numeric",
            )
        hex_digits = newPattern(
            should_fully_match: [ "1", "123456", "DeAdBeeF", "49'30'94", "DeA'dBe'eF", "dea234f4930" ],
            should_not_fully_match: [ "'3902" , "de2300p1000", "0x000" ],
            should_not_partial_match: [ "p", "x", "." ],
            match: /[0-9a-fA-F]/.zeroOrMoreOf(/[0-9a-fA-F]/.or(number_seperator_pattern)),
            tag_as: "constant.numeric.hexadecimal",
            includes: [ number_seperator_pattern ],
            )
        decimal_digits = newPattern(
            should_fully_match: [ "1", "123456", "49'30'94" , "1'2" ],
            should_not_fully_match: [ "'3902" , "1.2", "0x000" ],
            match: /[0-9]/.zeroOrMoreOf(/[0-9]/.or(number_seperator_pattern)),
            tag_as: "constant.numeric.decimal",
            includes: [ number_seperator_pattern ],
            )
        # see https://en.cppreference.com/w/cpp/language/floating_literal
        hex_exponent = newPattern(
            should_fully_match: [ "p100", "p-100", "p+100", "P100" ],
            should_not_fully_match: [ "p0x0", "p-+100" ],
            match: newPattern(
                    match: /[pP]/,
                    tag_as: "keyword.other.unit.exponent.hexadecimal",
                ).maybe(
                    match: /\+/,
                    tag_as: "keyword.operator.plus.exponent.hexadecimal",
                ).maybe(
                    match: /\-/,
                    tag_as: "keyword.operator.minus.exponent.hexadecimal",
                ).then(
                    match: decimal_digits.without_numbered_capture_groups,
                    tag_as: "constant.numeric.exponent.hexadecimal",
                    includes: [ number_seperator_pattern ]
                ),
            )
        decimal_exponent = newPattern(
            should_fully_match: [ "e100", "e-100", "e+100", "E100", ],
            should_not_fully_match: [ "e0x0", "e-+100" ],
            match: newPattern(
                    match: /[eE]/,
                    tag_as: "keyword.other.unit.exponent.decimal",
                ).maybe(
                    match: /\+/,
                    tag_as: "keyword.operator.plus.exponent.decimal",
                ).maybe(
                    match: /\-/,
                    tag_as: "keyword.operator.minus.exponent.decimal",
                ).then(
                    match: decimal_digits.without_numbered_capture_groups,
                    tag_as: "constant.numeric.exponent.decimal",
                    includes: [ number_seperator_pattern ]
                ),
            )
    #
    # Number Literal
    #
    number_literal = newPattern(
        repository_name: 'number_literal',
        match: lookBehindToAvoid(/\w/).then(
                # Floating point
                # see https://en.cppreference.com/w/cpp/language/floating_literal
                newPattern(
                    floating_literal = newPattern(
                        # Hex
                        newPattern(
                            hex_literal_float = newPattern(
                                match: /0[xX]/,
                                tag_as: "keyword.other.unit.hexadecimal",
                            ).maybe(
                                hex_digits
                            ).then(
                                # lookBehind/Ahead because there needs to be a hex digit on at least one side
                                match: lookBehindFor(/[0-9a-fA-F]/).then(/\./).or(/\./.lookAheadFor(/[0-9a-fA-F]/)),
                                tag_as: "constant.numeric.hexadecimal",
                            ).maybe(
                                hex_digits
                            ).maybe(
                                hex_exponent
                            )
                        # Decimal
                        ).or(
                            decimal_literal_float = maybe(
                                decimal_digits
                            ).then(
                                # lookBehind/Ahead because there needs to be a decimal digit on at least one side
                                match: lookBehindFor(/[0-9]/).then(/\./).or(/\./.lookAheadFor(/[0-9]/)),
                                tag_as: "constant.numeric.decimal.point",
                            ).maybe(
                                decimal_digits
                            ).maybe(
                                decimal_exponent
                            )
                        )
                    # Floating point suffix
                    ).maybe(
                        literal_float_suffix = newPattern(
                            match: /[lLfF]/.lookAheadToAvoid(/\w/),
                            tag_as: "keyword.other.unit.suffix.floating-point"
                        )
                    )
                # Integer
                # see https://en.cppreference.com/w/cpp/language/integer_literal
                ).or(
                     integer_literal = newPattern(
                        # Binary
                        newPattern(
                            binary_literal_integer = newPattern(
                                match: /0[bB]/,
                                tag_as: "keyword.other.unit.binary"
                            ).then(
                                match: oneOrMoreOf(/[01]/.or(number_seperator_pattern)),
                                tag_as: "constant.numeric.binary",
                                includes: [ number_seperator_pattern ]
                            )
                        # Octal
                        ).or(
                            octal_literal_integer = newPattern(
                                match: /0/,
                                tag_as: "keyword.other.unit.octal"
                            ).then(
                                match: oneOrMoreOf(/[0-7]/.or(number_seperator_pattern)),
                                tag_as: "constant.numeric.octal",
                                includes: [ number_seperator_pattern ]
                            )
                        # Hex
                        ).or(
                            hex_literal_integer = newPattern(
                                match: /0[xX]/,
                                tag_as: "keyword.other.unit.hexadecimal",
                            ).then(
                                hex_digits
                            ).maybe(
                                hex_exponent
                            )
                        # Decimal
                        ).or(
                            decimal_literal_integer = newPattern(
                                decimal_digits
                            ).maybe(
                                decimal_exponent
                            )
                        )
                    # integer suffix
                    ).maybe(
                        literal_integer_suffix = newPattern(
                            match: /[uU]/.or(/[uU]ll?/).or(/[uU]LL?/).or(/ll?[uU]?/).or(/LL?[uU]?/).lookAheadToAvoid(/\w/),
                            tag_as: "keyword.other.unit.suffix.integer"
                        )
                    )
                )
            # user defined endings
            ).then(
                match: /\w*/,
                tag_as: "keyword.other.unit.user-defined"
            )
        )

#
# Variable
#
    universal_character = /\\u[0-9a-fA-F]{4}/.or(/\\U000[0-9a-fA-F]/)
    first_character = /[a-zA-Z_]/.or(universal_character)
    subsequent_character = /[a-zA-Z0-9_]/.or(universal_character)
    identifier = first_character.then(zeroOrMoreOf(subsequent_character))
    # todo: make a better name for this function
    variableBounds = ->(regex_pattern) do
        lookBehindToAvoid(@standard_character).then(regex_pattern).lookAheadToAvoid(@standard_character)
    end
    variable_name_without_bounds = identifier
    # word bounds are inefficient, but they are accurate
    variable_name = variableBounds[variable_name_without_bounds]

#
# Constants
#
    language_constants = newPattern(
        repository_name: 'constants',
        match: variableBounds[@cpp_tokens.that(:isLiteral)],
        tag_as: "constant.language"
        )

#
# Built-In Types
#
    look_behind_for_type = lookBehindFor(/\w |\*\/|[&*>\]\)]|\.\.\./).maybe(@spaces)
    primitive_types = newPattern(
        repository_name: :primitive_types,
        match: variableBounds[ @cpp_tokens.that(:isPrimitive) ],
        tag_as: "storage.type.primitive"
        )
    non_primitive_types = newPattern(
        repository_name: :non_primitive_types,
        match: variableBounds[@cpp_tokens.that(not(:isPrimitive), :isType)],
        tag_as: "storage.type"
        )

#
# Keywords and Keyword-ish things
#
    functional_specifiers_pre_parameters = newPattern(
        match: variableBounds[ @cpp_tokens.that(:isFunctionSpecifier) ],
        tag_as: "storage.modifier.specificer.functional.pre-parameters.$match"
        )
    qualifiers_and_specifiers_post_parameters = newPattern(
        match: variableBounds[ @cpp_tokens.that(:canAppearAfterParametersBeforeBody) ].lookAheadFor(/\s*/.then(/\{/.or(/;/).or(/[\n\r]/))),
        tag_as: "storage.modifier.specifier.functional.post-parameters.$match"
        )
    storage_specifiers = newPattern(
        match: variableBounds[ @cpp_tokens.that(:isStorageSpecifier) ],
        tag_as: "storage.modifier.specifier.$match"
        )
    access_control_keywords = newPattern(
        match: lookBehindToAvoid(@standard_character).then(@cpp_tokens.that(:isAccessSpecifier)).maybe(@spaces).then(/:/),
        tag_as: "storage.type.modifier.access.control.$match"
        )
    exception_keywords = newPattern(
        match: variableBounds[ @cpp_tokens.that(:isExceptionRelated) ],
        tag_as: "keyword.control.exception.$match"
        )
    other_keywords = newPattern(
        match: variableBounds[ /(using|typedef)/ ],
        tag_as: "keyword.other.$match"
        )
    the_this_keyword = newPattern(
        match: variableBounds[ /this/ ],
        tag_as: "variable.language.this"
        )
    # TODO: enhance casting operators to include <>'s
    type_casting_operators = newPattern(
        match: variableBounds[ @cpp_tokens.that(:isTypeCastingOperator) ],
        tag_as: "keyword.operator.wordlike keyword.operator.cast.$match"
        )
    memory_operators = newPattern(
        repository_name: 'memory_operators',
        tag_as: "keyword.operator.wordlike memory",
        match: lookBehindToAvoid(
                @standard_character
            ).then(
                newPattern(
                    newPattern(
                        match: /delete/,
                        tag_as: "keyword.operator.delete.array"
                    ).maybe(@spaces).then(
                        match: /\[\]/,
                        tag_as: "keyword.operator.delete.array.bracket"
                    )
                ).or(
                    match: /delete/,
                    tag_as: "keyword.operator.delete"
                ).or(
                    match: /new/,
                    tag_as: "keyword.operator.new"
                )
            ).lookAheadToAvoid(@standard_character)
        )
    control_flow_keywords = newPattern(
        match: variableBounds[ @cpp_tokens.that(:isControlFlow) ],
        tag_as: "keyword.control.$match"
        )
#
# Control flow
#
    # TODO: update this context in the future to be more restrictive
    conditional_context = [
        "$base"
    ]
    default_statement = Range.new(
            tag_as: "meta.conditional.case",
            start_pattern: newPattern(
                match: variableBounds[ /default/ ],
                tag_as: "keyword.control.default"
            ),
            end_pattern: newPattern(
                match: /:/,
                tag_as: "colon punctuation.separator.case.default"
            ),
            includes: conditional_context
        )
    case_statement = Range.new(
            tag_as: "meta.conditional.case",
            start_pattern: newPattern(
                match: variableBounds[ /case/ ],
                tag_as: "keyword.control.case"
            ),
            end_pattern: newPattern(
                match: /:/,
                tag_as: "colon punctuation.separator.case"
            ),
            includes: conditional_context
        )
    switch_statement = blockFinderFor(
            name: "switch",
            tag_as: "meta.block.switch",
            start_pattern: newPattern(
                match: newPattern(
                    match: /switch/,
                    tag_as: "keyword.control.switch"
                ).maybe(@spaces).then(/\(/).then(/.*/).then(/\)/),
                tag_as: "meta.conditional.switch"
            ),
            head_includes: ["$base"],
            body_includes: [
                default_statement,
                case_statement,
                "$base",
            ],
            needs_semicolon: false,
        )
#
# C++ Attributes
#
    attributes = Range.new(
        repository_name: "attribute_cpp",
        tag_as: "support.other.attribute",
        start_pattern: newPattern(
            match: @cpp_tokens.that(:isAttributeStart),
            tag_as: "punctuation.section.attribute.begin",
        ),
        end_pattern: newPattern(
            match:  @cpp_tokens.that(:isAttributeEnd),
            tag_as: "punctuation.section.attribute.end",
        ),
        includes: [
            # allow nested attributes
            "#attribute_cpp",
            Range.new(
                start_pattern: newPattern(/\(/),
                end_pattern: newPattern(/\)/),
                includes: [
                    "#attribute_cpp",
                    "#strings_c",
                ],
            ),
            newPattern(match: /using/, tag_as: "keyword.other.using.directive")
            .then(@spaces).then(
                match: variable_name,
                tag_as: "entity.name.type.namespace",
            ),
            newPattern(match: /,/, tag_as: "punctuation.separator.attribute"),
            newPattern(match: /:/, tag_as: "punctuation.accessor.attribute"),
            newPattern(
                match: variable_name.lookAheadFor(/::/),
                tag_as: "entity.name.type.namespace"
            ),
            newPattern(match: variable_name, tag_as: "entity.other.attribute.$match"),
        ],
    )
    inline_attribute = newPattern(
        should_fully_match:["[[nodiscard]]","__attribute((packed))","__declspec(fastcall)"],
        should_partial_match: ["struct [[deprecated]] st"],
        # match one of the three attribute styles
        match: newPattern(
            @cpp_tokens.that(:isAttributeStart, :isCppAttribute).then(/.*?/).then(@cpp_tokens.that(:isAttributeEnd, :isCppAttribute))
        ).or(
            @cpp_tokens.that(:isAttributeStart, :isGccAttribute).then(/.*?/).then(@cpp_tokens.that(:isAttributeEnd, :isGccAttribute))
        ).or(
            @cpp_tokens.that(:isAttributeStart, :isMsAttribute).then(/.*?/).then(@cpp_tokens.that(:isAttributeEnd, :isMsAttribute))
        ).lookAheadToAvoid(/\)/),
        includes: [
            "#attribute_cpp",
        ],
    )
#
# Templates
#
    characters_in_template_call = /[\s<>:,\w]/
    template_call_context = [
            :storage_types,
            :constants,
            :scope_resolution,
            newPattern(
                match: variable_name,
                tag_as: 'storage.type.user-defined'
            ),
            :operators,
            :number_literal,
            :strings,
            newPattern(
                match: /,/,
                tag_as: "comma punctuation.separator.template.argument"
            )
        ]
    # note: template_call should indeally be a Range(), the reason its not is
    # because it's embedded inside of other patterns
    template_call = newPattern(
        repository_name: 'template_call_innards',
        tag_as: 'meta.template.call',
        match: /</.zeroOrMoreOf(characters_in_template_call).then(/>/).maybe(@spaces),
        includes: template_call_context
        )
    template_call_range = Range.new(
            tag_as: 'meta.template.call',
            start_pattern: newPattern(
                match: /</,
                tag_as: "punctuation.section.angle-brackets.begin.template.call"
            ),
            end_pattern: newPattern(
                match: />/,
                tag_as: "punctuation.section.angle-brackets.end.template.call"
            ),
            includes: template_call_context
        )
    template_definition_context = [
            :scope_resolution,
            :template_definition_argument,
            :template_argument_defaulted,
            :template_call_innards,
            *evaluation_context
        ]
    template_start = lookBehindToAvoid(@standard_character).then(
            match: /template/,
            tag_as: "storage.type.template"
        ).maybe(@spaces).then(
            match: /</,
            tag_as: "punctuation.section.angle-brackets.start.template.definition"
        )
    # a template definition that is by itself on a line (this is ideal)
    template_isolated_definition = newPattern(
        repository_name: 'template_isolated_definition',
        match: template_start.then(
                match:  zeroOrMoreOf(/./),
                tag_as: "meta.template.definition",
                includes: template_definition_context,
            ).then(
                match: />/.maybe(@spaces).then(/$/),
                tag_as: "punctuation.section.angle-brackets.end.template.definition"
            ),
        )
    template_definition = Range.new(
        repository_name: 'template_definition',
        tag_as: 'meta.template.definition',
        start_pattern: template_start,
        end_pattern: newPattern(
                match: />/,
                tag_as: "punctuation.section.angle-brackets.end.template.definition"
            ),
        includes: [
            # a template call inside of a non-isolated template definition
            # however this is rolling the dice: because if there is a less-than operator in a defaulted argument, then this pattern will screw everything up
            # a better solution would be nice, but its going to be difficult/impossible
            Range.new(
                start_pattern: newPattern(
                        match: lookBehindFor(/\w/).maybe(@spaces).then(/</),
                        tag_as: "punctuation.section.angle-brackets.begin.template.call"
                    ),
                end_pattern: newPattern(
                        match: />/,
                        tag_as: "punctuation.section.angle-brackets.begin.template.call"
                    ),
                includes: template_call_context
            ),
            *template_definition_context,
        ]
        )
    template_argument_defaulted = newPattern(
        repository_name: 'template_argument_defaulted',
        match: lookBehindFor(/<|,/).maybe(@spaces).then(
                match: zeroOrMoreOf(variable_name_without_bounds.then(@spaces)),
                tag_as: "storage.type.template",
            ).then(
                match: variable_name_without_bounds,
                tag_as: "entity.name.type.template"
            ).maybe(@spaces).then(
                match: /[=]/,
                tag_as: "keyword.operator.assignment"
            )
        )
    template_definition_argument = newPattern(
        repository_name: 'template_definition_argument',
        match: maybe(
                @spaces
            # case 1: only one word
            ).then(
                match: variable_name_without_bounds,
                tag_as: "storage.type.template.argument.$match",
            # case 2: normal situation (ex: "typename T")
            ).or(
                newPattern(
                    match: oneOrMoreOf(variable_name_without_bounds.then(@spaces)),
                    tag_as: "storage.type.template.argument.$match",
                ).then(
                    match: variable_name_without_bounds,
                    tag_as: "entity.name.type.template",
                )
            # case 3: ellipses (ex: "typename... Args")
            ).or(
                newPattern(
                    match: variable_name_without_bounds,
                    tag_as: "storage.type.template",
                ).maybe(@spaces).then(
                    match: /\.\.\./,
                    tag_as: "ellipses punctuation.vararg-ellipses.template.definition",
                ).maybe(@spaces).then(
                    match: variable_name_without_bounds,
                    tag_as: "entity.name.type.template"
                )
            ).maybe(@spaces).then(
                newPattern(
                    match: /,/,
                    tag_as: "comma punctuation.separator.template.argument",
                ).or(
                    lookAheadFor(/>|$/)
                )
            )
        )
#
# Scope resolution
#
    one_scope_resolution = variable_name_without_bounds.maybe(@spaces).maybe(template_call.without_numbered_capture_groups).then(/::/)
    preceding_scopes = newPattern(
        match: zeroOrMoreOf(one_scope_resolution).maybe(@spaces),
        includes: [ :scope_resolution ]
        )
    scope_resolution = newPattern(
        repository_name: 'scope_resolution',
        tag_as: "meta.scope-resolution",
        match: preceding_scopes.then(
                match: variable_name_without_bounds,
                tag_as: "entity.name.type.namespace.scope-resolution"
            ).maybe(@spaces).maybe(
                template_call
            ).then(
                match: /::/,
                tag_as: "punctuation.separator.namespace.access"
            )
        )
#
# Functions
#
    functionTemplate = ->(repository_name:nil, match_name: nil, tag_name_as: nil, tag_content_as: nil, tag_parenthese_as: nil) do
        return Range.new(
            repository_name: repository_name,
            tag_content_as: "meta.#{tag_content_as}",
            start_pattern: newPattern(
                    match: match_name,
                    tag_as: tag_name_as,
                ).then(
                    match: /\(/,
                    tag_as: "punctuation.section.arguments.begin.bracket.round.#{tag_parenthese_as}"
                ),
            end_pattern: newPattern(
                    match: /\)/,
                    tag_as: "punctuation.section.arguments.end.bracket.round.#{tag_parenthese_as}"
                ),
            includes: evaluation_context
            )
    end
    cant_be_a_function_name = @cpp_tokens.that(:isWord,  not(:isPreprocessorDirective), not(:isValidFunctionName))
    avoid_invalid_function_names = lookBehindToAvoid(@standard_character).lookAheadToAvoid(maybe(@spaces).then(cant_be_a_function_name).maybe(@spaces).then(/\(/))
    look_ahead_for_function_name = lookAheadFor(variable_name_without_bounds.maybe(@spaces).maybe(inline_attribute).maybe(@spaces).then(/\(/))
    struct_declare = newPattern(
            should_partial_match: [ "struct crypto_aead *tfm = crypto_aead_reqtfm(req);", "struct aegis_block blocks[AEGIS128L_STATE_BLOCKS];" ],
            repository_name: "struct_declare",
            match: newPattern(
                match: /struct/,
                tag_as: "storage.type.struct.declare",
            ).then(@spaces).then(
                match: variable_name,
                tag_as: "entity.name.type.struct",
            ).then(@spaces).zeroOrMoreOf(
                match: /\*|&/.maybe(@spaces),
                includes: [
                    newPattern(
                        match: /\*/,
                        tag_as: "keyword.operator.dereference"
                    ),
                    newPattern(
                        match: /&/,
                        tag_as: "keyword.operator.reference"
                    ),
                ]
            ).then(
                match: variable_name,
                tag_as: "variable.other.object.declare",
            )
        )
    parameter_struct = newPattern(
            should_partial_match: [ "struct skcipher_walk *walk," ],
            repository_name: "parameter_struct",
            match: newPattern(
                match: /struct/,
                tag_as: "storage.type.struct.parameter",
            ).then(@spaces).then(
                match: variable_name,
                tag_as: "entity.name.type.struct.parameter",
            ).then(@spaces).zeroOrMoreOf(
                match: /\*|&/.maybe(@spaces),
                includes: [
                    newPattern(
                        match: /\*/,
                        tag_as: "keyword.operator.dereference"
                    ),
                    newPattern(
                        match: /&/,
                        tag_as: "keyword.operator.reference"
                    ),
                ]
            # this is a maybe because its possible to have a type declare without an actual parameter
            ).maybe(
                match: variable_name,
                tag_as: "variable.other.object.declare",
            ).maybe(@spaces).maybe(
                /\[/.maybe(@spaces).then(/\]/).maybe(@spaces),
            ).lookAheadFor(/,|\)|\n/)
        )
    function_definition = Range.new(
        tag_as: "meta.function.definition.parameters",
        start_pattern: avoid_invalid_function_names.then(look_ahead_for_function_name),
        end_pattern: lookBehindFor(/\)/),
        includes: [ parameter_struct, "#function-innards-c" ]
        )
    # a full match example of function call would be: aNameSpace::subClass<TemplateArg>FunctionName<5>(
    function_call = Range.new(
        start_pattern: avoid_invalid_function_names.then(
                preceding_scopes
            ).then(
                match: variable_name_without_bounds,
                tag_as: "entity.name.function.call"
            ).maybe(@spaces).maybe(
                template_call
            ).then(
                match: /\(/,
                tag_as: "punctuation.section.arguments.begin.bracket.round"
            ),
        end_pattern: newPattern(
                match: /\)/,
                tag_as: "punctuation.section.arguments.end.bracket.round"
            ),
        includes: [ "#function-call-innards-c" ]
        )
#
# Operators
#
    operator_context = []
    normal_word_operators = newPattern(
        match: variableBounds[ @cpp_tokens.that(:isOperator, :isWord, not(:isTypeCastingOperator), not(:isControlFlow), not(:isFunctionLike)) ],
        tag_as: "keyword.operator.wordlike alias keyword.operator.$match",
        )
    array_of_function_like_operators = @cpp_tokens.tokens.select { |each| each[:isFunctionLike] && !each[:isSpecifier] }
    for each in array_of_function_like_operators
        name = each[:name]
        operator_context.push(functionTemplate[
            repository_name: "#{name}_operator",
            match_name: variableBounds[/#{name}/],
            tag_name_as: "keyword.operator.functionlike keyword.operator.#{name}",
            tag_content_as: "arguments.operator.#{name}",
            tag_parenthese_as: "operator.#{name}"
        ])
    end
    operator_context += [
            functionTemplate[
                repository_name: "decltype_specifier",
                match_name: variableBounds[/decltype/],
                tag_name_as: "keyword.operator.functionlike keyword.other.decltype storage.type.decltype",
                tag_content_as: "arguments.decltype",
                tag_parenthese_as: "decltype"
            ],
            type_casting_operators,
            :method_access,
            :member_access,
            normal_word_operators,
            :vararg_ellipses,
            {
                match: "--",
                name: "keyword.operator.decrement"
            },
            {
                match: "\\+\\+",
                name: "keyword.operator.increment"
            },
            {
                match: "%=|\\+=|-=|\\*=|(?<!\\()/=",
                name: "keyword.operator.assignment.compound"
            },
            {
                match: "&=|\\^=|<<=|>>=|\\|=",
                name: "keyword.operator.assignment.compound.bitwise"
            },
            {
                match: "<<|>>",
                name: "keyword.operator.bitwise.shift"
            },
            {
                match: "!=|<=|>=|==|<|>",
                name: "keyword.operator.comparison"
            },
            {
                match: "&&|!|\\|\\|",
                name: "keyword.operator.logical"
            },
            {
                match: "&|\\||\\^|~",
                name: "keyword.operator"
            },
            {
                match: "=",
                name: "keyword.operator.assignment"
            },
            {
                match: "%|\\*|/|-|\\+",
                name: "keyword.operator"
            },
            {
                begin: "\\?",
                beginCaptures: {
                    "0" => {
                        name: "keyword.operator.ternary"
                    }
                },
                end: ":",
                applyEndPatternLast: true,
                endCaptures: {
                    "0" => {
                        name: "keyword.operator.ternary"
                    }
                },
                patterns: [
                    {
                        include: "#method_access"
                    },
                    {
                        include: "#member_access"
                    },
                    {
                        include: "#c_function_call"
                    },
                    {
                        include: "$base"
                    }
                ]
            }
        ]
    operators = newPattern(
        repository_name: 'operators',
        includes: operator_context,
        )
#
# Probably a parameter
#
    array_brackets = /\[\]/.maybe(@spaces)
    comma_or_closing_paraenthese = /,/.or(/\)/)
    stuff_after_a_parameter = maybe(@spaces).lookAheadFor(maybe(array_brackets).then(comma_or_closing_paraenthese))
    probably_a_parameter = newPattern(
        repository_name: 'probably_a_parameter',
        match: newPattern(
                match: variable_name_without_bounds.maybe(@spaces).lookAheadFor("="),
                tag_as: "variable.parameter.defaulted"
            ).or(
                match: look_behind_for_type.then(variable_name_without_bounds).then(stuff_after_a_parameter),
                tag_as: "variable.parameter"
            )
        )

#
# Operator overload
#
    # symbols can have spaces
    operator_symbols = maybe(@spaces).then(@cpp_tokens.that(:canAppearAfterOperatorKeyword, :isSymbol))
    # words must have spaces, the variable_name_without_bounds is for implicit overloads
    operator_wordish = @spaces.then(@cpp_tokens.that(:canAppearAfterOperatorKeyword, :isWordish).or(zeroOrMoreOf(one_scope_resolution).then(variable_name_without_bounds).maybe(@spaces).maybe(/&/)))
    after_operator_keyword = operator_symbols.or(operator_wordish)
    operator_overload = Range.new(
        repository_name: 'operator_overload',
        tag_as: "meta.function.definition.parameters.operator-overload",
        start_pattern: newPattern(
                match: /operator/,
                tag_as: "keyword.other.operator.overload",
            ).then(
                match: after_operator_keyword,
                tag_as: "entity.name.operator.overloadee",
                includes: [:scope_resolution]
            ).maybe(@spaces).then(
                match: /\(/,
                tag_as: "punctuation.section.parameters.begin.bracket.round.operator-overload"
            ),
        end_pattern: newPattern(
                match: /\)/,
                tag_as: "punctuation.section.parameters.end.bracket.round.operator-overload"
            ),
        includes: [:probably_a_parameter, :'function-innards-c' ]
        )

#
# Access . .* -> ->*
#
    dot_operator = /\.\*/.or(/\./)
    arrow_operator = /->\*/.or(/->/)
    dot_or_arrow_operator = /(?:\.\*|\.|->|->\*)/
    member_operator = newPattern(
            match: dot_operator,
            tag_as: "punctuation.separator.dot-access"
        ).or(
            match: arrow_operator,
            tag_as: "punctuation.separator.pointer-access"
        )
    subsequent_object_with_operator = variable_name_without_bounds.maybe(@spaces).then(member_operator.without_numbered_capture_groups).maybe(@spaces)
    # TODO: the member_access and method_access can probably be simplified considerably
    # TODO: member_access and method_access might also need additional matching to handle scope resolutions
    partial_member = the_this_keyword.or(
            newPattern(
                match: variable_name_without_bounds.or(lookBehindFor(/\]|\)/)).maybe(@spaces),
                tag_as: "variable.other.object.access",
            )
        ).then(
            member_operator
        )
    member_context = [
            mid_member = newPattern(
                tag_as: "variable.other.object.property",
                match: lookBehindFor(dot_or_arrow_operator).maybe(
                    @spaces
                ).then(
                    partial_member.without_numbered_capture_groups
                )
            ),
            partial_member,
            :member_access,
            :method_access,
        ]
    member_start = partial_member.then(
            match: zeroOrMoreOf(subsequent_object_with_operator),
            includes: member_context
        ).maybe(@spaces)
    # access to attribute
    type_represenetations = @cpp_tokens.representationsThat(:isType)
    lookahead_friedly_types_pattern = /#{type_represenetations.map { |each| each+"[^#{@standard_character}]" } .join('|')}/
    member_access = newPattern(
        repository_name: 'member_access',
        match: member_start.then(
                match: @word_boundary.lookAheadToAvoid(lookahead_friedly_types_pattern).then(variable_name_without_bounds).then(@word_boundary).lookAheadToAvoid(/\(/),
                tag_as: "variable.other.property"
            )
        )
    # access to method
    method_access = Range.new(
        repository_name: 'method_access',
        tag_content_as: "meta.function-call.member",
        start_pattern: member_start.then(
                match: variable_name_without_bounds,
                tag_as: "entity.name.function.member"
            ).then(
                match: /\(/,
                tag_as: "punctuation.section.arguments.begin.bracket.round.function.member"
            ),
        end_pattern: newPattern(
                match: /\)/,
                tag_as: "punctuation.section.arguments.end.bracket.round.function.member"
            ),
        includes: ["#function-call-innards-c"],
        )
#
# Namespace
#
    # see https://en.cppreference.com/w/cpp/language/namespace
    using_namespace = Range.new(
        tag_as: "meta.using-namespace",
        start_pattern: lookBehindToAvoid(@standard_character).then(
                match: /using/,
                tag_as: "keyword.other.using.directive",
            ).then(@spaces).then(
                match: /namespace/,
                tag_as: "keyword.other.namespace.directive storage.type.namespace.directive"
            ).then(@spaces).maybe(
                preceding_scopes
            ).then(
                match: variable_name,
                tag_as: "entity.name.type.namespace"
            ).lookAheadFor(
                /;|\n/
            ),
        end_pattern: @semicolon,
        )
    # TODO: add support for namespace name = qualified-namespace ;
    namespace_block = blockFinderFor(
        name: "namespace",
        tag_as: "meta.block.namespace",
        needs_semicolon: false,
        start_pattern: lookBehindToAvoid(@standard_character).then(
                match: /namespace/,
                tag_as: "keyword.other.namespace.definition storage.type.namespace.definition"
            ).then(@spaces).maybe(inline_attribute).maybe(@spaces).then(
                # Named namespace (with possible scope )
                preceding_scopes
            ).maybe(@spaces).then(
                newPattern(
                    match: variable_name,
                    tag_as: "entity.name.type.namespace",
                # anonymous namespaces
                ).or(
                    lookAheadFor(/\{/)
                )
            ),
        )

#
# Preprocessor
#
    # not sure if this pattern is actually accurate (it was the one provided by atom/c.tmLanguage)
    preprocessor_name_no_bounds = /[a-zA-Z_$][\w$]*/
    preprocessor_function_name = preprocessor_name_no_bounds.lookAheadFor(maybe(@spaces).then(/\(/))
    macro_argument = newPattern(
        match: /##/.then(variable_name_without_bounds).lookAheadToAvoid(@standard_character),
        tag_as: "variable.other.macro.argument"
        )

#
# Lambdas
#
    array_of_invalid_function_names = @cpp_tokens.representationsThat(:canAppearBeforeLambdaCapture)
    non_variable_name = /#{array_of_invalid_function_names.map { |each| '\W'+each+'|^'+each } .join('|')}/
    lambdas = Range.new(
        repository_name: 'lambdas',
        start_pattern: newPattern(
                should_fully_match: [ "[]", "[=]", "[&]", "[x,y,x]", "[x, y, &z, w = 1 + 1]", "[ a = blah[1324], b, c ]" ],
                should_partial_match: [ "[]", "[=](", "[&]{", "[x,y,x]", "[x, y, &z, w = 1 + 1] (", "[ a = blah[1324], b, c ] {" ],
                should_not_partial_match: [ "delete[]", "thing[]", "thing []", "thing     []", "thing[0][0] = 0" ],
                match: lookBehindFor(/[^\s]|^/).lookBehindToAvoid(/[\w\]\)\[]/).or(lookBehindFor(non_variable_name)).maybe(@spaces).then(
                        match: /\[/.lookAheadToAvoid(/\[/),
                        tag_as: "punctuation.definition.capture.begin.lambda",
                    ).then(
                        match: /(?:.*\[.*?\].*?)*.*?/,
                        tag_as: "meta.lambda.capture",
                        # the zeroOrMoreOf() is for other []'s that are inside of the lambda capture
                        # this pattern is still imperfect: if someone had a string literal with ['s in it, it could fail
                        includes: [ probably_a_parameter, "#function-innards-c" ],
                    ).then(
                        match: /\]/,
                        tag_as: "punctuation.definition.capture.end.lambda",
                    )
            ),
        end_pattern: newPattern(
                match: lookBehindFor(/}/),
            ),
        includes: [
            # check for parameters first
            Range.new(
                tag_as: 'meta.function.definition.parameters.lambda',
                start_pattern: newPattern(
                        match: /\(/,
                        tag_as:  "punctuation.definition.parameters.begin.lambda",
                    ),
                end_pattern: newPattern(
                        match: /\)/,
                        tag_as:  "punctuation.definition.parameters.end.lambda",
                    ),
                includes: [ probably_a_parameter, "#function-innards-c" ]
            ),
            # specificers
            newPattern(
                match: variableBounds[ @cpp_tokens.that(:isLambdaSpecifier) ],
                tag_as: "storage.modifier.lambda.$match"
            ),
            # check for the -> syntax
            newPattern(
                match: /->/,
                tag_as: "punctuation.definition.lambda.return-type"
            ).maybe(
                match: /.+?/.lookAheadFor(/\{|$/),
                tag_as: "storage.type.return-type.lambda"
            ),
            # then find the body
            Range.new(
                tag_as: "meta.function.definition.body.lambda",
                start_pattern: newPattern(
                        match: /\{/,
                        tag_as:  "punctuation.section.block.begin.bracket.curly.lambda",
                    ),
                end_pattern: newPattern(
                        match: /\}/,
                        tag_as:  "punctuation.section.block.end.bracket.curly.lambda",
                    ),
                includes: [ "$base" ]
            ),
        ]
        )

#
# Support
#
    # generally this section is for things that need a #include, (the support category)
    # it will be for things such as cout, cin, vector, string, map, etc
    pthread_types = newPattern(
        repository_name: :pthread_types,
        tag_as: "support.type.posix-reserved.pthread",
        match: variableBounds[ /pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t/ ],
        )
    posix_reserved_types = newPattern(
        repository_name: :posix_reserved_types,
        match: variableBounds[  /[a-zA-Z_]/.zeroOrMoreOf(@standard_character).then(/_t/)  ],
        tag_as: "support.type.posix-reserved"
        )


#
# Classes, structs, unions, enums
#
    # see https://en.cppreference.com/w/cpp/language/enum
    # this range matches both the case with brackets and the case without brackets
    enum_block = blockFinderFor(
            name: "enum",
            tag_as: "meta.block.enum",
            start_pattern: newPattern(
                    match: /enum/,
                    tag_as: "storage.type.enum"
                ).then(@spaces).maybe(
                    # see "Scoped enumerations" on  https://en.cppreference.com/w/cpp/language/enum
                    newPattern(
                        match: /class|struct/,
                        tag_as: "storage.type.enum.enum-key.$match",
                    ).then(@spaces.or(inline_attribute).or(lookAheadFor(/{/)))
                ).maybe(inline_attribute).maybe(@spaces).maybe(
                    match: variable_name,
                    tag_as: "entity.name.type.enum",
                ).maybe(
                    maybe(@spaces).then(
                        match: /:/,
                        tag_as: "colon punctuation.separator.type-specifier",
                    ).maybe(@spaces).maybe(
                        scope_resolution
                    ).maybe(@spaces).then(
                        match: variable_name,
                        tag_as: "storage.type.integral.$match",
                    )
            ),
            head_includes: [ "$base" ]
        )
    # the following are basically the equivlent of:
    #     @cpp_tokens.that(:isAccessSpecifier).or(/,/).or(/:/)
    # that ^ causes an error in the lookBehindFor() so it has to be manually spread
    can_come_before_a_inherited_class = @cpp_tokens.representationsThat(:isAccessSpecifier) + [ ',', ':' ]
    can_come_before_a_inherited_class_regex = /#{can_come_before_a_inherited_class.join('|')}/
    inhertance_context = [
        newPattern(
            match: /,/,
            tag_as: "comma punctuation.separator.delimiter.inhertance"
        ),
        newPattern(
            match: variableBounds[ @cpp_tokens.that(:isAccessSpecifier) ],
            tag_as: "storage.type.modifier.access.$match",
        ),
        lookBehindFor(can_come_before_a_inherited_class_regex).maybe(@spaces).lookAheadToAvoid(@cpp_tokens.that(:isAccessSpecifier)).then(
            match: variable_name,
            tag_as: "entity.name.type.inherited"
        )
    ]
    final_modifier = newPattern(
        match: /final/,
        tag_as: "storage.type.modifier.final",
    )
    generateClassOrStructBlockFinder = ->(name) do
        return blockFinderFor(
            tag_as: "meta.block.#{name}",
            name: name,
            start_pattern: newPattern(
                    should_fully_match: ["#{name} foo: bar", "#{name} foo: public baz"],
                    should_not_fully_match: ["#{name} foo {","#{name} foo{"],
                    should_partial_match: ["#{name} foo f;", "#{name} st s;"],
                    match: newPattern(
                        reference: "storage_type",
                        match: variableBounds[ /#{name}/ ],
                        tag_as: "storage.type.$match",
                    ).then(
                        @spaces.or(
                            inline_attribute
                        ).or(
                            lookAheadFor(/{/)
                        )
                    ).maybe(inline_attribute).maybe(@spaces).maybe(
                        match: variable_name,
                        tag_as: "entity.name.type.$reference(storage_type)",
                    ).maybe(
                        @spaces.then(final_modifier).maybe(@spaces)
                    ).maybe(
                        #
                        # inheritance
                        #
                        maybe(@spaces).then(
                            match: /:/,
                            tag_as: "colon punctuation.separator.inhertance"
                        # the following may seem redundant (removing it shouldn't change anything)
                        # this is because the follow are matched by what is inside of this Range
                        # However its preferable to match things here, in the Start (using a pattern), over matching it inside of the range
                        # this is because the start pattern typically fails safely (is limited to 1 line), while typically Ranges fail dangerously (can match the whole document)
                        ).zeroOrMoreOf(
                            match: maybe(@spaces).maybe(/,/).maybe(
                                @spaces
                            ).maybe(
                                @cpp_tokens.that(:isAccessSpecifier)
                            ).maybe(@spaces).oneOrMoreOf(
                                maybe(@spaces).maybe(/,/).maybe(
                                    @spaces
                                ).lookAheadToAvoid(
                                    @cpp_tokens.that(:isAccessSpecifier)
                                ).then(variable_name)
                            ),
                            includes: inhertance_context
                        )
                    ),
                ),
            head_includes: [
                *preprocessor_context,
                *inhertance_context,
                template_call_range,
                :comments,
            ],
            body_includes: [ "#constructor", "$base"  ],
        )
    end
    class_block = generateClassOrStructBlockFinder["class"]
    struct_block = generateClassOrStructBlockFinder["struct"]
    union_block = generateClassOrStructBlockFinder["union"]
    # the following is a legacy pattern, I'm not sure if it is still accurate
    # I have no idea why it matches a double quote
    extern_block = blockFinderFor(
        name: 'extern',
        tag_as: "meta.block.extern",
        start_pattern: newPattern(
                match: /\bextern/,
                tag_as: "storage.type.extern"
            ).lookAheadFor(/\s*\"/),
        head_includes: [ "$base" ],
        secondary_includes: [ "$base" ]
        )

#
# preprocessor directives
#
    # TODO, change all blocks/paraentheses so that they end and the end of a macro
    # TODO, find a good solution to dealing with if statments that cross in to/out of blocks
    hacky_fix_for_stray_directive = newPattern(
        repository_name: :hacky_fix_for_stray_directive,
        match: variableBounds[/#(?:endif|else|elif)/],
        tag_as: "keyword.control.directive.$match"
    )

#
# Misc Legacy
#
    assembly = newPattern(
        repository_name: :assembly,
        match: variableBounds[ /(asm|__asm__)/ ],
        tag_as: "storage.type.$match"
        )

#
# Language Context
#
newPattern(
    repository_name: :cpp_base,
    includes: [
        :parameter_struct, # TODO this is here because it needs to activate inside of function-pointer parameters. Once function-pointer syntax is implemented, remove it from here
        :struct_declare,
        :special_block,
        macro_argument,
        :strings,
        functional_specifiers_pre_parameters,
        qualifiers_and_specifiers_post_parameters,
        storage_specifiers,
        access_control_keywords,
        exception_keywords,
        other_keywords,
        :memory_operators,
        the_this_keyword,
        language_constants,
        template_isolated_definition,
        template_definition,
        scope_resolution,
        {
            match: /\b(constexpr|export|mutable|typename|thread_local)\b/,
            name: "storage.modifier"
        },
        {
            name: "meta.function.destructor",
            begin: "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
            beginCaptures: {
                "1" => {
                    name: "entity.name.function.destructor"
                },
                "2" => {
                    name: "punctuation.definition.parameters.begin.destructor"
                }
            },
            end: /\)/,
            endCaptures: {
                "0" => {
                    name: "punctuation.definition.parameters.end.destructor"
                }
            },
            patterns: [
                {
                    include: "$base"
                }
            ]
        },
        {
            name: "meta.function.destructor.prototype",
            begin: "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
            beginCaptures: {
                "1" => {
                    name: "entity.name.function"
                },
                "2" => {
                    name: "punctuation.definition.parameters.begin"
                }
            },
            end: /\)/,
            endCaptures: {
                "0" => {
                    name: "punctuation.definition.parameters.end"
                }
            },
            patterns: [
                {
                    include: "$base"
                }
            ]
        },
        lambdas,
        #
        # C patterns
        #
        *preprocessor_context,
        "#comments",
        switch_statement,
        control_flow_keywords,
        :storage_types,
        :assembly,
        {
            match: "\\b(const|extern|register|restrict|static|volatile|inline)\\b",
            name: "storage.modifier"
        },
        operator_overload,
        number_literal,
        :strings_c,
        {
            name: "meta.preprocessor.macro",
            begin: "(?x)\n^\\s* ((\\#)\\s*define) \\s+\t# define\n((?<id>#{preprocessor_name_no_bounds}))\t  # macro name\n(?:\n  (\\()\n\t(\n\t  \\s* \\g<id> \\s*\t\t # first argument\n\t  ((,) \\s* \\g<id> \\s*)*  # additional arguments\n\t  (?:\\.\\.\\.)?\t\t\t# varargs ellipsis?\n\t)\n  (\\))\n)?",
            beginCaptures: {
                "1" => {
                    name: "keyword.control.directive.define"
                },
                "2" => {
                    name: "punctuation.definition.directive"
                },
                "3" => {
                    name: "entity.name.function.preprocessor"
                },
                "5" => {
                    name: "punctuation.definition.parameters.begin"
                },
                "6" => {
                    name: "variable.parameter.preprocessor"
                },
                "8" => {
                    name: "punctuation.separator.parameters"
                },
                "9" => {
                    name: "punctuation.definition.parameters.end"
                }
            },
            end: "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
            patterns: [
                {
                    include: "#preprocessor-rule-define-line-contents"
                }
            ]
        },
        {
            name: "meta.preprocessor.diagnostic",
            begin: "^\\s*((#)\\s*(error|warning))\\b\\s*",
            beginCaptures: {
                "1" => {
                    name: "keyword.control.directive.diagnostic.$3"
                },
                "2" => {
                    name: "punctuation.definition.directive"
                }
            },
            end: "(?<!\\\\)(?=\\n)",
            patterns: [
                {
                    begin: "\"",
                    beginCaptures: {
                        "0" => {
                            name: "punctuation.definition.string.begin"
                        }
                    },
                    end: "\"|(?<!\\\\)(?=\\s*\\n)",
                    endCaptures: {
                        "0" => {
                            name: "punctuation.definition.string.end"
                        }
                    },
                    name: "string.quoted.double",
                    patterns: [
                        {
                            include: "#line_continuation_character"
                        }
                    ]
                },
                {
                    begin: "'",
                    beginCaptures: {
                        "0" => {
                            name: "punctuation.definition.string.begin"
                        }
                    },
                    end: "'|(?<!\\\\)(?=\\s*\\n)",
                    endCaptures: {
                        "0" => {
                            name: "punctuation.definition.string.end"
                        }
                    },
                    name: "string.quoted.single",
                    patterns: [
                        {
                            include: "#line_continuation_character"
                        }
                    ]
                },
                {
                    begin: "[^'\"]",
                    end: "(?<!\\\\)(?=\\s*\\n)",
                    name: "string.unquoted.single",
                    patterns: [
                        {
                            include: "#line_continuation_character"
                        },
                        {
                            include: "#comments"
                        }
                    ]
                }
            ]
        },
        {
            name: "meta.preprocessor.include",
            begin: "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*",
            beginCaptures: {
                "1" => {
                    name: "keyword.control.directive.$3"
                },
                "2" => {
                    name: "punctuation.definition.directive"
                }
            },
            end: "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
            patterns: [
                {
                    include: "#line_continuation_character"
                },
                {
                    begin: "\"",
                    beginCaptures: {
                        "0" => {
                            name: "punctuation.definition.string.begin"
                        }
                    },
                    end: "\"",
                    endCaptures: {
                        "0" => {
                            name: "punctuation.definition.string.end"
                        }
                    },
                    name: "string.quoted.double.include"
                },
                {
                    begin: "<",
                    beginCaptures: {
                        "0" => {
                            name: "punctuation.definition.string.begin"
                        }
                    },
                    end: ">",
                    endCaptures: {
                        "0" => {
                            name: "punctuation.definition.string.end"
                        }
                    },
                    name: "string.quoted.other.lt-gt.include"
                }
            ]
        },
        "#pragma-mark",
        {
            name: "meta.preprocessor",
            begin: "^\\s*((#)\\s*line)\\b",
            beginCaptures: {
                "1" => {
                    name: "keyword.control.directive.line"
                },
                "2" => {
                    name: "punctuation.definition.directive"
                }
            },
            end: "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
            patterns: [
                {
                    include: "#strings_c"
                },
                {
                    include: "#number_literal"
                },
                {
                    include: "#line_continuation_character"
                }
            ]
        },
        {
            name: "meta.preprocessor",
            begin: "^\\s*(?:((#)\\s*undef))\\b",
            beginCaptures: {
                "1" => {
                    name: "keyword.control.directive.undef"
                },
                "2" => {
                    name: "punctuation.definition.directive"
                }
            },
            end: "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
            patterns: [
                {
                    match: preprocessor_name_no_bounds,
                    name: "entity.name.function.preprocessor"
                },
                {
                    include: "#line_continuation_character"
                }
            ]
        },
        {
            name: "meta.preprocessor.pragma",
            begin: "^\\s*(?:((#)\\s*pragma))\\b",
            beginCaptures: {
                "1" => {
                    name: "keyword.control.directive.pragma"
                },
                "2" => {
                    name: "punctuation.definition.directive"
                }
            },
            end: "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
            patterns: [
                {
                    include: "#strings_c"
                },
                {
                    match: "[a-zA-Z_$][\\w\\-$]*",
                    name: "entity.other.attribute-name.pragma.preprocessor"
                },
                {
                    include: "#number_literal"
                },
                {
                    include: "#line_continuation_character"
                }
            ]
        },
        :operators,
        "#block-c",
        "#parens-c",
        function_definition,
        "#line_continuation_character",
        {
            name: "meta.bracket.square.access",
            begin: "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])",
            beginCaptures: {
                "1" => {
                    name: "variable.other.object"
                },
                "2" => {
                    name: "punctuation.definition.begin.bracket.square"
                }
            },
            end: "\\]",
            endCaptures: {
                "0" => {
                    name: "punctuation.definition.end.bracket.square"
                }
            },
            patterns: [
                {
                    include: "#function-call-innards-c"
                }
            ]
        },
        {
            name: "storage.modifier.array.bracket.square",
            match: /#{lookBehindToAvoid(/delete/)}\\[\\s*\\]/
        },
        @semicolon.to_tag,
        {
            match: ",",
            name: "comma punctuation.separator.delimiter"
        }
    ]
)
cpp_grammar.initalContextIncludes(:cpp_base)
cpp_grammar.addToRepository({
    "block" => {
        begin: "\\{",
        beginCaptures: {
            "0" => {
                name: "punctuation.section.block.begin.bracket.curly"
            }
        },
        end: "\\}",
        endCaptures: {
            "0" => {
                name: "punctuation.section.block.end.bracket.curly"
            }
        },
        name: "meta.block",
        patterns: [
            {
                captures: {
                    "1" => {
                        name: "support.function.any-method"
                    },
                    "2" => {
                        name: "punctuation.definition.parameters"
                    }
                },
                match: "(?x)\n(\n  (?!while|for|do|if|else|switch|catch|return)\n  (?:\\b[A-Za-z_][A-Za-z0-9_]*+\\b|::)*+ # actual name\n)\n\\s*(\\() # opening bracket",
                name: "meta.function-call"
            },
            {
                include: "$base"
            }
        ]
    },
    "constructor" => {
        patterns: [
            {
                begin: "(?x)\n(?:^\\s*)  # beginning of line\n((?!while|for|do|if|else|switch|catch)[A-Za-z_][A-Za-z0-9_:]*) # actual name\n\\s*(\\()  # opening bracket",
                beginCaptures: {
                    "1" => {
                        name: "entity.name.function.constructor"
                    },
                    "2" => {
                        name: "punctuation.definition.parameters.begin.constructor"
                    }
                },
                end: "\\)",
                endCaptures: {
                    "0" => {
                        name: "punctuation.definition.parameters.end.constructor"
                    }
                },
                name: "meta.function.constructor",
                patterns: [
                    {
                        include: "#probably_a_parameter"
                    },
                    {
                        include: "#function-innards-c"
                    }
                ]
            },
            {
                begin: "(?x)\n(:)\n(\n  (?=\n    \\s*[A-Za-z_][A-Za-z0-9_:]* # actual name\n    \\s* (\\() # opening bracket\n  )\n)",
                beginCaptures: {
                    "1" => {
                        name: "punctuation.definition.initializer-list.parameters"
                    }
                },
                end: "(?=\\{)",
                name: "meta.function.constructor.initializer-list",
                patterns: [
                    {
                        include: "$base"
                    }
                ]
            }
        ]
    },
    "special_block" => {
        patterns: [
            attributes.to_tag,
            using_namespace.to_tag,
            namespace_block.to_tag,
            class_block.to_tag,
            struct_block.to_tag,
            union_block.to_tag,
            enum_block.to_tag,
            extern_block.to_tag,
        ]
    },
    # TODO: "strings" is included and it is different from "strings_c", but its not used anywhere. Figure out whats going on here
    "strings" => {
        patterns: [
            {
                begin: "(u|u8|U|L)?\"",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.definition.string.begin"
                    },
                    "1" => {
                        name: "meta.encoding"
                    }
                },
                end: "\"",
                endCaptures: {
                    "0" => {
                        name: "punctuation.definition.string.end"
                    }
                },
                name: "string.quoted.double",
                patterns: [
                    {
                        match: "\\\\u\\h{4}|\\\\U\\h{8}",
                        name: "constant.character.escape"
                    },
                    {
                        match: "\\\\['\"?\\\\abfnrtv]",
                        name: "constant.character.escape"
                    },
                    {
                        match: "\\\\[0-7]{1,3}",
                        name: "constant.character.escape"
                    },
                    {
                        match: "\\\\x\\h+",
                        name: "constant.character.escape"
                    },
                    {
                        include: "#string_placeholder-c"
                    }
                ]
            },
            {
                begin: "(u|u8|U|L)?R\"(?:([^ ()\\\\\\t]{0,16})|([^ ()\\\\\\t]*))\\(",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.definition.string.begin"
                    },
                    "1" => {
                        name: "meta.encoding"
                    },
                    "3" => {
                        name: "invalid.illegal.delimiter-too-long"
                    }
                },
                end: "\\)\\2(\\3)\"",
                endCaptures: {
                    "0" => {
                        name: "punctuation.definition.string.end"
                    },
                    "1" => {
                        name: "invalid.illegal.delimiter-too-long"
                    }
                },
                name: "string.quoted.double.raw"
            }
        ]
    },
    "block-c" => {
        patterns: [
            {
                begin: "{",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.section.block.begin.bracket.curly"
                    }
                },
                end: "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
                endCaptures: {
                    "0" => {
                        name: "punctuation.section.block.end.bracket.curly"
                    }
                },
                name: "meta.block",
                patterns: [
                    {
                        include: "#block_innards-c"
                    }
                ]
            }
        ]
    },
    "block_innards-c" => {
        patterns: [
            {
                include: "#preprocessor-rule-enabled-block"
            },
            {
                include: "#preprocessor-rule-disabled-block"
            },
            {
                include: "#preprocessor-rule-conditional-block"
            },
            {
                include: "#method_access"
            },
            {
                include: "#member_access"
            },
            {
                include: "#c_function_call"
            },
            {
                name: "meta.initialization",
                begin: "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|new|return)\n\t(?<=\\w) \\s+(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
                beginCaptures: {
                    "1" => {
                        name: "variable.other"
                    },
                    "2" => {
                        name: "punctuation.section.parens.begin.bracket.round.initialization"
                    }
                },
                end: "\\)",
                endCaptures: {
                    "0" => {
                        name: "punctuation.section.parens.end.bracket.round.initialization"
                    }
                },
                patterns: [
                    {
                        include: "#function-call-innards-c"
                    }
                ]
            },
            {
                begin: "{",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.section.block.begin.bracket.curly"
                    }
                },
                end: "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
                endCaptures: {
                    "0" => {
                        name: "punctuation.section.block.end.bracket.curly"
                    }
                },
                patterns: [
                    {
                        include: "#block_innards-c"
                    }
                ]
            },
            {
                include: "#parens-block-c"
            },
            {
                include: "$base"
            }
        ]
    },
    "c_function_call" => {
        begin: "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|typeid|alignof|alignas|sizeof|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas|constexpr|volatile|operator|(?:::)?new|(?:::)?delete)\\s*\\()\n(?=\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*#{maybe(template_call.without_numbered_capture_groups)}\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
        end: "(?<=\\))(?!\\w)",
        name: "meta.function-call",
        patterns: [
            {
                include: "#function-call-innards-c"
            }
        ]
    },
    "comments" => {
        patterns: [
            {
                captures: {
                    "1" => {
                        name: "meta.toc-list.banner.block"
                    }
                },
                match: "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
                name: "comment.block"
            },
            {
                begin: "/\\*",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.definition.comment.begin"
                    }
                },
                end: "\\*/",
                endCaptures: {
                    "0" => {
                        name: "punctuation.definition.comment.end"
                    }
                },
                name: "comment.block"
            },
            {
                captures: {
                    "1" => {
                        name: "meta.toc-list.banner.line"
                    }
                },
                match: "^// =(\\s*.*?)\\s*=\\s*$\\n?",
                name: "comment.line.banner"
            },
            {
                begin: "(^[ \\t]+)?(?=//)",
                beginCaptures: {
                    "1" => {
                        name: "punctuation.whitespace.comment.leading"
                    }
                },
                end: "(?!\\G)",
                patterns: [
                    {
                        begin: "//",
                        beginCaptures: {
                            "0" => {
                                name: "punctuation.definition.comment"
                            }
                        },
                        end: "(?=\\n)",
                        name: "comment.line.double-slash",
                        patterns: [
                            {
                                include: "#line_continuation_character"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "disabled" => {
        begin: "^\\s*#\\s*if(n?def)?\\b.*$",
        end: "^\\s*#\\s*endif\\b",
        patterns: [
            {
                include: "#disabled"
            },
            {
                include: "#pragma-mark"
            }
        ]
    },
    "line_continuation_character" => {
        patterns: [
            {
                match: "(\\\\)\\n",
                captures: {
                    "1" => {
                        name: "constant.character.escape.line-continuation"
                    }
                }
            }
        ]
    },
    "parens-c" => {
        name: "punctuation.section.parens-c",
        begin: "\\(",
        beginCaptures: {
            "0" => {
                name: "punctuation.section.parens.begin.bracket.round"
            }
        },
        end: "\\)",
        endCaptures: {
            "0" => {
                name: "punctuation.section.parens.end.bracket.round"
            }
        },
        patterns: [
            {
                include: "$base"
            }
        ]
    },
    "parens-block-c" => {
        name: "meta.block.parens",
        begin: "\\(",
        beginCaptures: {
            "0" => {
                name: "punctuation.section.parens.begin.bracket.round"
            }
        },
        end: "\\)",
        endCaptures: {
            "0" => {
                name: "punctuation.section.parens.end.bracket.round"
            }
        },
        patterns: [
            {
                include: "#block_innards-c"
            },
            {
                match: lookBehindToAvoid(/:/).then(/:/).lookAheadToAvoid(/:/),
                name: "colon punctuation.separator.range-based"
            }
        ]
    },
    "pragma-mark" => {
        captures: {
            "1" => {
                name: "meta.preprocessor.pragma"
            },
            "2" => {
                name: "keyword.control.directive.pragma.pragma-mark"
            },
            "3" => {
                name: "punctuation.definition.directive"
            },
            "4" => {
                name: "entity.name.tag.pragma-mark"
            }
        },
        match: "^\\s*(((#)\\s*pragma\\s+mark)\\s+(.*))",
        name: "meta.section"
    },
    "strings_c" => {
        patterns: [
            {
                begin: "\"",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.definition.string.begin"
                    }
                },
                end: "\"",
                endCaptures: {
                    "0" => {
                        name: "punctuation.definition.string.end"
                    }
                },
                name: "string.quoted.double",
                patterns: [
                    {
                        include: "#string_escaped_char-c"
                    },
                    {
                        include: "#string_placeholder-c"
                    },
                    {
                        include: "#line_continuation_character"
                    }
                ]
            },
            {
                begin: lookBehindToAvoid(/[\da-fA-F]/).then(/'/),
                beginCaptures: {
                    "0" => {
                        name: "punctuation.definition.string.begin"
                    }
                },
                end: "'",
                endCaptures: {
                    "0" => {
                        name: "punctuation.definition.string.end"
                    }
                },
                name: "string.quoted.single",
                patterns: [
                    {
                        include: "#string_escaped_char-c"
                    },
                    {
                        include: "#line_continuation_character"
                    }
                ]
            }
        ]
    },
    "string_escaped_char-c" => {
        patterns: [
            {
                match: "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
                name: "constant.character.escape"
            },
            {
                match: "\\\\.",
                name: "invalid.illegal.unknown-escape"
            }
        ]
    },
    "string_placeholder-c" => {
        patterns: [
            {
                match: "(?x) %\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type",
                name: "constant.other.placeholder"
            },
            # I don't think these are actual escapes, and they incorrectly mark valid strings
            # It might be related to printf and format from C (which is low priority for C++)
            # {
            #     match: "(%)(?!\"\\s*(PRI|SCN))",
            #     captures: {
            #         "1" => {
            #             name: "constant.other.placeholder"
            #         }
            #     }
            # }
        ]
    },
    "vararg_ellipses" => {
        match: "(?<!\\.)\\.\\.\\.(?!\\.)",
        name: "punctuation.vararg-ellipses"
    },
    "preprocessor-rule-conditional" => {
        patterns: [
            {
                begin: "^\\s*((#)\\s*if(?:n?def)?\\b)",
                beginCaptures: {
                    "0" => {
                        name: "meta.preprocessor"
                    },
                    "1" => {
                        name: "keyword.control.directive.conditional"
                    },
                    "2" => {
                        name: "punctuation.definition.directive"
                    }
                },
                end: "^\\s*((#)\\s*endif\\b)",
                endCaptures: {
                    "0" => {
                        name: "meta.preprocessor"
                    },
                    "1" => {
                        name: "keyword.control.directive.conditional"
                    },
                    "2" => {
                        name: "punctuation.definition.directive"
                    }
                },
                patterns: [
                    {
                        begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                        end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                        name: "meta.preprocessor",
                        patterns: [
                            {
                                include: "#preprocessor-rule-conditional-line"
                            }
                        ]
                    },
                    {
                        include: "#preprocessor-rule-enabled-elif"
                    },
                    {
                        include: "#preprocessor-rule-enabled-else"
                    },
                    {
                        include: "#preprocessor-rule-disabled-elif"
                    },
                    {
                        begin: "^\\s*((#)\\s*elif\\b)",
                        beginCaptures: {
                            "1" => {
                                name: "keyword.control.directive.conditional"
                            },
                            "2" => {
                                name: "punctuation.definition.directive"
                            }
                        },
                        end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                        name: "meta.preprocessor",
                        patterns: [
                            {
                                include: "#preprocessor-rule-conditional-line"
                            }
                        ]
                    },
                    {
                        include: "$base"
                    }
                ]
            },
        ]
    },
    "preprocessor-rule-conditional-block" => {
        patterns: [
            {
                begin: "^\\s*((#)\\s*if(?:n?def)?\\b)",
                beginCaptures: {
                    "0" => {
                        name: "meta.preprocessor"
                    },
                    "1" => {
                        name: "keyword.control.directive.conditional"
                    },
                    "2" => {
                        name: "punctuation.definition.directive"
                    }
                },
                end: "^\\s*((#)\\s*endif\\b)",
                endCaptures: {
                    "0" => {
                        name: "meta.preprocessor"
                    },
                    "1" => {
                        name: "keyword.control.directive.conditional"
                    },
                    "2" => {
                        name: "punctuation.definition.directive"
                    }
                },
                patterns: [
                    {
                        begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                        end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                        name: "meta.preprocessor",
                        patterns: [
                            {
                                include: "#preprocessor-rule-conditional-line"
                            }
                        ]
                    },
                    {
                        include: "#preprocessor-rule-enabled-elif-block"
                    },
                    {
                        include: "#preprocessor-rule-enabled-else-block"
                    },
                    {
                        include: "#preprocessor-rule-disabled-elif"
                    },
                    {
                        begin: "^\\s*((#)\\s*elif\\b)",
                        beginCaptures: {
                            "1" => {
                                name: "keyword.control.directive.conditional"
                            },
                            "2" => {
                                name: "punctuation.definition.directive"
                            }
                        },
                        end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                        name: "meta.preprocessor",
                        patterns: [
                            {
                                include: "#preprocessor-rule-conditional-line"
                            }
                        ]
                    },
                    {
                        include: "#block_innards-c"
                    }
                ]
            },
        ]
    },
    "preprocessor-rule-conditional-line" => {
        patterns: [
            {
                match: "(?:\\bdefined\\b\\s*$)|(?:\\bdefined\\b(?=\\s*\\(*\\s*(?:(?!defined\\b)[a-zA-Z_$][\\w$]*\\b)\\s*\\)*\\s*(?:\\n|//|/\\*|\\?|\\:|&&|\\|\\||\\\\\\s*\\n)))",
                name: "keyword.control.directive.conditional"
            },
            {
                match: "\\bdefined\\b",
                name: "invalid.illegal.macro-name"
            },
            {
                include: "#comments"
            },
            {
                include: "#strings_c"
            },
            {
                include: "#number_literal"
            },
            {
                begin: "\\?",
                beginCaptures: {
                    "0" => {
                        name: "keyword.operator.ternary"
                    }
                },
                end: ":",
                endCaptures: {
                    "0" => {
                        name: "keyword.operator.ternary"
                    }
                },
                patterns: [
                    {
                        include: "#preprocessor-rule-conditional-line"
                    }
                ]
            },
            {
                include: "#operators"
            },
            {
                include: "#constants"
            },
            {
                match: preprocessor_name_no_bounds,
                name: "entity.name.function.preprocessor"
            },
            {
                include: "#line_continuation_character"
            },
            {
                begin: "\\(",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.section.parens.begin.bracket.round"
                    }
                },
                end: "\\)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                endCaptures: {
                    "0" => {
                        name: "punctuation.section.parens.end.bracket.round"
                    }
                },
                patterns: [
                    {
                        include: "#preprocessor-rule-conditional-line"
                    }
                ]
            }
        ]
    },
    "preprocessor-rule-disabled" => {
        patterns: [
            {
                begin: "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
                beginCaptures: {
                    "0" => {
                        name: "meta.preprocessor"
                    },
                    "1" => {
                        name: "keyword.control.directive.conditional"
                    },
                    "2" => {
                        name: "punctuation.definition.directive"
                    }
                },
                end: "^\\s*((#)\\s*endif\\b)",
                endCaptures: {
                    "0" => {
                        name: "meta.preprocessor"
                    },
                    "1" => {
                        name: "keyword.control.directive.conditional"
                    },
                    "2" => {
                        name: "punctuation.definition.directive"
                    }
                },
                patterns: [
                    {
                        begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                        end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
                        name: "meta.preprocessor",
                        patterns: [
                            {
                                include: "#preprocessor-rule-conditional-line"
                            }
                        ]
                    },
                    {
                        include: "#comments"
                    },
                    {
                        include: "#preprocessor-rule-enabled-elif"
                    },
                    {
                        include: "#preprocessor-rule-enabled-else"
                    },
                    {
                        include: "#preprocessor-rule-disabled-elif"
                    },
                    {
                        begin: "^\\s*((#)\\s*elif\\b)",
                        beginCaptures: {
                            "0" => {
                                name: "meta.preprocessor"
                            },
                            "1" => {
                                name: "keyword.control.directive.conditional"
                            },
                            "2" => {
                                name: "punctuation.definition.directive"
                            }
                        },
                        end: "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
                        patterns: [
                            {
                                begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                                end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                                name: "meta.preprocessor",
                                patterns: [
                                    {
                                        include: "#preprocessor-rule-conditional-line"
                                    }
                                ]
                            },
                            {
                                include: "$base"
                            }
                        ]
                    },
                    {
                        begin: "\\n",
                        end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
                        "contentName" => "comment.block.preprocessor.if-branch",
                        patterns: [
                            {
                                include: "#disabled"
                            },
                            {
                                include: "#pragma-mark"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "preprocessor-rule-disabled-block" => {
        patterns: [
            {
                begin: "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
                beginCaptures: {
                    "0" => {
                        name: "meta.preprocessor"
                    },
                    "1" => {
                        name: "keyword.control.directive.conditional"
                    },
                    "2" => {
                        name: "punctuation.definition.directive"
                    }
                },
                end: "^\\s*((#)\\s*endif\\b)",
                endCaptures: {
                    "0" => {
                        name: "meta.preprocessor"
                    },
                    "1" => {
                        name: "keyword.control.directive.conditional"
                    },
                    "2" => {
                        name: "punctuation.definition.directive"
                    }
                },
                patterns: [
                    {
                        begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                        end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
                        name: "meta.preprocessor",
                        patterns: [
                            {
                                include: "#preprocessor-rule-conditional-line"
                            }
                        ]
                    },
                    {
                        include: "#comments"
                    },
                    {
                        include: "#preprocessor-rule-enabled-elif-block"
                    },
                    {
                        include: "#preprocessor-rule-enabled-else-block"
                    },
                    {
                        include: "#preprocessor-rule-disabled-elif"
                    },
                    {
                        begin: "^\\s*((#)\\s*elif\\b)",
                        beginCaptures: {
                            "0" => {
                                name: "meta.preprocessor"
                            },
                            "1" => {
                                name: "keyword.control.directive.conditional"
                            },
                            "2" => {
                                name: "punctuation.definition.directive"
                            }
                        },
                        end: "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
                        patterns: [
                            {
                                begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                                end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                                name: "meta.preprocessor",
                                patterns: [
                                    {
                                        include: "#preprocessor-rule-conditional-line"
                                    }
                                ]
                            },
                            {
                                include: "#block_innards-c"
                            }
                        ]
                    },
                    {
                        begin: "\\n",
                        end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
                        "contentName" => "comment.block.preprocessor.if-branch.in-block",
                        patterns: [
                            {
                                include: "#disabled"
                            },
                            {
                                include: "#pragma-mark"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "preprocessor-rule-disabled-elif" => {
        begin: "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
        beginCaptures: {
            "0" => {
                name: "meta.preprocessor"
            },
            "1" => {
                name: "keyword.control.directive.conditional"
            },
            "2" => {
                name: "punctuation.definition.directive"
            }
        },
        end: "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
        patterns: [
            {
                begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                name: "meta.preprocessor",
                patterns: [
                    {
                        include: "#preprocessor-rule-conditional-line"
                    }
                ]
            },
            {
                include: "#comments"
            },
            {
                begin: "\\n",
                end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
                "contentName" => "comment.block.preprocessor.elif-branch",
                patterns: [
                    {
                        include: "#disabled"
                    },
                    {
                        include: "#pragma-mark"
                    }
                ]
            }
        ]
    },
    "preprocessor-rule-enabled" => {
        patterns: [
            {
                begin: "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
                beginCaptures: {
                    "0" => {
                        name: "meta.preprocessor"
                    },
                    "1" => {
                        name: "keyword.control.directive.conditional"
                    },
                    "2" => {
                        name: "punctuation.definition.directive"
                    },
                    "3" => {
                        name: "constant.numeric.preprocessor"
                    }
                },
                end: "^\\s*((#)\\s*endif\\b)",
                endCaptures: {
                    "0" => {
                        name: "meta.preprocessor"
                    },
                    "1" => {
                        name: "keyword.control.directive.conditional"
                    },
                    "2" => {
                        name: "punctuation.definition.directive"
                    }
                },
                patterns: [
                    {
                        begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                        end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
                        name: "meta.preprocessor",
                        patterns: [
                            {
                                include: "#preprocessor-rule-conditional-line"
                            }
                        ]
                    },
                    {
                        include: "#comments"
                    },
                    {
                        begin: "^\\s*((#)\\s*else\\b)",
                        beginCaptures: {
                            "0" => {
                                name: "meta.preprocessor"
                            },
                            "1" => {
                                name: "keyword.control.directive.conditional"
                            },
                            "2" => {
                                name: "punctuation.definition.directive"
                            }
                        },
                        end: "(?=^\\s*((#)\\s*endif\\b))",
                        "contentName" => "comment.block.preprocessor.else-branch",
                        patterns: [
                            {
                                include: "#disabled"
                            },
                            {
                                include: "#pragma-mark"
                            }
                        ]
                    },
                    {
                        begin: "^\\s*((#)\\s*elif\\b)",
                        beginCaptures: {
                            "0" => {
                                name: "meta.preprocessor"
                            },
                            "1" => {
                                name: "keyword.control.directive.conditional"
                            },
                            "2" => {
                                name: "punctuation.definition.directive"
                            }
                        },
                        end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
                        "contentName" => "comment.block.preprocessor.if-branch",
                        patterns: [
                            {
                                include: "#disabled"
                            },
                            {
                                include: "#pragma-mark"
                            }
                        ]
                    },
                    {
                        begin: "\\n",
                        end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
                        patterns: [
                            {
                                include: "$base"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "preprocessor-rule-enabled-block" => {
        patterns: [
            {
                begin: "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
                beginCaptures: {
                    "0" => {
                        name: "meta.preprocessor"
                    },
                    "1" => {
                        name: "keyword.control.directive.conditional"
                    },
                    "2" => {
                        name: "punctuation.definition.directive"
                    }
                },
                end: "^\\s*((#)\\s*endif\\b)",
                endCaptures: {
                    "0" => {
                        name: "meta.preprocessor"
                    },
                    "1" => {
                        name: "keyword.control.directive.conditional"
                    },
                    "2" => {
                        name: "punctuation.definition.directive"
                    }
                },
                patterns: [
                    {
                        begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                        end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
                        name: "meta.preprocessor",
                        patterns: [
                            {
                                include: "#preprocessor-rule-conditional-line"
                            }
                        ]
                    },
                    {
                        include: "#comments"
                    },
                    {
                        begin: "^\\s*((#)\\s*else\\b)",
                        beginCaptures: {
                            "0" => {
                                name: "meta.preprocessor"
                            },
                            "1" => {
                                name: "keyword.control.directive.conditional"
                            },
                            "2" => {
                                name: "punctuation.definition.directive"
                            }
                        },
                        end: "(?=^\\s*((#)\\s*endif\\b))",
                        "contentName" => "comment.block.preprocessor.else-branch.in-block",
                        patterns: [
                            {
                                include: "#disabled"
                            },
                            {
                                include: "#pragma-mark"
                            }
                        ]
                    },
                    {
                        begin: "^\\s*((#)\\s*elif\\b)",
                        beginCaptures: {
                            "0" => {
                                name: "meta.preprocessor"
                            },
                            "1" => {
                                name: "keyword.control.directive.conditional"
                            },
                            "2" => {
                                name: "punctuation.definition.directive"
                            }
                        },
                        end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
                        "contentName" => "comment.block.preprocessor.if-branch.in-block",
                        patterns: [
                            {
                                include: "#disabled"
                            },
                            {
                                include: "#pragma-mark"
                            }
                        ]
                    },
                    {
                        begin: "\\n",
                        end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
                        patterns: [
                            {
                                include: "#block_innards-c"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "preprocessor-rule-enabled-elif" => {
        begin: "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
        beginCaptures: {
            "0" => {
                name: "meta.preprocessor"
            },
            "1" => {
                name: "keyword.control.directive.conditional"
            },
            "2" => {
                name: "punctuation.definition.directive"
            }
        },
        end: "(?=^\\s*((#)\\s*endif\\b))",
        patterns: [
            {
                begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                name: "meta.preprocessor",
                patterns: [
                    {
                        include: "#preprocessor-rule-conditional-line"
                    }
                ]
            },
            {
                include: "#comments"
            },
            {
                begin: "\\n",
                end: "(?=^\\s*((#)\\s*(?:endif)\\b))",
                patterns: [
                    {
                        begin: "^\\s*((#)\\s*(else)\\b)",
                        beginCaptures: {
                            "0" => {
                                name: "meta.preprocessor"
                            },
                            "1" => {
                                name: "keyword.control.directive.conditional"
                            },
                            "2" => {
                                name: "punctuation.definition.directive"
                            }
                        },
                        end: "(?=^\\s*((#)\\s*endif\\b))",
                        "contentName" => "comment.block.preprocessor.elif-branch",
                        patterns: [
                            {
                                include: "#disabled"
                            },
                            {
                                include: "#pragma-mark"
                            }
                        ]
                    },
                    {
                        begin: "^\\s*((#)\\s*(elif)\\b)",
                        beginCaptures: {
                            "0" => {
                                name: "meta.preprocessor"
                            },
                            "1" => {
                                name: "keyword.control.directive.conditional"
                            },
                            "2" => {
                                name: "punctuation.definition.directive"
                            }
                        },
                        end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
                        "contentName" => "comment.block.preprocessor.elif-branch",
                        patterns: [
                            {
                                include: "#disabled"
                            },
                            {
                                include: "#pragma-mark"
                            }
                        ]
                    },
                    {
                        include: "$base"
                    }
                ]
            }
        ]
    },
    "preprocessor-rule-enabled-elif-block" => {
        begin: "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
        beginCaptures: {
            "0" => {
                name: "meta.preprocessor"
            },
            "1" => {
                name: "keyword.control.directive.conditional"
            },
            "2" => {
                name: "punctuation.definition.directive"
            }
        },
        end: "(?=^\\s*((#)\\s*endif\\b))",
        patterns: [
            {
                begin: "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                end: "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                name: "meta.preprocessor",
                patterns: [
                    {
                        include: "#preprocessor-rule-conditional-line"
                    }
                ]
            },
            {
                include: "#comments"
            },
            {
                begin: "\\n",
                end: "(?=^\\s*((#)\\s*(?:endif)\\b))",
                patterns: [
                    {
                        begin: "^\\s*((#)\\s*(else)\\b)",
                        beginCaptures: {
                            "0" => {
                                name: "meta.preprocessor"
                            },
                            "1" => {
                                name: "keyword.control.directive.conditional"
                            },
                            "2" => {
                                name: "punctuation.definition.directive"
                            }
                        },
                        end: "(?=^\\s*((#)\\s*endif\\b))",
                        "contentName" => "comment.block.preprocessor.elif-branch.in-block",
                        patterns: [
                            {
                                include: "#disabled"
                            },
                            {
                                include: "#pragma-mark"
                            }
                        ]
                    },
                    {
                        begin: "^\\s*((#)\\s*(elif)\\b)",
                        beginCaptures: {
                            "0" => {
                                name: "meta.preprocessor"
                            },
                            "1" => {
                                name: "keyword.control.directive.conditional"
                            },
                            "2" => {
                                name: "punctuation.definition.directive"
                            }
                        },
                        end: "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
                        "contentName" => "comment.block.preprocessor.elif-branch",
                        patterns: [
                            {
                                include: "#disabled"
                            },
                            {
                                include: "#pragma-mark"
                            }
                        ]
                    },
                    {
                        include: "#block_innards-c"
                    }
                ]
            }
        ]
    },
    "preprocessor-rule-enabled-else" => {
        begin: "^\\s*((#)\\s*else\\b)",
        beginCaptures: {
            "0" => {
                name: "meta.preprocessor"
            },
            "1" => {
                name: "keyword.control.directive.conditional"
            },
            "2" => {
                name: "punctuation.definition.directive"
            }
        },
        end: "(?=^\\s*((#)\\s*endif\\b))",
        patterns: [
            {
                include: "$base"
            }
        ]
    },
    "preprocessor-rule-enabled-else-block" => {
        begin: "^\\s*((#)\\s*else\\b)",
        beginCaptures: {
            "0" => {
                name: "meta.preprocessor"
            },
            "1" => {
                name: "keyword.control.directive.conditional"
            },
            "2" => {
                name: "punctuation.definition.directive"
            }
        },
        end: "(?=^\\s*((#)\\s*endif\\b))",
        patterns: [
            {
                include: "#block_innards-c"
            }
        ]
    },
    "preprocessor-rule-define-line-contents" => {
        patterns: [
            {
                include: "#vararg_ellipses"
            },
            {
                match: /##?/.then(variable_name_without_bounds).lookAheadToAvoid(@standard_character),
                name: "variable.other.macro.argument"
            },
            {
                begin: "{",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.section.block.begin.bracket.curly"
                    }
                },
                end: "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
                endCaptures: {
                    "0" => {
                        name: "punctuation.section.block.end.bracket.curly"
                    }
                },
                name: "meta.block",
                patterns: [
                    {
                        include: "#preprocessor-rule-define-line-blocks"
                    }
                ]
            },
            {
                match: "\\(",
                name: "punctuation.section.parens.begin.bracket.round"
            },
            {
                match: "\\)",
                name: "punctuation.section.parens.end.bracket.round"
            },
            {
                begin: "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|typeid|alignof|alignas|sizeof|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas|asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\s*\\()\n(?=\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
                end: "(?<=\\))(?!\\w)|(?<!\\\\)(?=\\s*\\n)",
                name: "meta.function",
                patterns: [
                    {
                        include: "#preprocessor-rule-define-line-functions"
                    }
                ]
            },
            {
                begin: "\"",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.definition.string.begin"
                    }
                },
                end: "\"|(?<!\\\\)(?=\\s*\\n)",
                endCaptures: {
                    "0" => {
                        name: "punctuation.definition.string.end"
                    }
                },
                name: "string.quoted.double",
                patterns: [
                    {
                        include: "#string_escaped_char-c"
                    },
                    {
                        include: "#string_placeholder-c"
                    },
                    {
                        include: "#line_continuation_character"
                    }
                ]
            },
            {
                begin: "'",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.definition.string.begin"
                    }
                },
                end: "'|(?<!\\\\)(?=\\s*\\n)",
                endCaptures: {
                    "0" => {
                        name: "punctuation.definition.string.end"
                    }
                },
                name: "string.quoted.single",
                patterns: [
                    {
                        include: "#string_escaped_char-c"
                    },
                    {
                        include: "#line_continuation_character"
                    }
                ]
            },
            {
                include: "#method_access"
            },
            {
                include: "#member_access"
            },
            {
                include: "$base"
            }
        ]
    },
    "preprocessor-rule-define-line-blocks" => {
        patterns: [
            {
                begin: "{",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.section.block.begin.bracket.curly"
                    }
                },
                end: "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
                endCaptures: {
                    "0" => {
                        name: "punctuation.section.block.end.bracket.curly"
                    }
                },
                patterns: [
                    {
                        include: "#preprocessor-rule-define-line-blocks"
                    },
                    {
                        include: "#preprocessor-rule-define-line-contents"
                    }
                ]
            },
            {
                include: "#preprocessor-rule-define-line-contents"
            }
        ]
    },
    "preprocessor-rule-define-line-functions" => {
        patterns: [
            {
                include: "#comments"
            },
            {
                include: "#storage_types"
            },
            {
                include: "#vararg_ellipses"
            },
            {
                include: "#method_access"
            },
            {
                include: "#member_access"
            },
            {
                include: "#operators"
            },
            {
                begin: "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|typeid|alignof|alignas|sizeof|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
                beginCaptures: {
                    "1" => {
                        name: "entity.name.function"
                    },
                    "2" => {
                        name: "punctuation.section.arguments.begin.bracket.round"
                    }
                },
                end: "(\\))|(?<!\\\\)(?=\\s*\\n)",
                endCaptures: {
                    "1" => {
                        name: "punctuation.section.arguments.end.bracket.round"
                    }
                },
                patterns: [
                    {
                        include: "#preprocessor-rule-define-line-functions"
                    }
                ]
            },
            {
                begin: "\\(",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.section.parens.begin.bracket.round"
                    }
                },
                end: "(\\))|(?<!\\\\)(?=\\s*\\n)",
                endCaptures: {
                    "1" => {
                        name: "punctuation.section.parens.end.bracket.round"
                    }
                },
                patterns: [
                    {
                        include: "#preprocessor-rule-define-line-functions"
                    }
                ]
            },
            {
                include: "#preprocessor-rule-define-line-contents"
            }
        ]
    },
    "function-innards-c" => {
        patterns: [
            attributes.to_tag,
            {
                include: "#comments"
            },
            {
                include: "#storage_types"
            },
            {
                include: "#operators"
            },
            {
                include: "#vararg_ellipses"
            },
            {
                name: "meta.function.definition.parameters",
                begin: "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|typeid|alignof|alignas|sizeof|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++ # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
                beginCaptures: {
                    "1" => {
                        name: "entity.name.function"
                    },
                    "2" => {
                        name: "punctuation.section.parameters.begin.bracket.round"
                    },
                },
                end: /\)|:/,
                endCaptures: {
                    "0" => {
                        name: "punctuation.section.parameters.end.bracket.round"
                    }
                },
                patterns: [
                    {
                        include: "#probably_a_parameter"
                    },
                    {
                        include: "#function-innards-c"
                    }
                ]
            },
            {
                begin: "\\(",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.section.parens.begin.bracket.round"
                    }
                },
                end: "\\)",
                endCaptures: {
                    "0" => {
                        name: "punctuation.section.parens.end.bracket.round"
                    }
                },
                patterns: [
                    {
                        include: "#function-innards-c"
                    }
                ]
            },
            {
                include: "$base"
            }
        ]
    },
    "function-call-innards-c" => {
        patterns: [
            attributes.to_tag,
            {
                include: "#comments"
            },
            {
                include: "#storage_types"
            },
            {
                include: "#method_access"
            },
            {
                include: "#member_access"
            },
            {
                include: "#operators"
            },
            {
                begin: "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|typeid|alignof|alignas|sizeof|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:new)\\s*(#{maybe(template_call.without_numbered_capture_groups)}) # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
                beginCaptures: {
                    "1" => {
                        name: "keyword.operator.wordlike memory keyword.operator.new"
                    },
                    "2" => {
                        patterns: [
                            {
                                include: "#template_call_innards"
                            }
                        ]
                    },
                    "3" => {
                        name: "punctuation.section.arguments.begin.bracket.round"
                    },
                },
                end: "\\)",
                endCaptures: {
                    "0" => {
                        name: "punctuation.section.arguments.end.bracket.round"
                    }
                },
                patterns: [
                    {
                        include: "#function-call-innards-c"
                    }
                ]
            },
            function_call.to_tag,
            {
                begin: "\\(",
                beginCaptures: {
                    "0" => {
                        name: "punctuation.section.parens.begin.bracket.round"
                    }
                },
                end: "\\)",
                endCaptures: {
                    "0" => {
                        name: "punctuation.section.parens.end.bracket.round"
                    }
                },
                patterns: [
                    {
                        include: "#function-call-innards-c"
                    }
                ]
            },
            {
                include: "#block_innards-c"
            }
        ]
    }
})


Dir.chdir __dir__

# Save
@syntax_location = "../syntaxes/cpp.tmLanguage"
cpp_grammar.saveAsYamlTo(@syntax_location)
cpp_grammar.saveAsJsonTo(@syntax_location)

# TODO, upgrade the code so this is not necessary
# for exporting to C
@cpp_grammar = cpp_grammar