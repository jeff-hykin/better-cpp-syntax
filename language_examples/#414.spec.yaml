- source: L_API
  scopes:
    - variable.snake-case
    - variable.other.unknown.L_API
- source: ALenum
  scopes:
    - variable.other.unknown.ALenum
- source: AL_APIENTRY
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: alGetError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: START_API_FUNC
  scopes:
    - variable.upper-case
    - variable.other.unknown.START_API_FUNC
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ContextRef
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - variable.lower-case
    - variable.other.object.construction
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: GetContextRef
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: UNLIKELY
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '!'
  scopes:
    - keyword.operator.logical
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: ALenum
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: deferror
  scopes:
    - variable.lower-case
    - variable.other.object.construction
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: AL_INVALID_OPERATION
  scopes:
    - variable.upper-case
    - variable.other.unknown.AL_INVALID_OPERATION
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: WARN
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Querying error state on null context (implicitly 0x
- source: '%04x'
  scopes:
    - constant.other.placeholder
- source: )
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: deferror
  scopes:
    - variable.lower-case
    - variable.other.unknown.deferror
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: TrapALError
  scopes:
    - variable.other.unknown.TrapALError
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '#'
  scopesBegin:
    - keyword.control.directive.conditional.ifdef
  scopes:
    - punctuation.definition.directive
- source: ifdef
  scopesEnd:
    - keyword.control.directive.conditional.ifdef
- source: _WIN32
  scopes:
    - meta.preprocessor.conditional
    - entity.name.other.preprocessor.macro.predefined._WIN32
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: IsDebuggerPresent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: DebugBreak
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '#'
  scopesBegin:
    - keyword.control.directive.elif
  scopes:
    - punctuation.definition.directive
- source: elif
  scopesEnd:
    - keyword.control.directive.elif
- source: defined
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: SIGTRAP
  scopes:
    - variable.upper-case
    - variable.other.unknown.SIGTRAP
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: raise
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: SIGTRAP
  scopes:
    - variable.upper-case
    - variable.other.unknown.SIGTRAP
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '#'
  scopesBegin:
    - keyword.control.directive.endif
  scopes:
    - punctuation.definition.directive
- source: endif
  scopesEnd:
    - keyword.control.directive.endif
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: deferror
  scopes:
    - variable.lower-case
    - variable.other.unknown.deferror
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: context
  scopes:
    - variable.lower-case
    - variable.other.object.access.context
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mLastError
  scopes:
    - variable.camel-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: exchange
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: AL_NO_ERROR
  scopes:
    - variable.upper-case
    - variable.other.unknown.AL_NO_ERROR
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: END_API_FUNC
  scopes:
    - variable.upper-case
    - variable.other.unknown.END_API_FUNC
