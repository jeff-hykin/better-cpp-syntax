- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: archive.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: derivations.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: eval-inline.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: eval.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: globals.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: json-to-value.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: names.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: store-api.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: util.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: json.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: value-to-json.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: value-to-xml.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: primops.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: boost/container/small_vector.hpp
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: sys/types.h
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: sys/stat.h
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: unistd.h
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: algorithm
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: cstring
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: regex
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: dlfcn.h
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: cmath
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: namespace
  scopesBegin:
    - meta.block.namespace
    - meta.head.namespace
  scopes:
    - keyword.other.namespace.definition
    - storage.type.namespace.definition
- source: nix
  scopes:
    - entity.name.namespace
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.namespace
  scopesEnd:
    - meta.head.namespace
- source: /*************************************************************
  scopesBegin:
    - meta.body.namespace
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * Miscellaneous'
- source: '*************************************************************/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: InvalidPathError
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: InvalidPathError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Path
  scopes:
    - variable.other.unknown.Path
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ' :'
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: path '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''' is not valid'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: StringMap
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: EvalState
  scopes:
    - entity.name.scope-resolution.function.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.definition
- source: realiseContext
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: PathSet
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: context
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: std
  scopesBegin:
    - meta.body.function.definition
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: vector
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: DerivedPath
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: Built
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: drvs
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: StringMap
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: res
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: i
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: ctx
  scopes:
    - variable.lower-case
    - variable.other.unknown.ctx
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: outputName
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputName
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: decodeContext
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: store
  scopes:
    - variable.lower-case
    - variable.other.unknown.store
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ctxS
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.access.store
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: printStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ctx
  scopes:
    - variable.lower-case
    - variable.other.unknown.ctx
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.access.store
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: isValidPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ctx
  scopes:
    - variable.lower-case
    - variable.other.unknown.ctx
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: InvalidPathError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.access.store
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: printStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ctx
  scopes:
    - variable.lower-case
    - variable.other.unknown.ctx
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: outputName
  scopes:
    - variable.camel-case
    - variable.other.object.access.outputName
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: ctx
  scopes:
    - variable.lower-case
    - variable.other.object.access.ctx
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isDerivation
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: drvs
  scopes:
    - variable.lower-case
    - variable.other.object.access.drvs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '{'
- source: ctx
  scopes:
    - variable.lower-case
    - variable.other.unknown.ctx
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' {'
- source: outputName
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputName
- source: '}}'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: res
  scopes:
    - variable.lower-case
    - variable.other.object.access.res
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert_or_assign
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ctxS
  scopes:
    - variable.camel-case
    - variable.other.unknown.ctxS
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ctxS
  scopes:
    - variable.camel-case
    - variable.other.unknown.ctxS
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: drvs
  scopes:
    - variable.lower-case
    - variable.other.object.access.drvs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: evalSettings
  scopes:
    - variable.camel-case
    - variable.other.object.access.evalSettings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: enableImportFromDerivation
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: cannot build '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: >-
    ' during evaluation because the option 'allow-import-from-derivation' is
    disabled
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.access.store
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: printStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: drvs
  scopes:
    - variable.lower-case
    - variable.other.object.access.drvs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: drvPath
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Build/substitute the context. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: vector
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: DerivedPath
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: buildReqs
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: d
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: drvs
  scopes:
    - variable.lower-case
    - variable.other.unknown.drvs
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: buildReqs
  scopes:
    - variable.camel-case
    - variable.other.object.access.buildReqs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emplace_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: DerivedPath
  scopes:
    - variable.other.unknown.DerivedPath
- source: ' { '
- source: d
  scopes:
    - variable.lower-case
    - variable.other.unknown.d
- source: ' }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.access.store
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: buildPaths
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: buildReqs
  scopes:
    - variable.camel-case
    - variable.other.unknown.buildReqs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Get all the output paths corresponding to the placeholders we had '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
    - meta.binding
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square.binding
- source: drvPath
  scopes:
    - variable.other.for
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: outputs
  scopes:
    - variable.other.for
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.binding
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
  scopesEnd:
    - meta.binding
- source: drvs
  scopes:
    - variable.lower-case
    - variable.other.unknown.drvs
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: outputPaths
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.access.store
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: queryDerivationOutputMap
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: drvPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvPath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: outputName
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.unknown.outputs
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: outputPath
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: get
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: outputPaths
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputPaths
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: outputName
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: outputPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputPath
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: derivation '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''' does not have an output named '''
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.access.store
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: printStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: drvPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvPath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: outputName
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputName
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: res
  scopes:
    - variable.lower-case
    - variable.other.object.access.res
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert_or_assign
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: downstreamPlaceholder
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: store
  scopes:
    - variable.lower-case
    - variable.other.unknown.store
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drvPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvPath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: outputName
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.access.store
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: printStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: outputPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputPath
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Add the output of this derivations to the allowed'
- source: '       paths. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: allowedPaths
  scopes:
    - variable.camel-case
    - variable.other.unknown.allowedPaths
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
    - meta.binding
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square.binding
- source: _placeholder
  scopes:
    - variable.other.for
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: outputPath
  scopes:
    - variable.other.for
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.binding
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
  scopesEnd:
    - meta.binding
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: allowPath
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.access.store
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: toRealPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: outputPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputPath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: struct
  scopesBegin:
    - meta.block.struct
  scopes:
    - meta.head.struct
    - storage.type.struct
- source: RealisePathFlags
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - meta.head.struct
    - punctuation.section.block.begin.bracket.curly.struct
- source: //
  scopesBegin:
    - meta.body.struct
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Whether to check that the path is allowed in pure eval mode'
  scopesEnd:
    - comment.line.double-slash
- source: bool
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: checkForPureEval
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: 'true'
  scopes:
    - constant.language.true
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: Path
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: realisePath
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: RealisePathFlags
  scopes:
    - entity.name.type.parameter
- source: flags
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: PathSet
  scopesBegin:
    - meta.body.function.definition
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: path
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator.bitwise
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Error
  scopes:
    - variable.other.unknown.Error
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: addTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: while realising the context of a path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: throw
  scopes:
    - keyword.control.throw
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: StringMap
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: rewrites
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: realiseContext
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: realPath
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: toRealPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: rewriteStrings
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rewrites
  scopes:
    - variable.lower-case
    - variable.other.unknown.rewrites
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: flags
  scopes:
    - variable.lower-case
    - variable.other.object.access.flags
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: checkForPureEval
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: checkSourcePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: realPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.realPath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: realPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.realPath
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Error
  scopes:
    - variable.other.unknown.Error
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: addTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: while realising the context of path '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: throw
  scopes:
    - keyword.control.throw
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Add and attribute to the given attribute map from the output name to'
- source: '   the output path, or a placeholder.'
- source: '   Where possible the path is used, but for floating CA derivations we'
- source: '   may not know it. For sake of determinism we always assume we don''t'
- source: '   and instead put in a place holder. In either case, however, the'
- source: '   string context will contain the drv path and output name, so'
- source: '   downstream derivations will have the proper dependency, and in'
- source: '   addition, before building, the placeholder will be rewritten to be'
- source: '   the actual path.'
- source: '   The ''drv'' and ''drvPath'' outputs must correspond. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: mkOutputString
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: BindingsBuilder
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: attrs
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: StorePath
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: drvPath
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: BasicDerivation
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: drv
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: std
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: pair
  scopes:
    - entity.name.type.parameter
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: DerivationOutput
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: '&'
  scopes:
    - storage.modifier.reference
- source: o
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: optOutputPath
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: o
  scopes:
    - variable.lower-case
    - variable.other.object.access.o
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: path
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: o
  scopes:
    - variable.lower-case
    - variable.other.object.access.o
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: o
  scopes:
    - variable.lower-case
    - variable.other.object.access.o
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: optOutputPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.optOutputPath
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: printStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: optOutputPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.optOutputPath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Downstream we would substitute this for an actual path once'
- source: '               we build the floating CA derivation '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
- source: /*
  scopes:
    - punctuation.definition.comment.begin
- source: ' FIXME: we need to depend on the basic derivation, not'
- source: '               derivation '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: downstreamPlaceholder
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drvPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvPath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: o
  scopes:
    - variable.lower-case
    - variable.other.object.access.o
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '        {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: o
  scopes:
    - variable.lower-case
    - variable.other.object.access.o
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: printStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: drvPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvPath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '}'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Load and evaluate an expression from path specified by the'
- source: '   argument. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: import
  scopes:
    - variable.lower-case
    - variable.other.unknown.import
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: EvalState
  scopes:
    - variable.other.unknown.EvalState
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - variable.other.unknown.PosIdx
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - variable.other.unknown.Value
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: vPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.vPath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - variable.other.unknown.Value
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: vScope
  scopes:
    - variable.camel-case
    - variable.other.unknown.vScope
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - variable.other.unknown.Value
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: path
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: realisePath
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.vPath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' FIXME'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: isValidDerivationInStore
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator.bitwise
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '->'
  scopes:
    - punctuation.definition.lambda.return-type
- source: 'std::optional<StorePath>'
  scopes:
    - storage.type.return-type.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: isStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: nullopt
  scopes:
    - variable.lower-case
    - variable.other.unknown.nullopt
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: storePath
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: parseStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: isValidPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: storePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.storePath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: isDerivation
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: nullopt
  scopes:
    - variable.lower-case
    - variable.other.unknown.nullopt
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: storePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.storePath
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.assignment
    - meta.function.definition.body.lambda
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: optStorePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.optStorePath
- source: '='
  scopes:
    - keyword.operator.assignment
- source: isValidDerivationInStore
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: storePath
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: optStorePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.optStorePath
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Derivation
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: drv
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: readDerivation
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: storePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.storePath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildBindings
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sDrvPath
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: '}'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sName
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: env
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: name
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: outputsVal
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sOutputs
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: outputsVal
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputsVal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: const
  scopesBegin:
    - meta.parens.control.for
    - meta.binding
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square.binding
- source: i
  scopes:
    - variable.other.for
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: o
  scopes:
    - variable.other.for
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.binding
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
  scopesEnd:
    - meta.binding
- source: enumerate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputs
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: mkOutputString
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.unknown.attrs
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: storePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.storePath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.unknown.drv
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: o
  scopes:
    - variable.lower-case
    - variable.other.unknown.o
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: outputsVal
  scopes:
    - variable.camel-case
    - variable.other.object.access.outputsVal
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: o
  scopes:
    - variable.lower-case
    - variable.other.object.access.o
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: w
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: w
  scopes:
    - variable.lower-case
    - variable.other.object.access.w
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.unknown.attrs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: vImportedDrvToDerivation
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: vImportedDrvToDerivation
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: allocRootValue
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: eval
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: parseExprFromString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: imported-drv-to-derivation.nix.gen.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.double.include
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopesBegin:
    - keyword.operator.arithmetic
- source: '*'
  scopesEnd:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: vImportedDrvToDerivation
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopesBegin:
    - keyword.operator.arithmetic
- source: '*'
  scopesEnd:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: vImportedDrvToDerivation
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkApp
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: vImportedDrvToDerivation
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: w
  scopes:
    - variable.lower-case
    - variable.other.unknown.w
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: corepkgsPrefix
  scopes:
    - variable.camel-case
    - variable.other.unknown.corepkgsPrefix
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: fetchurl.nix
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: eval
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: parseExprFromString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: fetchurl.nix.gen.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.double.include
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: vScope
  scopes:
    - variable.camel-case
    - variable.other.unknown.vScope
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: evalFile
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: vScope
  scopes:
    - variable.camel-case
    - variable.other.unknown.vScope
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Env
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: env
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocEnv
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: vScope
  scopes:
    - variable.camel-case
    - variable.other.object.access.vScope
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: env
  scopes:
    - variable.lower-case
    - variable.other.object.access.env
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: up
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: baseEnv
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: staticEnv
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: make_shared
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: StaticEnv
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'false'
  scopes:
    - constant.language.false
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: staticBaseEnv
  scopes:
    - variable.camel-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vScope
  scopes:
    - variable.camel-case
    - variable.other.object.access.vScope
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: unsigned
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: displ
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: attr
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: vScope
  scopes:
    - variable.camel-case
    - variable.other.object.access.vScope
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: staticEnv
  scopes:
    - variable.camel-case
    - variable.other.object.access.staticEnv
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: vars
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emplace_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: displ
  scopes:
    - variable.lower-case
    - variable.other.unknown.displ
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: env
  scopes:
    - variable.lower-case
    - variable.other.object.access.env
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: values
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: displ
  scopes:
    - variable.lower-case
    - variable.other.unknown.displ
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' No need to call staticEnv.sort(), because'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' args[0]->attrs is already sorted.'
  scopesEnd:
    - comment.line.double-slash
- source: printTalkative
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: evaluating file '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Expr
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: e
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: parseExprFromFile
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: resolveExprPath
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: staticEnv
  scopes:
    - variable.camel-case
    - variable.other.unknown.staticEnv
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: eval
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: env
  scopes:
    - variable.lower-case
    - variable.other.unknown.env
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_scopedImport
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: RegisterPrimOp
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
    - meta.initialization
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Info
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: '{'
  scopes:
    - punctuation.section.arguments.begin.bracket.curly.initializer
- source: .
  scopesBegin:
    - meta.initialization.parameter
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: name
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: scopedImport
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: .
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: arity
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: .
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: fun
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: EvalState
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: import
  scopes:
    - variable.lower-case
    - variable.other.unknown.import
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.initialization.parameter
    - meta.function.definition.body.lambda
- source: '}'
  scopes:
    - punctuation.section.arguments.end.bracket.curly.initializer
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
    - meta.initialization
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_import
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: import
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Load, parse and return the Nix expression in the file *path*. If'
- source: '      *path* is a directory, the file ` default.nix ` in that directory'
- source: '      is loaded. Evaluation aborts if the file doesn’t exist or contains'
- source: '      an incorrect Nix expression. `import` implements Nix’s module'
- source: '      system: you can put any Nix expression (such as a set or a'
- source: '      function) in a separate file, and use it from Nix expressions in'
- source: '      other files.'
- source: '      > **Note**'
- source: '      >'
- source: '      > Unlike some languages, `import` is a regular function in Nix.'
- source: '      > Paths using the angle bracket syntax (e.g., `import` *\<foo\>*)'
- source: '      > are [normal path values](language-values.md).'
- source: '      A Nix expression loaded by `import` must not contain any *free'
- source: '      variables* (identifiers that are not defined in the Nix expression'
- source: '      itself and are not built-in). Therefore, it cannot refer to'
- source: '      variables that are in scope at the call site. For instance, if you'
- source: '      have a calling expression'
- source: '      ```nix'
- source: '      rec {'
- source: '        x = 123;'
- source: '        y = import ./foo.nix;'
- source: '      }'
- source: '      ```'
- source: '      then the following `foo.nix` will give an error:'
- source: '      ```nix'
- source: '      x + 456'
- source: '      ```'
- source: '      since `x` is not in scope in `foo.nix`. If you want `x` to be'
- source: '      available in `foo.nix`, you should pass it as a function argument:'
- source: '      ```nix'
- source: '      rec {'
- source: '        x = 123;'
- source: '        y = import ./foo.nix x;'
- source: '      }'
- source: '      ```'
- source: '      and'
- source: '      ```nix'
- source: '      x: x + 456'
- source: '      ```'
- source: '      (The function argument doesn’t have to be called `x` in `foo.nix`;'
- source: '      any name would work.)'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: EvalState
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: import
  scopes:
    - variable.lower-case
    - variable.other.unknown.import
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Want reasonable symbol names, so extern C '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
- source: /*
  scopes:
    - punctuation.definition.comment.begin
- source: ' !!! Should we pass the Pos or the file name too? '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: extern
  scopesBegin:
    - meta.block.extern
    - meta.head.extern
  scopes:
    - storage.type.extern
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: C
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: typedef
  scopes:
    - keyword.other.typedef
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round.function.pointer
- source: '*'
  scopes:
    - punctuation.definition.function.pointer.dereference
- source: ValueInitializer
  scopes:
    - variable.other.definition.pointer.function
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.function.pointer
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.function.pointer
- source: EvalState
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.function.pointer
  scopesEnd:
    - meta.head.extern
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.extern
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Load a ValueInitializer from a DSO and return whatever it initializes '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_importNative
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: path
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: realisePath
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: sym
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: void
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: handle
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: dlopen
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.object.access.path
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: c_str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: RTLD_LAZY
  scopes:
    - variable.snake-case
    - variable.other.unknown.RTLD_LAZY
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: RTLD_LOCAL
  scopes:
    - variable.snake-case
    - variable.other.unknown.RTLD_LOCAL
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: handle
  scopes:
    - variable.lower-case
    - variable.other.unknown.handle
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: could not open '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''': '
- source: '%2%'
  scopes:
    - constant.other.placeholder
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: dlerror
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: dlerror
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ValueInitializer
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: func
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ValueInitializer
  scopes:
    - variable.other.unknown.ValueInitializer
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: dlsym
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: handle
  scopes:
    - variable.lower-case
    - variable.other.unknown.handle
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sym
  scopes:
    - variable.lower-case
    - variable.other.object.access.sym
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: c_str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: func
  scopes:
    - variable.lower-case
    - variable.other.unknown.func
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: char
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: message
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: dlerror
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: message
  scopes:
    - variable.lower-case
    - variable.other.unknown.message
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: could not load symbol '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''' from '''
- source: '%2%'
  scopes:
    - constant.other.placeholder
- source: ''': '
- source: '%3%'
  scopes:
    - constant.other.placeholder
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sym
  scopes:
    - variable.lower-case
    - variable.other.unknown.sym
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: message
  scopes:
    - variable.lower-case
    - variable.other.unknown.message
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: symbol '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''' from '''
- source: '%2%'
  scopes:
    - constant.other.placeholder
- source: ''' resolved to NULL when a function pointer was expected'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sym
  scopes:
    - variable.lower-case
    - variable.other.unknown.sym
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: func
  scopes:
    - variable.lower-case
    - variable.other.unknown.func
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' We don''t dlclose because v may be a primop referencing a function in the shared object file '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Execute a program and parse its output '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_exec
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: elems
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: count
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: at least one argument to 'exec' required
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: program
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: elems
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: toOwned
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Strings
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: commandArgs
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: <
  scopes:
    - keyword.operator.comparison
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: commandArgs
  scopes:
    - variable.camel-case
    - variable.other.object.access.commandArgs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: elems
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: toOwned
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: _
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.other.unknown._
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: realiseContext
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: Handle CA derivations'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: InvalidPathError
  scopes:
    - variable.other.unknown.InvalidPathError
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: cannot execute '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''', since path '''
- source: '%2%'
  scopes:
    - constant.other.placeholder
- source: ''' is not valid'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: program
  scopes:
    - variable.lower-case
    - variable.other.unknown.program
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: path
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: output
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: runProgram
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: program
  scopes:
    - variable.lower-case
    - variable.other.unknown.program
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'true'
  scopes:
    - constant.language.true
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: commandArgs
  scopes:
    - variable.camel-case
    - variable.other.unknown.commandArgs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Expr
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: parsed
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: base
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: parsed
  scopes:
    - variable.lower-case
    - variable.other.unknown.parsed
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: parseExprFromString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: output
  scopes:
    - variable.lower-case
    - variable.other.unknown.output
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: base
  scopes:
    - variable.lower-case
    - variable.other.object.access.base
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: file
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Error
  scopes:
    - variable.other.unknown.Error
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: addTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: While parsing the output from '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: program
  scopes:
    - variable.lower-case
    - variable.other.unknown.program
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: throw
  scopes:
    - keyword.control.throw
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: eval
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: parsed
  scopes:
    - variable.lower-case
    - variable.other.unknown.parsed
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Error
  scopes:
    - variable.other.unknown.Error
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: addTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: While evaluating the output from '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: program
  scopes:
    - variable.lower-case
    - variable.other.unknown.program
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: throw
  scopes:
    - keyword.control.throw
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return a string representing the type of the expression. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_typeOf
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: t
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: switch
  scopesBegin:
    - meta.block.switch
    - meta.head.switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.conditional.switch
  scopes:
    - punctuation.section.parens.begin.bracket.round.conditional.switch
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.conditional.switch
  scopesEnd:
    - meta.conditional.switch
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.switch
  scopesEnd:
    - meta.head.switch
- source: case
  scopesBegin:
    - meta.body.switch
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nInt
  scopes:
    - variable.camel-case
    - variable.other.unknown.nInt
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: int
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nBool
  scopes:
    - variable.camel-case
    - variable.other.unknown.nBool
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: bool
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nString
  scopes:
    - variable.camel-case
    - variable.other.unknown.nString
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.nPath
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nNull
  scopes:
    - variable.camel-case
    - variable.other.unknown.nNull
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'null'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nAttrs
  scopes:
    - variable.camel-case
    - variable.other.unknown.nAttrs
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: set
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nList
  scopes:
    - variable.camel-case
    - variable.other.unknown.nList
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nFunction
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFunction
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: lambda
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nExternal
  scopes:
    - variable.camel-case
    - variable.other.unknown.nExternal
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: '='
  scopes:
    - keyword.operator.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: external
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: typeOf
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nFloat
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFloat
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: float
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nThunk
  scopes:
    - variable.camel-case
    - variable.other.unknown.nThunk
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: abort
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.switch
  scopesEnd:
    - meta.block.switch
    - meta.body.switch
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_typeOf
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __typeOf
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return a string representing the type of the value *e*, namely'
- source: '      `"int"`, `"bool"`, `"string"`, `"path"`, `"null"`, `"set"`,'
- source: '      `"list"`, `"lambda"` or `"float"`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_typeOf
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_typeOf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Determine whether the argument is the null value. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_isNull
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nNull
  scopes:
    - variable.camel-case
    - variable.other.unknown.nNull
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_isNull
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: isNull
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if *e* evaluates to `null`, and `false` otherwise.'
- source: '      > **Warning**'
- source: '      >'
- source: '      > This function is *deprecated*; just write `e == null` instead.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_isNull
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_isNull
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Determine whether the argument is a function. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_isFunction
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nFunction
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFunction
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_isFunction
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __isFunction
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if *e* evaluates to a function, and `false` otherwise.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_isFunction
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_isFunction
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Determine whether the argument is an integer. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_isInt
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nInt
  scopes:
    - variable.camel-case
    - variable.other.unknown.nInt
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_isInt
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __isInt
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if *e* evaluates to an integer, and `false` otherwise.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_isInt
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_isInt
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Determine whether the argument is a float. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_isFloat
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nFloat
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFloat
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_isFloat
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __isFloat
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if *e* evaluates to a float, and `false` otherwise.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_isFloat
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_isFloat
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Determine whether the argument is a string. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_isString
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nString
  scopes:
    - variable.camel-case
    - variable.other.unknown.nString
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_isString
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __isString
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if *e* evaluates to a string, and `false` otherwise.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_isString
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_isString
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Determine whether the argument is a Boolean. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_isBool
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nBool
  scopes:
    - variable.camel-case
    - variable.other.unknown.nBool
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_isBool
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __isBool
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if *e* evaluates to a bool, and `false` otherwise.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_isBool
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_isBool
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Determine whether the argument is a path. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_isPath
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.nPath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_isPath
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __isPath
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if *e* evaluates to a path, and `false` otherwise.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_isPath
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_isPath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: struct
  scopesBegin:
    - meta.block.struct
  scopes:
    - meta.head.struct
    - storage.type.struct
- source: CompareValues
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - meta.head.struct
    - punctuation.section.block.begin.bracket.curly.struct
- source: EvalState
  scopesBegin:
    - meta.body.struct
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: CompareValues
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: state
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: state
  scopes:
    - meta.parameter.initialization
    - variable.lower-case
    - variable.other.unknown.state
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ()
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: Value
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: v1
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: v2
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nFloat
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFloat
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nInt
  scopes:
    - variable.camel-case
    - variable.other.unknown.nInt
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: fpoint
  scopes:
    - variable.other.property
- source: <
  scopes:
    - keyword.operator.comparison
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: integer
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nInt
  scopes:
    - variable.camel-case
    - variable.other.unknown.nInt
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nFloat
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFloat
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: integer
  scopes:
    - variable.other.property
- source: <
  scopes:
    - keyword.operator.comparison
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: fpoint
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'cannot compare '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ' with '
- source: '%2%'
  scopes:
    - constant.other.placeholder
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: showType
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.unknown.v1
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: showType
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.unknown.v2
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: switch
  scopesBegin:
    - meta.block.switch
    - meta.head.switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.conditional.switch
  scopes:
    - punctuation.section.parens.begin.bracket.round.conditional.switch
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.conditional.switch
  scopesEnd:
    - meta.conditional.switch
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.switch
  scopesEnd:
    - meta.head.switch
- source: case
  scopesBegin:
    - meta.body.switch
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nInt
  scopes:
    - variable.camel-case
    - variable.other.unknown.nInt
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: return
  scopes:
    - keyword.control.return
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: integer
  scopes:
    - variable.other.property
- source: <
  scopes:
    - keyword.operator.comparison
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: integer
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nFloat
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFloat
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: return
  scopes:
    - keyword.control.return
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: fpoint
  scopes:
    - variable.other.property
- source: <
  scopes:
    - keyword.operator.comparison
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: fpoint
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nString
  scopes:
    - variable.camel-case
    - variable.other.unknown.nString
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: return
  scopes:
    - keyword.control.return
- source: strcmp
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: string
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: s
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: string
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: s
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: <
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.nPath
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: return
  scopes:
    - keyword.control.return
- source: strcmp
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: path
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: path
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: <
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: nList
  scopes:
    - variable.camel-case
    - variable.other.unknown.nList
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Lexicographic comparison'
  scopesEnd:
    - comment.line.double-slash
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type
    - storage.type.built-in
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopesBegin:
    - punctuation.terminator.statement
- source: ;
  scopesEnd:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ++
  scopes:
    - keyword.operator.increment
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: eqValues
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: default
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.default
- source: ':'
  scopes:
    - punctuation.separator.colon.case.default
  scopesEnd:
    - meta.conditional.case
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'cannot compare '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ' with '
- source: '%2%'
  scopes:
    - constant.other.placeholder
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: showType
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.unknown.v1
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: showType
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.unknown.v2
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.switch
  scopesEnd:
    - meta.block.switch
    - meta.body.switch
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: '#'
  scopesBegin:
    - keyword.control.directive.conditional.if
  scopes:
    - punctuation.definition.directive
- source: if
  scopesEnd:
    - keyword.control.directive.conditional.if
- source: HAVE_BOEHMGC
  scopes:
    - meta.preprocessor.conditional
    - entity.name.function.preprocessor
- source: typedef
  scopes:
    - keyword.other.typedef
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: list
  scopes:
    - variable.lower-case
    - variable.other.unknown.list
- source: <
  scopes:
    - keyword.operator.comparison
- source: Value
  scopes:
    - variable.other.unknown.Value
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: gc_allocator
  scopes:
    - variable.snake-case
    - variable.other.unknown.gc_allocator
- source: <
  scopes:
    - keyword.operator.comparison
- source: Value
  scopes:
    - variable.other.unknown.Value
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: ValueList
  scopes:
    - variable.other.unknown.ValueList
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '#'
  scopesBegin:
    - keyword.control.directive.else
  scopes:
    - punctuation.definition.directive
- source: else
  scopesEnd:
    - keyword.control.directive.else
- source: typedef
  scopes:
    - keyword.other.typedef
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: list
  scopes:
    - variable.lower-case
    - variable.other.unknown.list
- source: <
  scopes:
    - keyword.operator.comparison
- source: Value
  scopes:
    - variable.other.unknown.Value
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ValueList
  scopes:
    - variable.other.unknown.ValueList
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '#'
  scopesBegin:
    - keyword.control.directive.endif
  scopes:
    - punctuation.definition.directive
- source: endif
  scopesEnd:
    - keyword.control.directive.endif
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: Bindings
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: iterator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: getAttr
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: string_view
  scopes:
    - entity.name.type.parameter
- source: funcName
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Symbol
  scopes:
    - entity.name.type.parameter
- source: attrSym
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Bindings
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: attrSet
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: Bindings
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: iterator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: value
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: attrSet
  scopes:
    - variable.camel-case
    - variable.other.object.access.attrSet
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrSym
  scopes:
    - variable.camel-case
    - variable.other.unknown.attrSym
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: attrSet
  scopes:
    - variable.camel-case
    - variable.other.object.access.attrSet
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: hintformat
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: errorMsg
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: attribute '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''' missing for call to '''
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: attrSym
  scopes:
    - variable.camel-case
    - variable.other.unknown.attrSym
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: funcName
  scopes:
    - variable.camel-case
    - variable.other.unknown.funcName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: aPos
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: attrSet
  scopes:
    - variable.camel-case
    - variable.other.object.access.attrSet
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: pos
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: aPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.aPos
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: TypeError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: errorMsg
  scopes:
    - variable.camel-case
    - variable.other.unknown.errorMsg
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: e
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: TypeError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: errorMsg
  scopes:
    - variable.camel-case
    - variable.other.unknown.errorMsg
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: aPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.aPos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Adding another trace for the function name to make it clear'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' which call received wrong arguments.'
  scopesEnd:
    - comment.line.double-slash
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: addTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: while invoking '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: funcName
  scopes:
    - variable.camel-case
    - variable.other.unknown.funcName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_genericClosure
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Get the start set. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: Bindings
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: iterator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: startSet
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: getAttr
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: genericClosure
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sStartSet
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: startSet
  scopes:
    - variable.camel-case
    - variable.other.object.access.startSet
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ValueList
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: workSet
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: elem
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: startSet
  scopes:
    - variable.camel-case
    - variable.other.object.access.startSet
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: workSet
  scopes:
    - variable.camel-case
    - variable.other.object.access.workSet
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Get the operator. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: Bindings
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: iterator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: op
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: getAttr
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: genericClosure
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sOperator
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: op
  scopes:
    - variable.lower-case
    - variable.other.object.access.op
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Construct the closure by applying the operator to element of'
- source: '       `workSet'', adding the result to `workSet'', continuing until'
- source: '       no new elements are found. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: ValueList
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: res
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' `doneKeys'' doesn''t need to be a GC root, because its values are'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' reachable from res.'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: cmp
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: CompareValues
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: set
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: decltype
  scopes:
    - keyword.operator.functionlike
    - keyword.other.decltype
    - storage.type.decltype
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.decltype
- source: cmp
  scopes:
    - meta.arguments.decltype
    - variable.lower-case
    - variable.other.unknown.cmp
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.decltype
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: doneKeys
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: cmp
  scopes:
    - variable.lower-case
    - variable.other.unknown.cmp
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: workSet
  scopes:
    - variable.camel-case
    - variable.other.object.access.workSet
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Value
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: e
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: workSet
  scopes:
    - variable.camel-case
    - variable.other.object.access.workSet
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: workSet
  scopes:
    - variable.camel-case
    - variable.other.object.access.workSet
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pop_front
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Bindings
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: iterator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: key
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sKey
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: key
  scopes:
    - variable.lower-case
    - variable.other.unknown.key
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: attribute 'key' required
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: key
  scopes:
    - variable.lower-case
    - variable.other.object.access.key
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: doneKeys
  scopes:
    - variable.camel-case
    - variable.other.object.access.doneKeys
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: key
  scopes:
    - variable.lower-case
    - variable.other.object.access.key
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: res
  scopes:
    - variable.lower-case
    - variable.other.object.access.res
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Call the `operator'' function with `e'' as argument. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: call
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: call
  scopes:
    - variable.lower-case
    - variable.other.object.access.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkApp
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: op
  scopes:
    - variable.lower-case
    - variable.other.object.access.op
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: call
  scopes:
    - variable.lower-case
    - variable.other.unknown.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Add the values returned by the operator to the work set. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: elem
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: call
  scopes:
    - variable.lower-case
    - variable.other.object.access.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: workSet
  scopes:
    - variable.camel-case
    - variable.other.object.access.workSet
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Create the result list. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: res
  scopes:
    - variable.lower-case
    - variable.other.object.access.res
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: unsigned
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: i
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_genericClosure
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: RegisterPrimOp
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
    - meta.initialization
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Info
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: '{'
  scopes:
    - punctuation.section.arguments.begin.bracket.curly.initializer
- source: .
  scopesBegin:
    - meta.initialization.parameter
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: name
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __genericClosure
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: .
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: args
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: attrset
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.initialization.parameter
    - string.quoted.double
- source: '}'
  scopes:
    - punctuation.section.arguments.end.bracket.curly.initializer
  scopesEnd:
    - meta.initialization
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: arity
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Take an *attrset* with values named `startSet` and `operator` in order to'
- source: '      return a *list of attrsets* by starting with the `startSet`, recursively'
- source: '      applying the `operator` function to each element. The *attrsets* in the'
- source: '      `startSet` and produced by the `operator` must each contain value named'
- source: '      `key` which are comparable to each other. The result is produced by'
- source: '      repeatedly calling the operator for each element encountered with a'
- source: '      unique key, terminating when no new elements are produced. For example,'
- source: '      ```'
- source: '      builtins.genericClosure {'
- source: '        startSet = [ {key = 5;} ];'
- source: '        operator = item: [{'
- source: '          key = if (item.key / 2 ) * 2 == item.key'
- source: '               then item.key / 2'
- source: '               else 3 * item.key + 1;'
- source: '        }];'
- source: '      }'
- source: '      ```'
- source: '      evaluates to'
- source: '      ```'
- source: '      [ { key = 5; } { key = 16; } { key = 8; } { key = 4; } { key = 2; } { key = 1; } ]'
- source: '      ```'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_genericClosure
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_genericClosure
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_break
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: break
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: v
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      In debug mode (enabled using `--debugger`), pause Nix expression evaluation and enter the REPL.'
- source: '      Otherwise, return the argument `v`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: EvalState
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugRepl
  scopes:
    - variable.other.property
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugTraces
  scopes:
    - variable.camel-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: error
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ErrorInfo
  scopes:
    - variable.other.unknown.ErrorInfo
- source: ' {'
- source: '                .'
- source: level
  scopes:
    - variable.lower-case
    - variable.other.unknown.level
- source: '='
  scopes:
    - keyword.operator.assignment
- source: lvlInfo
  scopes:
    - variable.camel-case
    - variable.other.unknown.lvlInfo
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: breakpoint reached
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: dt
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugTraces
  scopes:
    - variable.camel-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: front
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: runDebugRepl
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: error
  scopes:
    - variable.lower-case
    - variable.other.unknown.error
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: dt
  scopes:
    - variable.lower-case
    - variable.other.object.access.dt
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: env
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: dt
  scopes:
    - variable.lower-case
    - variable.other.object.access.dt
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: expr
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugQuit
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' If the user elects to quit the repl, throw an exception.'
  scopesEnd:
    - comment.line.double-slash
- source: throw
  scopes:
    - keyword.control.throw
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ErrorInfo
  scopes:
    - variable.other.unknown.ErrorInfo
- source: '{'
- source: '                    .'
- source: level
  scopes:
    - variable.lower-case
    - variable.other.unknown.level
- source: '='
  scopes:
    - keyword.operator.assignment
- source: lvlInfo
  scopes:
    - variable.camel-case
    - variable.other.unknown.lvlInfo
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                    .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: quit the debugger
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                    .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: noPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.noPos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Return the value we were passed.'
  scopesEnd:
    - comment.line.double-slash
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_abort
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: abort
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Abort Nix expression evaluation and print the error message *s*.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: EvalState
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: toOwned
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: Abort
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'evaluation aborted with the following error message: '''
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_throw
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: throw
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Throw an error message *s*. This usually aborts Nix expression'
- source: '      evaluation, but in `nix-env -qa` and other commands that try to'
- source: '      evaluate a set of derivations to get information about those'
- source: '      derivations, a derivation that throws an error is silently skipped'
- source: '      (which is not the case for `abort`).'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: EvalState
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: toOwned
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ThrownError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_addErrorContext
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: try
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Error
  scopes:
    - variable.other.unknown.Error
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: addTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: nullopt
  scopes:
    - variable.lower-case
    - variable.other.unknown.nullopt
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: toOwned
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: throw
  scopes:
    - keyword.control.throw
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_addErrorContext
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: RegisterPrimOp
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
    - meta.initialization
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Info
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: '{'
  scopes:
    - punctuation.section.arguments.begin.bracket.curly.initializer
- source: .
  scopesBegin:
    - meta.initialization.parameter
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: name
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __addErrorContext
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: .
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: arity
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: .
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: fun
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_addErrorContext
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_addErrorContext
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.initialization.parameter
- source: '}'
  scopes:
    - punctuation.section.arguments.end.bracket.curly.initializer
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
    - meta.initialization
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_ceil
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: value
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: determinePos
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ceil
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_ceil
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __ceil
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: double
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '        Converts an IEEE-754 double-precision floating-point number (*double*) to'
- source: '        the next higher integer.'
- source: '        If the datatype is neither an integer nor a "float", an evaluation error will be'
- source: '        thrown.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_ceil
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_ceil
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_floor
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: value
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: determinePos
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: floor
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_floor
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __floor
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: double
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '        Converts an IEEE-754 double-precision floating-point number (*double*) to'
- source: '        the next lower integer.'
- source: '        If the datatype is neither an integer nor a "float", an evaluation error will be'
- source: '        thrown.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_floor
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_floor
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Try evaluating the argument. Success => {success=true; value=something;},'
- source: ' * else => {success=false; value=false;} '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_tryEval
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildBindings
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sValue
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: success
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: AssertionError
  scopes:
    - variable.other.unknown.AssertionError
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sValue
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: success
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.unknown.attrs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_tryEval
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __tryEval
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Try to shallowly evaluate *e*. Return a set containing the'
- source: '      attributes `success` (`true` if *e* evaluated successfully,'
- source: '      `false` if an error was thrown) and `value`, equalling *e* if'
- source: '      successful and `false` otherwise. `tryEval` will only prevent'
- source: '      errors created by `throw` or `assert` from being thrown.'
- source: '      Errors `tryEval` will not catch are for example those created'
- source: '      by `abort` and type errors generated by builtins. Also note that'
- source: '      this doesn''t evaluate *e* deeply, so `let e = { x = throw ""; };'
- source: '      in (builtins.tryEval e).success` will be `true`. Using'
- source: '      `builtins.deepSeq` one can get the expected result:'
- source: '      `let e = { x = throw ""; }; in'
- source: '      (builtins.tryEval (builtins.deepSeq e e)).success` will be'
- source: '      `false`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_tryEval
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_tryEval
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return an environment variable.  Use with care. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_getEnv
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: std
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: name
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: evalSettings
  scopes:
    - variable.camel-case
    - variable.other.object.access.evalSettings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: restrictEval
  scopes:
    - variable.other.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: evalSettings
  scopes:
    - variable.camel-case
    - variable.other.object.access.evalSettings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pureEval
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: getEnv
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value_or
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_getEnv
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __getEnv
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      `getEnv` returns the value of the environment variable *s*, or an'
- source: '      empty string if the variable doesn’t exist. This function should be'
- source: '      used with care, as it can introduce all sorts of nasty environment'
- source: '      dependencies in your Nix expression.'
- source: '      `getEnv` is used in Nix Packages to locate the file'
- source: '      `~/.nixpkgs/config.nix`, which contains user-local settings for Nix'
- source: '      Packages. (That is, it does a `getEnv "HOME"` to locate the user’s'
- source: '      home directory.)'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_getEnv
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_getEnv
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Evaluate the first argument, then return the second argument. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_seq
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_seq
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __seq
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Evaluate *e1*, then evaluate and return *e2*. This ensures that a'
- source: '      computation is strict in the value of *e1*.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_seq
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Evaluate the first argument deeply (i.e. recursing into lists and'
- source: '   attrsets), then return the second argument. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_deepSeq
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValueDeep
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_deepSeq
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __deepSeq
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      This is like `seq e1 e2`, except that *e1* is evaluated *deeply*:'
- source: '      if it’s a list or set, its elements or attributes are also'
- source: '      evaluated recursively.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_deepSeq
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_deepSeq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Evaluate the first expression and print it on standard error.  Then'
- source: '   return the second expression.  Useful for debugging. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_trace
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nString
  scopes:
    - variable.camel-case
    - variable.other.unknown.nString
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: printError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'trace: '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: string
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: s
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: printError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'trace: '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: printValue
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_trace
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __trace
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Evaluate *e1* and print its abstract syntax representation on'
- source: '      standard error. Then return *e2*. This function is useful for'
- source: '      debugging.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_trace
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_trace
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*************************************************************
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * Derivations'
- source: '*************************************************************/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Construct (as a unobservable side effect) a Nix derivation'
- source: '   expression that performs the derivation described by the argument'
- source: '   set.  Returns the original set extended with the following'
- source: '   attributes: `outPath'' containing the primary output path of the'
- source: '   derivation; `drvPath'' containing the path of the Nix expression;'
- source: '   and `type'' set to `derivation'' to indicate that this is a'
- source: '   derivation. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_derivationStrict
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Figure out the name first (for stack backtraces). '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: Bindings
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: iterator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: attr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: getAttr
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: derivationStrict
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sName
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: drvName
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: posDrvName
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: pos
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: drvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvName
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Error
  scopes:
    - variable.other.unknown.Error
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: addTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: while evaluating the derivation attribute 'name'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: throw
  scopes:
    - keyword.control.throw
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Check whether attributes should be passed as a JSON file. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: ostringstream
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: jsonBuf
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: unique_ptr
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: JSONObject
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: jsonObject
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.unknown.attr
- source: '='
  scopes:
    - keyword.operator.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sStructuredAttrs
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.unknown.attr
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: jsonObject
  scopes:
    - variable.camel-case
    - variable.other.unknown.jsonObject
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: make_unique
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: JSONObject
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: jsonBuf
  scopes:
    - variable.camel-case
    - variable.other.unknown.jsonBuf
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Check whether null attributes should be ignored. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: bool
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ignoreNulls
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: 'false'
  scopes:
    - constant.language.false
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.unknown.attr
- source: '='
  scopes:
    - keyword.operator.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sIgnoreNulls
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.unknown.attr
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ignoreNulls
  scopes:
    - variable.camel-case
    - variable.other.unknown.ignoreNulls
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Build the derivation expression by processing the attributes. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: Derivation
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: drv
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: drvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvName
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: contentAddressed
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: 'false'
  scopes:
    - constant.language.false
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: isImpure
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: 'false'
  scopes:
    - constant.language.false
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: optional
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: outputHash
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: outputHashAlgo
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: optional
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: FileIngestionMethod
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: ingestionMethod
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: StringSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: outputs
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.access.outputs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: out
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: i
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: lexicographicOrder
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sIgnoreNulls
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: key
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: vomit
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: processing attribute '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: key
  scopes:
    - variable.lower-case
    - variable.other.unknown.key
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: handleHashMode
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator.bitwise
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: const
  scopesBegin:
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: std
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: string_view
  scopes:
    - entity.name.type.parameter
- source: s
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: recursive
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ingestionMethod
  scopes:
    - variable.camel-case
    - variable.other.unknown.ingestionMethod
- source: '='
  scopes:
    - keyword.operator.assignment
- source: FileIngestionMethod
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Recursive
  scopes:
    - variable.other.unknown.Recursive
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: flat
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ingestionMethod
  scopes:
    - variable.camel-case
    - variable.other.unknown.ingestionMethod
- source: '='
  scopes:
    - keyword.operator.assignment
- source: FileIngestionMethod
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Flat
  scopes:
    - variable.other.unknown.Flat
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                    .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: invalid value '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''' for ''outputHashMode'' attribute'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                    .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '                }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.assignment
    - meta.function.definition.body.lambda
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: handleOutputs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator.bitwise
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: const
  scopesBegin:
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Strings
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: ss
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.access.outputs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: clear
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: j
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: ss
  scopes:
    - variable.lower-case
    - variable.other.unknown.ss
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.access.outputs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: j
  scopes:
    - variable.lower-case
    - variable.other.unknown.j
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.access.outputs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                        .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: duplicate derivation output '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: j
  scopes:
    - variable.lower-case
    - variable.other.unknown.j
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                        .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '                    }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' !!! Check whether j is a valid attribute'
- source: '                   name. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
- source: /*
  scopes:
    - punctuation.definition.comment.begin
- source: ' Derivations cannot be named ‘drv’, because'
- source: '                   then we''d have an attribute ‘drvPath’ in'
- source: '                   the resulting set. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: j
  scopes:
    - variable.lower-case
    - variable.other.unknown.j
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: drv
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                        .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: invalid derivation output name 'drv'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                        .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '                    }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.access.outputs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: j
  scopes:
    - variable.lower-case
    - variable.other.unknown.j
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.access.outputs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                    .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: derivation cannot have an empty set of outputs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                    .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '                }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.assignment
    - meta.function.definition.body.lambda
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ignoreNulls
  scopes:
    - variable.camel-case
    - variable.other.unknown.ignoreNulls
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nNull
  scopes:
    - variable.camel-case
    - variable.other.unknown.nNull
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sContentAddressed
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: contentAddressed
  scopes:
    - variable.camel-case
    - variable.other.unknown.contentAddressed
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: contentAddressed
  scopes:
    - variable.camel-case
    - variable.other.unknown.contentAddressed
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: settings
  scopes:
    - variable.lower-case
    - variable.other.object.access.settings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: requireExperimentalFeature
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: Xp
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: CaDerivations
  scopes:
    - variable.other.unknown.CaDerivations
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sImpure
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: isImpure
  scopes:
    - variable.camel-case
    - variable.other.unknown.isImpure
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: isImpure
  scopes:
    - variable.camel-case
    - variable.other.unknown.isImpure
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: settings
  scopes:
    - variable.lower-case
    - variable.other.object.access.settings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: requireExperimentalFeature
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: Xp
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: ImpureDerivations
  scopes:
    - variable.other.unknown.ImpureDerivations
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' The `args'' attribute is special: it supplies the'
- source: '               command-line arguments to the builder. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sArgs
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: elem
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: toOwned
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: args
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' All other attributes are passed to the builder through'
- source: '               the environment. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: jsonObject
  scopes:
    - variable.camel-case
    - variable.other.unknown.jsonObject
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sStructuredAttrs
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: placeholder
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: jsonObject
  scopes:
    - variable.camel-case
    - variable.other.object.access.jsonObject
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: placeholder
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: key
  scopes:
    - variable.lower-case
    - variable.other.unknown.key
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: printValueAsJSON
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'true'
  scopes:
    - constant.language.true
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: placeholder
  scopes:
    - variable.lower-case
    - variable.other.unknown.placeholder
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sBuilder
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: builder
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sSystem
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: platform
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sOutputHash
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: outputHash
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputHash
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sOutputHashAlgo
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: outputHashAlgo
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputHashAlgo
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sOutputHashMode
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: handleHashMode
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sOutputs
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Require ‘outputs’ to be a list of strings. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Strings
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ss
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: elem
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ss
  scopes:
    - variable.lower-case
    - variable.other.object.access.ss
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emplace_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: handleOutputs
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ss
  scopes:
    - variable.lower-case
    - variable.other.unknown.ss
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: pos
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: toOwned
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: env
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emplace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: key
  scopes:
    - variable.lower-case
    - variable.other.unknown.key
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sBuilder
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: builder
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sSystem
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: platform
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sOutputHash
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: outputHash
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputHash
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sOutputHashAlgo
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: outputHashAlgo
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputHashAlgo
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sOutputHashMode
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: handleHashMode
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sOutputs
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: handleOutputs
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: tokenizeString
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Strings
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Error
  scopes:
    - variable.other.unknown.Error
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: addTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: while evaluating the attribute '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''' of the derivation '''
- source: '%2%'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: key
  scopes:
    - variable.lower-case
    - variable.other.unknown.key
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: throw
  scopes:
    - keyword.control.throw
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: jsonObject
  scopes:
    - variable.camel-case
    - variable.other.unknown.jsonObject
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: jsonObject
  scopes:
    - variable.camel-case
    - variable.other.object.access.jsonObject
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: reset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: env
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emplace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __json
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: jsonBuf
  scopes:
    - variable.camel-case
    - variable.other.object.access.jsonBuf
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Everything in the context of the strings in the derivation'
- source: '       attributes should be added as dependencies of the resulting'
- source: '       derivation. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: path
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Paths marked with `='' denote that the path of a derivation'
- source: '           is explicitly passed to the builder.  Since that allows the'
- source: '           builder to gain access to every path in the dependency'
- source: '           graph of the derivation (including all outputs), all paths'
- source: '           in the graph must be added to this derivation''s list of'
- source: '           inputs to ensure that they are available when the builder'
- source: '           runs. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: path
  scopes:
    - variable.lower-case
    - variable.other.object.access.path
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '='
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' !!! This doesn''t work if readOnlyMode is set. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: StorePathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: refs
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: computeFSClosure
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: parseStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: string_view
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: refs
  scopes:
    - variable.lower-case
    - variable.other.unknown.refs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: j
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: refs
  scopes:
    - variable.lower-case
    - variable.other.unknown.refs
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: inputSrcs
  scopes:
    - variable.camel-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: j
  scopes:
    - variable.lower-case
    - variable.other.unknown.j
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: j
  scopes:
    - variable.lower-case
    - variable.other.object.access.j
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isDerivation
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: inputDrvs
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: j
  scopes:
    - variable.lower-case
    - variable.other.unknown.j
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: readDerivation
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: j
  scopes:
    - variable.lower-case
    - variable.other.unknown.j
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputNames
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Handle derivation outputs of the form ‘!<name>!<path>’. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: path
  scopes:
    - variable.lower-case
    - variable.other.object.access.path
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '!'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ctx
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: decodeContext
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: inputDrvs
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: ctx
  scopes:
    - variable.lower-case
    - variable.other.object.access.ctx
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ctx
  scopes:
    - variable.lower-case
    - variable.other.object.access.ctx
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Otherwise it''s a source file. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: else
  scopes:
    - keyword.control.else
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: inputSrcs
  scopes:
    - variable.camel-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: parseStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Do we have all required attributes? '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: builder
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: required attribute 'builder' missing
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: platform
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: required attribute 'system' missing
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Check whether the derivation name is valid. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: isDerivation
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: drvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: derivation names are not allowed to end in '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drvExtension
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvExtension
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: outputHash
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputHash
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Handle fixed-output derivations.'
- source: '           Ignore `__contentAddressed` because fixed output derivations are'
- source: '           already content addressed. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.access.outputs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.access.outputs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: out
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: multiple outputs are not supported in fixed-output derivations
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: h
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: newHashAllowEmpty
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: outputHash
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputHash
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: parseHashTypeOpt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: outputHashAlgo
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputHashAlgo
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: method
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: ingestionMethod
  scopes:
    - variable.camel-case
    - variable.other.object.access.ingestionMethod
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value_or
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: FileIngestionMethod
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Flat
  scopes:
    - variable.other.unknown.Flat
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: outPath
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: makeFixedOutputPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: method
  scopes:
    - variable.lower-case
    - variable.other.unknown.method
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: h
  scopes:
    - variable.lower-case
    - variable.other.unknown.h
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: env
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: out
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: printStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: outPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.outPath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert_or_assign
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: out
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: DerivationOutput
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: CAFixed
  scopes:
    - variable.other.unknown.CAFixed
- source: ' {'
- source: '                .'
- source: hash
  scopes:
    - variable.lower-case
    - variable.other.unknown.hash
- source: '='
  scopes:
    - keyword.operator.assignment
- source: FixedOutputHash
  scopes:
    - variable.other.unknown.FixedOutputHash
- source: ' {'
- source: '                    .'
- source: method
  scopes:
    - variable.lower-case
    - variable.other.unknown.method
- source: '='
  scopes:
    - keyword.operator.assignment
- source: method
  scopes:
    - variable.lower-case
    - variable.other.unknown.method
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                    .'
- source: hash
  scopes:
    - variable.lower-case
    - variable.other.unknown.hash
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: h
  scopes:
    - variable.lower-case
    - variable.other.unknown.h
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                }'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: contentAddressed
  scopes:
    - variable.camel-case
    - variable.other.unknown.contentAddressed
- source: '||'
  scopes:
    - keyword.operator.logical
- source: isImpure
  scopes:
    - variable.camel-case
    - variable.other.unknown.isImpure
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: contentAddressed
  scopes:
    - variable.camel-case
    - variable.other.unknown.contentAddressed
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: isImpure
  scopes:
    - variable.camel-case
    - variable.other.unknown.isImpure
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: throw
  scopes:
    - keyword.control.throw
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: derivation cannot be both content-addressed and impure
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ht
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: parseHashTypeOpt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: outputHashAlgo
  scopes:
    - variable.camel-case
    - variable.other.unknown.outputHashAlgo
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value_or
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: htSHA256
  scopes:
    - variable.camel-case
    - variable.other.unknown.htSHA256
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: method
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: ingestionMethod
  scopes:
    - variable.camel-case
    - variable.other.object.access.ingestionMethod
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value_or
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: FileIngestionMethod
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Recursive
  scopes:
    - variable.other.unknown.Recursive
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: i
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.unknown.outputs
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: env
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hashPlaceholder
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: isImpure
  scopes:
    - variable.camel-case
    - variable.other.unknown.isImpure
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert_or_assign
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: DerivationOutput
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Impure
  scopes:
    - variable.other.unknown.Impure
- source: ' {'
- source: '                        .'
- source: method
  scopes:
    - variable.lower-case
    - variable.other.unknown.method
- source: '='
  scopes:
    - keyword.operator.assignment
- source: method
  scopes:
    - variable.lower-case
    - variable.other.unknown.method
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                        .'
- source: hashType
  scopes:
    - variable.camel-case
    - variable.other.unknown.hashType
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ht
  scopes:
    - variable.lower-case
    - variable.other.unknown.ht
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                    }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert_or_assign
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: DerivationOutput
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: CAFloating
  scopes:
    - variable.other.unknown.CAFloating
- source: ' {'
- source: '                        .'
- source: method
  scopes:
    - variable.lower-case
    - variable.other.unknown.method
- source: '='
  scopes:
    - keyword.operator.assignment
- source: method
  scopes:
    - variable.lower-case
    - variable.other.unknown.method
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                        .'
- source: hashType
  scopes:
    - variable.camel-case
    - variable.other.unknown.hashType
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ht
  scopes:
    - variable.lower-case
    - variable.other.unknown.ht
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                    }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Compute a hash over the "masked" store derivation, which is'
- source: '           the final one except that in the list of outputs, the'
- source: '           output paths are empty strings, and the corresponding'
- source: '           environment variables have an empty value.  This ensures'
- source: '           that changes in the set of output names do get reflected in'
- source: '           the hash. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: i
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.unknown.outputs
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: env
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert_or_assign
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: DerivationOutput
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Deferred
  scopes:
    - variable.other.unknown.Deferred
- source: ' { }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: hashModulo
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: hashDerivationModulo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Derivation
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.unknown.drv
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: switch
  scopesBegin:
    - meta.block.switch
    - meta.head.switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.conditional.switch
  scopes:
    - punctuation.section.parens.begin.bracket.round.conditional.switch
- source: hashModulo
  scopes:
    - variable.camel-case
    - variable.other.object.access.hashModulo
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: kind
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.conditional.switch
  scopesEnd:
    - meta.conditional.switch
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.switch
  scopesEnd:
    - meta.head.switch
- source: case
  scopesBegin:
    - meta.body.switch
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: DrvHash
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Kind
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Regular
  scopes:
    - variable.other.unknown.Regular
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: i
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.unknown.outputs
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: h
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: get
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: hashModulo
  scopes:
    - variable.camel-case
    - variable.other.object.access.hashModulo
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: hashes
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: h
  scopes:
    - variable.lower-case
    - variable.other.unknown.h
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: throw
  scopes:
    - keyword.control.throw
- source: AssertionError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                        .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: derivation produced no hash for output '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                        .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: posDrvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.posDrvName
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                    }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: outPath
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: makeOutputPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: h
  scopes:
    - variable.lower-case
    - variable.other.unknown.h
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: env
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: printStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: outPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.outPath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert_or_assign
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: DerivationOutputInputAddressed
  scopes:
    - variable.other.unknown.DerivationOutputInputAddressed
- source: ' {'
- source: '                        .'
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: outPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.outPath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                    }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopesBegin:
    - punctuation.terminator.statement
- source: ;
  scopesEnd:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: DrvHash
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Kind
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Deferred
  scopes:
    - variable.other.unknown.Deferred
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: i
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.unknown.outputs
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert_or_assign
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: DerivationOutputDeferred
  scopes:
    - variable.other.unknown.DerivationOutputDeferred
- source: ' {}'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.switch
  scopesEnd:
    - meta.block.switch
    - meta.body.switch
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Write the resulting term into the Nix store directory. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: drvPath
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: writeDerivation
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.unknown.drv
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: repair
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: drvPathS
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: printStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: drvPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvPath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: printMsg
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: lvlChatty
  scopes:
    - variable.camel-case
    - variable.other.unknown.lvlChatty
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: instantiated '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''' -> '''
- source: '%2%'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drvName
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvName
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drvPathS
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvPathS
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Optimisation, but required in read-only mode! because in that'
- source: '       case we don''t actually write store derivations, so we can''t'
- source: '       read them later. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: h
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: hashDerivationModulo
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.unknown.drv
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: drvHashes
  scopes:
    - variable.camel-case
    - variable.other.object.access.drvHashes
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: lock
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: insert_or_assign
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: drvPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvPath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: h
  scopes:
    - variable.lower-case
    - variable.other.unknown.h
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildBindings
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sDrvPath
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: drvPathS
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvPathS
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: drvPathS
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvPathS
- source: '}'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: i
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.object.access.drv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: outputs
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: mkOutputString
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.unknown.attrs
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drvPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.drvPath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: drv
  scopes:
    - variable.lower-case
    - variable.other.unknown.drv
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.unknown.attrs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_derivationStrict
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: RegisterPrimOp
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
    - meta.initialization
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Info
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: '{'
  scopes:
    - punctuation.section.arguments.begin.bracket.curly.initializer
- source: .
  scopesBegin:
    - meta.initialization.parameter
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: name
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: derivationStrict
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: .
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: arity
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: .
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: fun
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_derivationStrict
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_derivationStrict
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.initialization.parameter
- source: '}'
  scopes:
    - punctuation.section.arguments.end.bracket.curly.initializer
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
    - meta.initialization
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return a placeholder string for the specified output that will be'
- source: '   substituted by the corresponding output path at build time. For'
- source: '   example, ''placeholder "out"'' returns the string'
- source: '   /1rz4g4znpzjwh1xymhjpm42vipw92pr73vdgl6xs1hycac8kf2n9. At build'
- source: '   time, any occurrence of this string in an derivation attribute will'
- source: '   be replaced with the concrete path in the Nix store of the output'
- source: '   ‘out’. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_placeholder
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: v
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: hashPlaceholder
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_placeholder
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: placeholder
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: output
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return a placeholder string for the specified *output* that will be'
- source: '      substituted by the corresponding output path at build time. Typical'
- source: '      outputs would be `"out"`, `"bin"` or `"dev"`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_placeholder
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_placeholder
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*************************************************************
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * Paths'
- source: '*************************************************************/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Convert the argument to a path.  !!! obsolete? '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_toPath
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: PathSet
  scopesBegin:
    - meta.body.function.definition
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Path
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: path
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: canonPath
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_toPath
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __toPath
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      **DEPRECATED.** Use `/. + "/path"` to convert a string into an absolute'
- source: '      path. For relative paths, use `./. + "/path"`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_toPath
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_toPath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Allow a valid store path to be used in an expression.  This is'
- source: '   useful in some generated expressions such as in nix-push, which'
- source: '   generates a call to a function with an already existing store path'
- source: '   as argument.  You don''t want to use `toPath'' here because it copies'
- source: '   the path to the Nix store, which yields a copy like'
- source: '   /nix/store/newhash-oldhash-oldname.  In the past, `toPath'' had'
- source: '   special case behaviour for store paths, but that created weird'
- source: '   corner cases. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_storePath
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: evalSettings
  scopes:
    - variable.camel-case
    - variable.other.object.access.evalSettings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pureEval
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ''''
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''' is not allowed in pure evaluation mode'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: builtins.storePath
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Path
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: path
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: checkSourcePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Resolve symlinks in ‘path’, unless ‘path’ itself is a symlink'
- source: '       directly in the store.  The latter condition is necessary so'
- source: '       e.g. nix-push does the right thing. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: isStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: '='
  scopes:
    - keyword.operator.assignment
- source: canonPath
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: isInStore
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: path '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''' is not in the Nix store'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: path2
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: toStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: settings
  scopes:
    - variable.lower-case
    - variable.other.object.access.settings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: readOnlyMode
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: ensurePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path2
  scopes:
    - variable.lower-case
    - variable.other.unknown.path2
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: context
  scopes:
    - variable.lower-case
    - variable.other.object.access.context
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: printStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path2
  scopes:
    - variable.lower-case
    - variable.other.unknown.path2
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_storePath
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __storePath
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      This function allows you to define a dependency on an already'
- source: '      existing store path. For example, the derivation attribute `src'
- source: '      = builtins.storePath /nix/store/f1d18v1y…-source` causes the'
- source: '      derivation to depend on the specified path, which must exist or'
- source: '      be substitutable. Note that this differs from a plain path'
- source: '      (e.g. `src = /nix/store/f1d18v1y…-source`) in that the latter'
- source: '      causes the path to be *copied* again to the Nix store, resulting'
- source: '      in a new path (e.g. `/nix/store/ld01dnzc…-source-source`).'
- source: '      This function is not available in pure evaluation mode.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_storePath
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_storePath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_pathExists
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: /*
  scopesBegin:
    - meta.body.function.definition
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' We don’t check the path right now, because we don’t want to'
- source: '      throw if the path isn’t allowed, but just return false (and we'
- source: '      can’t just catch the exception here because we still want to'
- source: '      throw if something in the evaluation of `*'
- source: 'args[0]` tries to'
- source: '      access an unauthorized path). '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: path
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: realisePath
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' { .'
- source: checkForPureEval
  scopes:
    - variable.camel-case
    - variable.other.unknown.checkForPureEval
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ' }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pathExists
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: checkSourcePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: SysError
  scopes:
    - variable.other.unknown.SysError
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Don''t give away info from errors while canonicalising'
- source: '           ‘path’ in restricted mode. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: RestrictedPathError
  scopes:
    - variable.other.unknown.RestrictedPathError
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_pathExists
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __pathExists
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if the path *path* exists at evaluation time, and'
- source: '      `false` otherwise.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_pathExists
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_pathExists
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return the base name of the given string, i.e., everything'
- source: '   following the last slash. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_baseNameOf
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: PathSet
  scopesBegin:
    - meta.body.function.definition
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: baseNameOf
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_baseNameOf
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: baseNameOf
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the *base name* of the string *s*, that is, everything'
- source: '      following the final slash in the string. This is similar to the GNU'
- source: '      `basename` command.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_baseNameOf
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_baseNameOf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return the directory of the given path, i.e., everything before the'
- source: '   last slash.  Return either a path or a string depending on the type'
- source: '   of the argument. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_dirOf
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: PathSet
  scopesBegin:
    - meta.body.function.definition
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: path
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: dir
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: dirOf
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.nPath
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: dir
  scopes:
    - variable.lower-case
    - variable.other.unknown.dir
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: dir
  scopes:
    - variable.lower-case
    - variable.other.unknown.dir
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_dirOf
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: dirOf
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the directory part of the string *s*, that is, everything'
- source: '      before the final slash in the string. This is similar to the GNU'
- source: '      `dirname` command.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_dirOf
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_dirOf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return the contents of a file as a string. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_readFile
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: path
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: realisePath
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: readFile
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: s
  scopes:
    - variable.lower-case
    - variable.other.object.access.s
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: npos
  scopes:
    - variable.lower-case
    - variable.other.unknown.npos
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: the contents of the file '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''' cannot be represented as a Nix string'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: StorePathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: refs
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: isInStore
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: refs
  scopes:
    - variable.lower-case
    - variable.other.unknown.refs
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: queryPathInfo
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: toStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: references
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Error
  scopes:
    - variable.other.unknown.Error
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: should be InvalidPathError'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: context
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: printStorePathSet
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: refs
  scopes:
    - variable.lower-case
    - variable.other.unknown.refs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_readFile
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __readFile
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the contents of the file *path* as a string.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_readFile
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_readFile
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Find a file in the Nix search path. Used to implement <x> paths,'
- source: '   which are desugared to ''findFile __nixPath "x"''. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_findFile
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: SearchPath
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: searchPath
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: v2
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.unknown.v2
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: prefix
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Bindings
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: iterator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: i
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sPrefix
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: prefix
  scopes:
    - variable.lower-case
    - variable.other.unknown.prefix
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getAttr
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: findFile
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sPath
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: path
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: toOwned
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: rewrites
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: realiseContext
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: '='
  scopes:
    - keyword.operator.assignment
- source: rewriteStrings
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rewrites
  scopes:
    - variable.lower-case
    - variable.other.unknown.rewrites
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: InvalidPathError
  scopes:
    - variable.other.unknown.InvalidPathError
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: cannot find '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''', since path '''
- source: '%2%'
  scopes:
    - constant.other.placeholder
- source: ''' is not valid'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: path
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: searchPath
  scopes:
    - variable.camel-case
    - variable.other.object.access.searchPath
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emplace_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: prefix
  scopes:
    - variable.lower-case
    - variable.other.unknown.prefix
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: path
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: checkSourcePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: findFile
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: searchPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.searchPath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_findFile
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: RegisterPrimOp
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
    - meta.initialization
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Info
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: '{'
  scopes:
    - punctuation.section.arguments.begin.bracket.curly.initializer
- source: .
  scopesBegin:
    - meta.initialization.parameter
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: name
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __findFile
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: .
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: arity
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: .
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: fun
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_findFile
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_findFile
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.initialization.parameter
- source: '}'
  scopes:
    - punctuation.section.arguments.end.bracket.curly.initializer
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
    - meta.initialization
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return the cryptographic hash of a file in base-16. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_hashFile
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: type
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: optional
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: HashType
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: ht
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: parseHashType
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: type
  scopes:
    - variable.lower-case
    - variable.other.unknown.type
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: ht
  scopes:
    - variable.lower-case
    - variable.other.unknown.ht
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: unknown hash type '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: type
  scopes:
    - variable.lower-case
    - variable.other.unknown.type
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: path
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: realisePath
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: hashFile
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: ht
  scopes:
    - variable.lower-case
    - variable.other.unknown.ht
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: to_string
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: Base16
  scopes:
    - variable.other.unknown.Base16
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_hashFile
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __hashFile
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: type
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: p
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return a base-16 representation of the cryptographic hash of the'
- source: '      file at path *p*. The hash algorithm specified by *type* must be one'
- source: '      of `"md5"`, `"sha1"`, `"sha256"` or `"sha512"`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_hashFile
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_hashFile
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Read a directory (without . or ..) '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_readDir
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: path
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: realisePath
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: DirEntries
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: entries
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: readDirectory
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildBindings
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: entries
  scopes:
    - variable.lower-case
    - variable.other.object.access.entries
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: ent
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: entries
  scopes:
    - variable.lower-case
    - variable.other.unknown.entries
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ent
  scopes:
    - variable.lower-case
    - variable.other.object.access.ent
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: type
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: DT_UNKNOWN
  scopes:
    - variable.snake-case
    - variable.other.unknown.DT_UNKNOWN
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ent
  scopes:
    - variable.lower-case
    - variable.other.object.access.ent
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: type
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: getFileType
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: ent
  scopes:
    - variable.lower-case
    - variable.other.object.access.ent
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ent
  scopes:
    - variable.lower-case
    - variable.other.object.access.ent
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ent
  scopes:
    - variable.lower-case
    - variable.other.object.access.ent
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: type
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: DT_REG
  scopes:
    - variable.snake-case
    - variable.other.unknown.DT_REG
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: regular
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: ent
  scopes:
    - variable.lower-case
    - variable.other.object.access.ent
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: type
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: DT_DIR
  scopes:
    - variable.snake-case
    - variable.other.unknown.DT_DIR
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: directory
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: ent
  scopes:
    - variable.lower-case
    - variable.other.object.access.ent
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: type
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: DT_LNK
  scopes:
    - variable.snake-case
    - variable.other.unknown.DT_LNK
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: symlink
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: unknown
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.unknown.attrs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_readDir
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __readDir
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the contents of the directory *path* as a set mapping'
- source: '      directory entries to the corresponding file type. For instance, if'
- source: '      directory `A` contains a regular file `B` and another directory'
- source: '      `C`, then `builtins.readDir ./A` will return the set'
- source: '      ```nix'
- source: '      { B = "regular"; C = "directory"; }'
- source: '      ```'
- source: '      The possible values for the file type are `"regular"`,'
- source: '      `"directory"`, `"symlink"` and `"unknown"`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_readDir
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_readDir
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*************************************************************
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * Creating files'
- source: '*************************************************************/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Convert the argument (which can be any Nix expression) to an XML'
- source: '   representation returned in a string.  Not all Nix expressions can'
- source: '   be sensibly or completely represented (e.g., functions). '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_toXML
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: std
  scopesBegin:
    - meta.body.function.definition
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: ostringstream
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: out
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: printValueAsXML
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'true'
  scopes:
    - constant.language.true
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: out
  scopes:
    - variable.lower-case
    - variable.other.unknown.out
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: out
  scopes:
    - variable.lower-case
    - variable.other.object.access.out
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_toXML
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __toXML
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return a string containing an XML representation of *e*. The main'
- source: '      application for `toXML` is to communicate information with the'
- source: '      builder in a more structured format than plain environment'
- source: '      variables.'
- source: '      Here is an example where this is the case:'
- source: '      ```nix'
- source: '      { stdenv, fetchurl, libxslt, jira, uberwiki }:'
- source: '      stdenv.mkDerivation (rec {'
- source: '        name = "web-server";'
- source: '        buildInputs = [ libxslt ];'
- source: '        builder = builtins.toFile "builder.sh" "'
- source: '          source $stdenv/setup'
- source: '          mkdir $out'
- source: '          echo "$servlets" | xsltproc ${stylesheet} - > $out/server-conf.xml ①'
- source: '        ";'
- source: '        stylesheet = builtins.toFile "stylesheet.xsl" ②'
- source: '         "<?xml version=''1.0'' encoding=''UTF-8''?>'
- source: '          <xsl:stylesheet xmlns:xsl=''http://www.w3.org/1999/XSL/Transform'' version=''1.0''>'
- source: '            <xsl:template match=''/''>'
- source: '              <Configure>'
- source: '                <xsl:for-each select=''/expr/list/attrs''>'
- source: '                  <Call name=''addWebApplication''>'
- source: '                    <Arg><xsl:value-of select=\"attr[@name = ''path'']/string/@value\" /></Arg>'
- source: '                    <Arg><xsl:value-of select=\"attr[@name = ''war'']/path/@value\" /></Arg>'
- source: '                  </Call>'
- source: '                </xsl:for-each>'
- source: '              </Configure>'
- source: '            </xsl:template>'
- source: '          </xsl:stylesheet>'
- source: '        ";'
- source: '        servlets = builtins.toXML [ ③'
- source: '          { path = "/bugtracker"; war = jira + "/lib/atlassian-jira.war"; }'
- source: '          { path = "/wiki"; war = uberwiki + "/uberwiki.war"; }'
- source: '        ];'
- source: '      })'
- source: '      ```'
- source: '      The builder is supposed to generate the configuration file for a'
- source: '      [Jetty servlet container](http://jetty.mortbay.org/). A servlet'
- source: '      container contains a number of servlets (`*.war` files) each'
- source: '      exported under a specific URI prefix. So the servlet configuration'
- source: '      is a list of sets containing the `path` and `war` of the servlet'
- source: '      (①). This kind of information is difficult to communicate with the'
- source: '      normal method of passing information through an environment'
- source: '      variable, which just concatenates everything together into a'
- source: '      string (which might just work in this case, but wouldn’t work if'
- source: '      fields are optional or contain lists themselves). Instead the Nix'
- source: '      expression is converted to an XML representation with `toXML`,'
- source: '      which is unambiguous and can easily be processed with the'
- source: '      appropriate tools. For instance, in the example an XSLT stylesheet'
- source: '      (at point ②) is applied to it (at point ①) to generate the XML'
- source: '      configuration file for the Jetty server. The XML representation'
- source: '      produced at point ③ by `toXML` is as follows:'
- source: '      ```xml'
- source: '      <?xml version=''1.0'' encoding=''utf-8''?>'
- source: '      <expr>'
- source: '        <list>'
- source: '          <attrs>'
- source: '            <attr name="path">'
- source: '              <string value="/bugtracker" />'
- source: '            </attr>'
- source: '            <attr name="war">'
- source: '              <path value="/nix/store/d1jh9pasa7k2...-jira/lib/atlassian-jira.war" />'
- source: '            </attr>'
- source: '          </attrs>'
- source: '          <attrs>'
- source: '            <attr name="path">'
- source: '              <string value="/wiki" />'
- source: '            </attr>'
- source: '            <attr name="war">'
- source: '              <path value="/nix/store/y6423b1yi4sx...-uberwiki/uberwiki.war" />'
- source: '            </attr>'
- source: '          </attrs>'
- source: '        </list>'
- source: '      </expr>'
- source: '      ```'
- source: '      Note that we used the `toFile` built-in to write the builder and'
- source: '      the stylesheet “inline” in the Nix expression. The path of the'
- source: '      stylesheet is spliced into the builder using the syntax `xsltproc'
- source: '      ${stylesheet}`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_toXML
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_toXML
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Convert the argument (which can be any Nix expression) to a JSON'
- source: '   string.  Not all Nix expressions can be sensibly or completely'
- source: '   represented (e.g., functions). '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_toJSON
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: std
  scopesBegin:
    - meta.body.function.definition
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: ostringstream
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: out
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: printValueAsJSON
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'true'
  scopes:
    - constant.language.true
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: out
  scopes:
    - variable.lower-case
    - variable.other.unknown.out
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: out
  scopes:
    - variable.lower-case
    - variable.other.object.access.out
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_toJSON
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __toJSON
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return a string containing a JSON representation of *e*. Strings,'
- source: '      integers, floats, booleans, nulls and lists are mapped to their JSON'
- source: '      equivalents. Sets (except derivations) are represented as objects.'
- source: '      Derivations are translated to a JSON string containing the'
- source: '      derivation’s output path. Paths are copied to the store and'
- source: '      represented as a JSON string of the resulting store path.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_toJSON
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_toJSON
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Parse a JSON string to a value. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_fromJSON
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: parseJSON
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: JSONParseError
  scopes:
    - variable.other.unknown.JSONParseError
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: addTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: while decoding a JSON string
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: throw
  scopes:
    - keyword.control.throw
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_fromJSON
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __fromJSON
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Convert a JSON string to a Nix value. For example,'
- source: '      ```nix'
- source: '      builtins.fromJSON ''''{"x": [1, 2, 3], "y": null}'''''
- source: '      ```'
- source: '      returns the value `{ x = [ 1 2 3 ]; y = null; }`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_fromJSON
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_fromJSON
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Store a string in the Nix store as a source file that can be used'
- source: '   as an input by derivations. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_toFile
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: PathSet
  scopesBegin:
    - meta.body.function.definition
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: name
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: contents
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: StorePathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: refs
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: path
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: path
  scopes:
    - variable.lower-case
    - variable.other.object.access.path
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: at
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: /
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'in ''toFile'': the file named '''
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''' must not contain a reference '
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: '"'
  scopes:
    - punctuation.definition.string.begin
- source: to a derivation but contains (
- source: '%2%'
  scopes:
    - constant.other.placeholder
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: refs
  scopes:
    - variable.lower-case
    - variable.other.object.access.refs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: parseStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: storePath
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: settings
  scopes:
    - variable.lower-case
    - variable.other.object.access.settings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: readOnlyMode
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: computeStorePathForText
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: contents
  scopes:
    - variable.lower-case
    - variable.other.unknown.contents
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: refs
  scopes:
    - variable.lower-case
    - variable.other.unknown.refs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: addTextToStore
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: contents
  scopes:
    - variable.lower-case
    - variable.other.unknown.contents
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: refs
  scopes:
    - variable.lower-case
    - variable.other.unknown.refs
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: repair
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Note: we don''t need to add `context'' to the context of the'
- source: '       result, since `storePath'' itself has references to the paths'
- source: '       used in args[1]. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
- source: /*
  scopes:
    - punctuation.definition.comment.begin
- source: ' Add the output of this to the allowed paths. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allowAndSetStorePathString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: storePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.storePath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_toFile
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __toFile
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: name
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Store the string *s* in a file in the Nix store and return its'
- source: '      path.  The file has suffix *name*. This file can be used as an'
- source: '      input to derivations. One application is to write builders'
- source: '      “inline”. For instance, the following Nix expression combines the'
- source: '      [Nix expression for GNU Hello](expression-syntax.md) and its'
- source: '      [build script](build-script.md) into one file:'
- source: '      ```nix'
- source: '      { stdenv, fetchurl, perl }:'
- source: '      stdenv.mkDerivation {'
- source: '        name = "hello-2.1.1";'
- source: '        builder = builtins.toFile "builder.sh" "'
- source: '          source $stdenv/setup'
- source: '          PATH=$perl/bin:$PATH'
- source: '          tar xvfz $src'
- source: '          cd hello-*'
- source: '          ./configure --prefix=$out'
- source: '          make'
- source: '          make install'
- source: '        ";'
- source: '        src = fetchurl {'
- source: '          url = "http://ftp.nluug.nl/pub/gnu/hello/hello-2.1.1.tar.gz";'
- source: '          sha256 = "1md7jsfd8pa45z73bz1kszpp01yw6x5ljkjk2hx7wl800any6465";'
- source: '        };'
- source: '        inherit perl;'
- source: '      }'
- source: '      ```'
- source: '      It is even possible for one file to refer to another, e.g.,'
- source: '      ```nix'
- source: '      builder = let'
- source: '        configFile = builtins.toFile "foo.conf" "'
- source: '          # This is some dummy configuration file.'
- source: '          ...'
- source: '        ";'
- source: '      in builtins.toFile "builder.sh" "'
- source: '        source $stdenv/setup'
- source: '        ...'
- source: '        cp ${configFile} $out/etc/foo.conf'
- source: '      ";'
- source: '      ```'
- source: '      Note that `${configFile}` is an'
- source: '      [antiquotation](language-values.md), so the result of the'
- source: '      expression `configFile`'
- source: '      (i.e., a path like `/nix/store/m7p7jfny445k...-foo.conf`) will be'
- source: '      spliced into the resulting string.'
- source: '      It is however *not* allowed to have files mutually referring to each'
- source: '      other, like so:'
- source: '      ```nix'
- source: '      let'
- source: '        foo = builtins.toFile "foo" "...${bar}...";'
- source: '        bar = builtins.toFile "bar" "...${foo}...";'
- source: '      in foo'
- source: '      ```'
- source: '      This is not allowed because it would cause a cyclic dependency in'
- source: '      the computation of the cryptographic hashes for `foo` and `bar`.'
- source: '      It is also not possible to reference the result of a derivation. If'
- source: '      you are using Nixpkgs, the `writeTextFile` function is able to do'
- source: '      that.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_toFile
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_toFile
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: addPath
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: std
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: string
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: name
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Path
  scopes:
    - entity.name.type.parameter
- source: path
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: filterFun
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: FileIngestionMethod
  scopes:
    - entity.name.type.parameter
- source: method
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: std
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: optional
  scopes:
    - entity.name.type.parameter
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Hash
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: expectedHash
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PathSet
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: context
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: try
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: handle CA derivation outputs (where path needs to'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' be rewritten to the actual output).'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: rewrites
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: realiseContext
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: toRealPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: rewriteStrings
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rewrites
  scopes:
    - variable.lower-case
    - variable.other.unknown.rewrites
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: StorePathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: refs
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: isInStore
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: storePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.storePath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: subPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.subPath
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: toStorePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: we should scanForReferences on the path before adding it'
  scopesEnd:
    - comment.line.double-slash
- source: refs
  scopes:
    - variable.lower-case
    - variable.other.unknown.refs
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: queryPathInfo
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: storePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.storePath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: references
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: toRealPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: storePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.storePath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: subPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.subPath
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Error
  scopes:
    - variable.other.unknown.Error
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: should be InvalidPathError'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: '='
  scopes:
    - keyword.operator.assignment
- source: evalSettings
  scopes:
    - variable.camel-case
    - variable.other.object.access.evalSettings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pureEval
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: expectedHash
  scopes:
    - variable.camel-case
    - variable.other.unknown.expectedHash
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: checkSourcePath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: PathFilter
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: filter
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: filterFun
  scopes:
    - variable.camel-case
    - variable.other.unknown.filterFun
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator.bitwise
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: const
  scopesBegin:
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Path
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: path
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: st
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: lstat
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Call the filter function.  The first argument is the path,'
- source: '               the second is a string indicating the type of the file. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: arg1
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: arg1
  scopes:
    - variable.lower-case
    - variable.other.object.access.arg1
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: arg2
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: arg2
  scopes:
    - variable.lower-case
    - variable.other.object.access.arg2
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: S_ISREG
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: st
  scopes:
    - variable.lower-case
    - variable.other.object.access.st
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: st_mode
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: regular
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: S_ISDIR
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: st
  scopes:
    - variable.lower-case
    - variable.other.object.access.st
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: st_mode
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: directory
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: S_ISLNK
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: st
  scopes:
    - variable.lower-case
    - variable.other.object.access.st
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: st_mode
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: symlink
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: unknown
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' not supported, will fail! '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: args
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
- source: '[]'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: arg1
  scopes:
    - variable.lower-case
    - variable.other.unknown.arg1
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: arg2
  scopes:
    - variable.lower-case
    - variable.other.unknown.arg2
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.declaration
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: res
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: filterFun
  scopes:
    - variable.camel-case
    - variable.other.unknown.filterFun
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopes:
    - variable.lower-case
    - variable.other.unknown.args
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: defaultPathFilter
  scopes:
    - variable.camel-case
    - variable.other.unknown.defaultPathFilter
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: optional
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: StorePath
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: expectedStorePath
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: expectedHash
  scopes:
    - variable.camel-case
    - variable.other.unknown.expectedHash
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: expectedStorePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.expectedStorePath
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: makeFixedOutputPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: method
  scopes:
    - variable.lower-case
    - variable.other.unknown.method
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: expectedHash
  scopes:
    - variable.camel-case
    - variable.other.unknown.expectedHash
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: expectedHash
  scopes:
    - variable.camel-case
    - variable.other.unknown.expectedHash
- source: '||'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: isValidPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: expectedStorePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.expectedStorePath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: StorePath
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: dstPath
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: settings
  scopes:
    - variable.lower-case
    - variable.other.object.access.settings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: readOnlyMode
  scopes:
    - variable.other.property
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: computeStorePathForPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: method
  scopes:
    - variable.lower-case
    - variable.other.unknown.method
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: htSHA256
  scopes:
    - variable.camel-case
    - variable.other.unknown.htSHA256
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: filter
  scopes:
    - variable.lower-case
    - variable.other.unknown.filter
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: addToStore
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: method
  scopes:
    - variable.lower-case
    - variable.other.unknown.method
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: htSHA256
  scopes:
    - variable.camel-case
    - variable.other.unknown.htSHA256
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: filter
  scopes:
    - variable.lower-case
    - variable.other.unknown.filter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: repair
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: refs
  scopes:
    - variable.lower-case
    - variable.other.unknown.refs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: expectedHash
  scopes:
    - variable.camel-case
    - variable.other.unknown.expectedHash
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: expectedStorePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.expectedStorePath
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: dstPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.dstPath
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: store path mismatch in (possibly filtered) path added from '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allowAndSetStorePathString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: dstPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.dstPath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allowAndSetStorePathString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: expectedStorePath
  scopes:
    - variable.camel-case
    - variable.other.unknown.expectedStorePath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Error
  scopes:
    - variable.other.unknown.Error
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: addTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: while adding path '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: throw
  scopes:
    - keyword.control.throw
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_filterSource
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: PathSet
  scopesBegin:
    - meta.body.function.definition
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Path
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: path
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: nFunction
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFunction
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: TypeError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'first argument in call to ''filterSource'' is not a function but '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: showType
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: addPath
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: baseNameOf
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: FileIngestionMethod
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Recursive
  scopes:
    - variable.other.unknown.Recursive
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: nullopt
  scopes:
    - variable.lower-case
    - variable.other.unknown.nullopt
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_filterSource
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __filterSource
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      > **Warning**'
- source: '      >'
- source: '      > `filterSource` should not be used to filter store paths. Since'
- source: '      > `filterSource` uses the name of the input directory while naming'
- source: '      > the output directory, doing so will produce a directory name in'
- source: '      > the form of `<hash2>-<hash>-<name>`, where `<hash>-<name>` is'
- source: '      > the name of the input directory. Since `<hash>` depends on the'
- source: '      > unfiltered directory, the name of the output directory will'
- source: '      > indirectly depend on files that are filtered out by the'
- source: '      > function. This will trigger a rebuild even when a filtered out'
- source: '      > file is changed. Use `builtins.path` instead, which allows'
- source: '      > specifying the name of the output directory.'
- source: '      This function allows you to copy sources into the Nix store while'
- source: '      filtering certain files. For instance, suppose that you want to use'
- source: '      the directory `source-dir` as an input to a Nix expression, e.g.'
- source: '      ```nix'
- source: '      stdenv.mkDerivation {'
- source: '        ...'
- source: '        src = ./source-dir;'
- source: '      }'
- source: '      ```'
- source: '      However, if `source-dir` is a Subversion working copy, then all'
- source: '      those annoying `.svn` subdirectories will also be copied to the'
- source: '      store. Worse, the contents of those directories may change a lot,'
- source: '      causing lots of spurious rebuilds. With `filterSource` you can'
- source: '      filter out the `.svn` directories:'
- source: '      ```nix'
- source: '      src = builtins.filterSource'
- source: '        (path: type: type != "directory" || baseNameOf path != ".svn")'
- source: '        ./source-dir;'
- source: '      ```'
- source: '      Thus, the first argument *e1* must be a predicate function that is'
- source: '      called for each regular file, directory or symlink in the source'
- source: '      tree *e2*. If the function returns `true`, the file is copied to the'
- source: '      Nix store, otherwise it is omitted. The function is called with two'
- source: '      arguments. The first is the full path of the file. The second is a'
- source: '      string that identifies the type of the file, which is either'
- source: '      `"regular"`, `"directory"`, `"symlink"` or `"unknown"` (for other'
- source: '      kinds of files such as device nodes or fifos — but note that those'
- source: '      cannot be copied to the Nix store, so if the predicate returns'
- source: '      `true` for them, the copy will fail). If you exclude a directory,'
- source: '      the entire corresponding subtree of *e2* will be excluded.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_filterSource
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_filterSource
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_path
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Path
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: path
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: name
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Value
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: filterFun
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: nullptr
  scopes:
    - constant.language.nullptr
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: method
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: FileIngestionMethod
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Recursive
  scopes:
    - variable.other.unknown.Recursive
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: optional
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Hash
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: expectedHash
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: attr
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToPath
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pos
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sName
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pos
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: filter
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: filterFun
  scopes:
    - variable.camel-case
    - variable.other.unknown.filterFun
- source: '='
  scopes:
    - keyword.operator.assignment
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: recursive
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: method
  scopes:
    - variable.lower-case
    - variable.other.unknown.method
- source: '='
  scopes:
    - keyword.operator.assignment
- source: FileIngestionMethod
  scopes:
    - variable.other.unknown.FileIngestionMethod
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pos
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: sha256
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: expectedHash
  scopes:
    - variable.camel-case
    - variable.other.unknown.expectedHash
- source: '='
  scopes:
    - keyword.operator.assignment
- source: newHashAllowEmpty
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pos
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: htSHA256
  scopes:
    - variable.camel-case
    - variable.other.unknown.htSHA256
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: unsupported argument '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''' to ''addPath'''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pos
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: path
  scopes:
    - variable.lower-case
    - variable.other.object.access.path
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '''path'' required'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: name
  scopes:
    - variable.lower-case
    - variable.other.object.access.name
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: '='
  scopes:
    - keyword.operator.assignment
- source: baseNameOf
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: addPath
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: filterFun
  scopes:
    - variable.camel-case
    - variable.other.unknown.filterFun
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: method
  scopes:
    - variable.lower-case
    - variable.other.unknown.method
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: expectedHash
  scopes:
    - variable.camel-case
    - variable.other.unknown.expectedHash
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_path
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: args
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      An enrichment of the built-in path type, based on the attributes'
- source: '      present in *args*. All are optional except `path`:'
- source: '        - path\'
- source: '          The underlying path.'
- source: '        - name\'
- source: '          The name of the path when added to the store. This can used to'
- source: '          reference paths that have nix-illegal characters in their names,'
- source: '          like `@`.'
- source: '        - filter\'
- source: '          A function of the type expected by `builtins.filterSource`,'
- source: '          with the same semantics.'
- source: '        - recursive\'
- source: '          When `false`, when `path` is added to the store it is with a'
- source: '          flat hash, rather than a hash of the NAR serialization of the'
- source: '          file. Thus, `path` must refer to a regular file, not a'
- source: '          directory. This allows similar behavior to `fetchurl`. Defaults'
- source: '          to `true`.'
- source: '        - sha256\'
- source: '          When provided, this is the expected hash of the file at the'
- source: '          path. Evaluation will fail if the hash is incorrect, and'
- source: '          providing a hash allows `builtins.path` to be used even when the'
- source: '          `pure-eval` nix config option is on.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_path
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_path
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*************************************************************
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * Sets'
- source: '*************************************************************/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return the names of the attributes in a set as a sorted list of'
- source: '   strings. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_attrNames
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: symbolTable
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: size_t
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: 'n'
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: staticId
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __id_static
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.assignment
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: dynamicId
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __id_dynamic
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.assignment
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: nix
  scopesBegin:
    - meta.parens.control.for
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Attr
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: attr
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: symbol
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: name
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: symbolTable
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: symbol
  scopes:
    - variable.lower-case
    - variable.other.unknown.symbol
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: staticId
  scopes:
    - variable.camel-case
    - variable.other.unknown.staticId
- source: '||'
  scopes:
    - keyword.operator.logical
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: dynamicId
  scopes:
    - variable.camel-case
    - variable.other.unknown.dynamicId
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: sort
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: Value
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: v1
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: v2
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: return
  scopes:
    - keyword.control.return
- source: strcmp
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.object.access.v1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: string
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: s
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: string
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: s
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: <
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_attrNames
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __attrNames
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: set
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the names of the attributes in the set *set* in an'
- source: '      alphabetically sorted list. For instance, `builtins.attrNames { y'
- source: '      = 1; x = "foo"; }` evaluates to `[ "x" "y" ]`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_attrNames
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_attrNames
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return the values of the attributes in a set as a list, in the same'
- source: '   order as attrNames. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_attrValues
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: unsigned
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: symbolTable
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: staticId
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __id_static
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.assignment
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: dynamicId
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __id_dynamic
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.assignment
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: nix
  scopesBegin:
    - meta.parens.control.for
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Attr
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: attr
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: symbol
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: name
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: symbolTable
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: symbol
  scopes:
    - variable.lower-case
    - variable.other.unknown.symbol
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: staticId
  scopes:
    - variable.camel-case
    - variable.other.unknown.staticId
- source: '||'
  scopes:
    - keyword.operator.logical
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: dynamicId
  scopes:
    - variable.camel-case
    - variable.other.unknown.dynamicId
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Value
  scopes:
    - variable.other.unknown.Value
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.unknown.attr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: sort
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator.bitwise
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: Value
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: v1
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: v2
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: std
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string_view
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: s1
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Attr
  scopes:
    - variable.other.unknown.Attr
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v1
  scopes:
    - variable.lower-case
    - variable.other.unknown.v1
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: s2
  scopes:
    - variable.lower-case
    - variable.other.unknown.s2
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Attr
  scopes:
    - variable.other.unknown.Attr
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.unknown.v2
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: name
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: s1
  scopes:
    - variable.lower-case
    - variable.other.unknown.s1
- source: <
  scopes:
    - keyword.operator.comparison
- source: s2
  scopes:
    - variable.lower-case
    - variable.other.unknown.s2
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: <
  scopes:
    - keyword.operator.comparison
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Attr
  scopes:
    - variable.other.unknown.Attr
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_attrValues
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __attrValues
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: set
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the values of the attributes in the set *set* in the order'
- source: '      corresponding to the sorted attribute names.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_attrValues
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_attrValues
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Dynamic version of the `.'' operator. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_getAttr
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Bindings
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: iterator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: i
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: getAttr
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: getAttr
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: create
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.unknown.attr
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' !!! add to stack trace?'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: countCalls
  scopes:
    - variable.other.property
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: pos
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrSelects
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: pos
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_getAttr
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __getAttr
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: set
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      `getAttr` returns the attribute named *s* from *set*. Evaluation'
- source: '      aborts if the attribute doesn’t exist. This is a dynamic version of'
- source: '      the `.` operator, since *s* is an expression rather than an'
- source: '      identifier.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_getAttr
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_getAttr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return position information of the specified attribute. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_unsafeGetAttrPos
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Bindings
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: iterator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: i
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: create
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.unknown.attr
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkNull
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkPos
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: pos
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_unsafeGetAttrPos
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: RegisterPrimOp
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
    - meta.initialization
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Info
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: '{'
  scopes:
    - punctuation.section.arguments.begin.bracket.curly.initializer
- source: .
  scopesBegin:
    - meta.initialization.parameter
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: name
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __unsafeGetAttrPos
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: .
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: arity
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: .
  scopes:
    - punctuation.accessor.initializer
    - variable.parameter.initializer
- source: fun
  scopes:
    - variable.parameter.initializer
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_unsafeGetAttrPos
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_unsafeGetAttrPos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.initialization.parameter
- source: '}'
  scopes:
    - punctuation.section.arguments.end.bracket.curly.initializer
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
    - meta.initialization
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Dynamic version of the `?'' operator. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_hasAttr
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: create
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.unknown.attr
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_hasAttr
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __hasAttr
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: set
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      `hasAttr` returns `true` if *set* has an attribute named *s*, and'
- source: '      `false` otherwise. This is a dynamic version of the `?` operator,'
- source: '      since *s* is an expression rather than an identifier.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_hasAttr
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_hasAttr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Determine whether the argument is a set. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_isAttrs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nAttrs
  scopes:
    - variable.camel-case
    - variable.other.unknown.nAttrs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_isAttrs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __isAttrs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if *e* evaluates to a set, and `false` otherwise.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_isAttrs
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_isAttrs
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_removeAttrs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Get the attribute names to be removed.'
- source: '       We keep them as Attrs instead of Symbols so std::set_difference'
- source: '       can be used to remove them from attrs[0]. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: boost
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: container
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: small_vector
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Attr
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: '64'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: names
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: names
  scopes:
    - variable.lower-case
    - variable.other.object.access.names
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: reserve
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: elem
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: names
  scopes:
    - variable.lower-case
    - variable.other.object.access.names
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emplace_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: create
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.object.access.elem
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: string
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: s
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: sort
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: names
  scopes:
    - variable.lower-case
    - variable.other.object.access.names
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: names
  scopes:
    - variable.lower-case
    - variable.other.object.access.names
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Copy all attributes not in that set.  Note that we don''t need'
- source: '       to sort v.attrs because it''s a subset of an already sorted'
- source: '       vector. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildBindings
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: set_difference
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: names
  scopes:
    - variable.lower-case
    - variable.other.object.access.names
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: names
  scopes:
    - variable.lower-case
    - variable.other.object.access.names
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: back_inserter
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.unknown.attrs
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alreadySorted
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_removeAttrs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: removeAttrs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: set
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Remove the attributes listed in *list* from *set*. The attributes'
- source: '      don’t have to exist in *set*. For instance,'
- source: '      ```nix'
- source: '      removeAttrs { x = 1; y = 2; z = 3; } [ "a" "x" "z" ]'
- source: '      ```'
- source: '      evaluates to `{ y = 2; }`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_removeAttrs
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_removeAttrs
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Builds a set from a list specifying (name, value) pairs.  To be'
- source: '   precise, a list [{name = "name1"; value = value1;} ... {name ='
- source: '   "nameN"; value = valueN;}] is transformed to {name1 = value1;'
- source: '   ... nameN = valueN;}.  In case of duplicate occurrences of the same'
- source: '   name, the first takes precedence. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_listToAttrs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildBindings
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: set
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Symbol
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: seen
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: v2
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.unknown.v2
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Bindings
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: iterator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: j
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: getAttr
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: listToAttrs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sName
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: name
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: j
  scopes:
    - variable.lower-case
    - variable.other.object.access.j
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: j
  scopes:
    - variable.lower-case
    - variable.other.object.access.j
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: pos
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: sym
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: create
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: seen
  scopes:
    - variable.lower-case
    - variable.other.object.access.seen
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: sym
  scopes:
    - variable.lower-case
    - variable.other.unknown.sym
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Bindings
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: iterator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: j2
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: getAttr
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: listToAttrs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sValue
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: sym
  scopes:
    - variable.lower-case
    - variable.other.unknown.sym
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: j2
  scopes:
    - variable.lower-case
    - variable.other.object.access.j2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: j2
  scopes:
    - variable.lower-case
    - variable.other.object.access.j2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: pos
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.unknown.attrs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_listToAttrs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __listToAttrs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Construct a set from a list specifying the names and values of each'
- source: '      attribute. Each element of the list should be a set consisting of a'
- source: '      string-valued attribute `name` specifying the name of the attribute,'
- source: '      and an attribute `value` specifying its value. Example:'
- source: '      ```nix'
- source: '      builtins.listToAttrs'
- source: '        [ { name = "foo"; value = 123; }'
- source: '          { name = "bar"; value = 456; }'
- source: '        ]'
- source: '      ```'
- source: '      evaluates to'
- source: '      ```nix'
- source: '      { foo = 123; bar = 456; }'
- source: '      ```'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_listToAttrs
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_listToAttrs
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_intersectAttrs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildBindings
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: min
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: i
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Bindings
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: iterator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: j
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: j
  scopes:
    - variable.lower-case
    - variable.other.unknown.j
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: j
  scopes:
    - variable.lower-case
    - variable.other.unknown.j
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alreadySorted
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_intersectAttrs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __intersectAttrs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return a set consisting of the attributes in the set *e2* that also'
- source: '      exist in the set *e1*.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_intersectAttrs
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_intersectAttrs
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_catAttrs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrName
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: create
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: res
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.declaration
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: unsigned
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: found
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: v2
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.unknown.v2
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Bindings
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: iterator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: i
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrName
  scopes:
    - variable.camel-case
    - variable.other.unknown.attrName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: v2
  scopes:
    - variable.lower-case
    - variable.other.object.access.v2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: res
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: found
  scopes:
    - variable.lower-case
    - variable.other.unknown.found
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: value
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: found
  scopes:
    - variable.lower-case
    - variable.other.unknown.found
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: <
  scopes:
    - keyword.operator.comparison
- source: found
  scopes:
    - variable.lower-case
    - variable.other.unknown.found
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: res
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_catAttrs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __catAttrs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: attr
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Collect each attribute named *attr* from a list of attribute'
- source: '      sets.  Attrsets that don''t contain the named attribute are'
- source: '      ignored. For example,'
- source: '      ```nix'
- source: '      builtins.catAttrs "a" [{a = 1;} {b = 0;} {a = 2;}]'
- source: '      ```'
- source: '      evaluates to `[1 2]`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_catAttrs
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_catAttrs
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_functionArgs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: isPrimOpApp
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '||'
  scopes:
    - keyword.operator.logical
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: isPrimOp
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emptyBindings
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: isLambda
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: TypeError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '''functionArgs'' requires a function'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: lambda
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: fun
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: hasFormals
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emptyBindings
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildBindings
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: lambda
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: fun
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: formals
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: formals
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: i
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: lambda
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: fun
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: formals
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: formals
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' !!! should optimise booleans (allocate only once)'
  scopesEnd:
    - comment.line.double-slash
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pos
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: def
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.unknown.attrs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_functionArgs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __functionArgs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: f
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return a set containing the names of the formal arguments expected'
- source: '      by the function *f*. The value of each attribute is a Boolean'
- source: '      denoting whether the corresponding argument has a default value. For'
- source: '      instance, `functionArgs ({ x, y ? 123}: ...) = { x = false; y ='
- source: '      true; }`.'
- source: '      "Formal argument" here refers to the attributes pattern-matched by'
- source: '      the function. Plain lambdas are not included, e.g. `functionArgs (x:'
- source: '      ...) = { }`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_functionArgs
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_functionArgs
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_mapAttrs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildBindings
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: i
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Value
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: vName
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Value
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: vFun2
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: vName
  scopes:
    - variable.camel-case
    - variable.other.object.access.vName
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: vFun2
  scopes:
    - variable.camel-case
    - variable.other.object.access.vFun2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkApp
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vName
  scopes:
    - variable.camel-case
    - variable.other.unknown.vName
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkApp
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: vFun2
  scopes:
    - variable.camel-case
    - variable.other.unknown.vFun2
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alreadySorted
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_mapAttrs
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __mapAttrs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: f
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: attrset
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Apply function *f* to every element of *attrset*. For example,'
- source: '      ```nix'
- source: '      builtins.mapAttrs (name: value: value * 10) { a = 1; b = 2; }'
- source: '      ```'
- source: '      evaluates to `{ a = 10; b = 20; }`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_mapAttrs
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_mapAttrs
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_zipAttrsWith
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' we will first count how many values are present for each given key.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' we then allocate a single attrset and pre-populate it with lists of'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' appropriate sizes, stash the pointers to the list elements of each,'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' and populate the lists. after that we replace the list in the every'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' attribute with the merge function application. this way we need not'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' use (slightly slower) temporary storage the GC does not know about.'
  scopesEnd:
    - comment.line.double-slash
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: map
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Symbol
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: pair
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: Value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopesBegin:
    - keyword.operator.arithmetic
- source: '*'
  scopesEnd:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: attrsSeen
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: listSize
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: listElems
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: <
  scopes:
    - keyword.operator.comparison
- source: listSize
  scopes:
    - variable.camel-case
    - variable.other.unknown.listSize
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Value
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: vElem
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: listElems
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: vElem
  scopes:
    - variable.camel-case
    - variable.other.unknown.vElem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: noPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.noPos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: attr
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: vElem
  scopes:
    - variable.camel-case
    - variable.other.object.access.vElem
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: attrsSeen
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: TypeError
  scopes:
    - variable.other.unknown.TypeError
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: addTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: while invoking '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: zipAttrsWith
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildBindings
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrsSeen
  scopes:
    - variable.camel-case
    - variable.other.object.access.attrsSeen
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
    - meta.binding
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square.binding
- source: sym
  scopes:
    - variable.other.for
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: elem
  scopes:
    - variable.other.for
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.binding
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
  scopesEnd:
    - meta.binding
- source: attrsSeen
  scopes:
    - variable.camel-case
    - variable.other.unknown.attrsSeen
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: list
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: sym
  scopes:
    - variable.lower-case
    - variable.other.unknown.sym
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: list
  scopes:
    - variable.lower-case
    - variable.other.unknown.list
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.object.access.elem
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.object.access.elem
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: list
  scopes:
    - variable.lower-case
    - variable.other.object.access.list
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alreadySorted
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: <
  scopes:
    - keyword.operator.comparison
- source: listSize
  scopes:
    - variable.camel-case
    - variable.other.unknown.listSize
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Value
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: vElem
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: listElems
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: attr
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: vElem
  scopes:
    - variable.camel-case
    - variable.other.object.access.vElem
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: attrsSeen
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: ++
  scopes:
    - keyword.operator.increment
- source: '='
  scopes:
    - keyword.operator.assignment
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: attr
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: attrs
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: name
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: name
  scopes:
    - variable.lower-case
    - variable.other.object.access.name
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: call1
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: call1
  scopes:
    - variable.lower-case
    - variable.other.object.access.call1
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkApp
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: call2
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: call2
  scopes:
    - variable.lower-case
    - variable.other.object.access.call2
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkApp
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: call1
  scopes:
    - variable.lower-case
    - variable.other.unknown.call1
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attr
  scopes:
    - variable.lower-case
    - variable.other.object.access.attr
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: value
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: call2
  scopes:
    - variable.lower-case
    - variable.other.unknown.call2
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_zipAttrsWith
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __zipAttrsWith
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: f
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Transpose a list of attribute sets into an attribute set of lists,'
- source: '      then apply `mapAttrs`.'
- source: '      `f` receives two arguments: the attribute name and a non-empty'
- source: '      list of all values encountered for that attribute name.'
- source: '      The result is an attribute set where the attribute names are the'
- source: '      union of the attribute names in each element of `list`. The attribute'
- source: '      values are the return values of `f`.'
- source: '      ```nix'
- source: '      builtins.zipAttrsWith'
- source: '        (name: values: { inherit name values; })'
- source: '        [ { a = "x"; } { a = "y"; b = "z"; } ]'
- source: '      ```'
- source: '      evaluates to'
- source: '      ```'
- source: '      {'
- source: '        a = { name = "a"; values = [ "x" "y" ]; };'
- source: '        b = { name = "b"; values = [ "z" ]; };'
- source: '      }'
- source: '      ```'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_zipAttrsWith
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_zipAttrsWith
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*************************************************************
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * Lists'
- source: '*************************************************************/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Determine whether the argument is a list. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_isList
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nList
  scopes:
    - variable.camel-case
    - variable.other.unknown.nList
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_isList
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __isList
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if *e* evaluates to a list, and `false` otherwise.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_isList
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_isList
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: elemAt
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: list
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: list
  scopes:
    - variable.lower-case
    - variable.other.unknown.list
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: <
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: list
  scopes:
    - variable.lower-case
    - variable.other.object.access.list
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'list index '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ' is out of bounds'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: list
  scopes:
    - variable.lower-case
    - variable.other.object.access.list
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: list
  scopes:
    - variable.lower-case
    - variable.other.object.access.list
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return the n-1''th element of a list. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_elemAt
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: elemAt
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_elemAt
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __elemAt
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: xs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'n'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return element *n* from the list *xs*. Elements are counted starting'
- source: '      from 0. A fatal error occurs if the index is out of bounds.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_elemAt
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_elemAt
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return the first element of a list. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_head
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: elemAt
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_head
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __head
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the first element of a list; abort evaluation if the argument'
- source: '      isn’t a list or is an empty list. You can test whether a list is'
- source: '      empty by comparing it with `[]`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_head
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_head
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return a list consisting of everything but the first element of'
- source: '   a list.  Warning: this function takes O(n) time, so you probably'
- source: '   don''t want to use it!  '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_tail
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '''tail'' called on an empty list'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: <
  scopes:
    - keyword.operator.comparison
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_tail
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __tail
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the second to last elements of a list; abort evaluation if'
- source: '      the argument isn’t a list or is an empty list.'
- source: '      > **Warning**'
- source: '      >'
- source: '      > This function should generally be avoided since it''s inefficient:'
- source: '      > unlike Haskell''s `tail`, it takes O(n) time, so recursing over a'
- source: '      > list by repeatedly calling `tail` takes O(n^2) time.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_tail
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_tail
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Apply a function to every element of a list. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_map
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: <
  scopes:
    - keyword.operator.comparison
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkApp
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_map
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: map
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: f
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Apply the function *f* to each element in the list *list*. For'
- source: '      example,'
- source: '      ```nix'
- source: '      map (x: "foo" + x) [ "bar" "bla" "abc" ]'
- source: '      ```'
- source: '      evaluates to `[ "foobar" "foobla" "fooabc" ]`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_map
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_map
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Filter a list using a predicate; that is, return a list containing'
- source: '   every element from the list for which the predicate function'
- source: '   returns true. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_filter
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' FIXME: putting this on the stack is risky.'
  scopesEnd:
    - comment.line.double-slash
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: vs
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.declaration
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: unsigned
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: k
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: same
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: 'true'
  scopes:
    - constant.language.true
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: <
  scopes:
    - keyword.operator.comparison
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: res
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: noPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.noPos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: vs
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: k
  scopes:
    - variable.lower-case
    - variable.other.unknown.k
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: same
  scopes:
    - variable.lower-case
    - variable.other.unknown.same
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: same
  scopes:
    - variable.lower-case
    - variable.other.unknown.same
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: k
  scopes:
    - variable.lower-case
    - variable.other.unknown.k
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: <
  scopes:
    - keyword.operator.comparison
- source: k
  scopes:
    - variable.lower-case
    - variable.other.unknown.k
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: vs
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_filter
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __filter
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: f
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return a list consisting of the elements of *list* for which the'
- source: '      function *f* returns `true`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_filter
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_filter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return true if a list contains a given element. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_elem
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: bool
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: res
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: 'false'
  scopes:
    - constant.language.false
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: elem
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: eqValues
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_elem
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __elem
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: x
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: xs
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if a value equal to *x* occurs in the list *xs*, and'
- source: '      `false` otherwise.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_elem
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_elem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Concatenate a list of lists. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_concatLists
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: concatLists
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_concatLists
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __concatLists
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: lists
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Concatenate a list of lists into a single list.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_concatLists
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_concatLists
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return the length of a list.  This is an O(1) time operation. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_length
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_length
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __length
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the length of the list *e*.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_length
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_length
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Reduce a list by applying a binary operator, from left to'
- source: '   right. The operator is applied strictly. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_foldlStrict
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Value
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: vCur
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
    - meta.binding
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square.binding
- source: 'n'
  scopes:
    - variable.other.for
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: elem
  scopes:
    - variable.other.for
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.binding
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
  scopesEnd:
    - meta.binding
- source: enumerate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: vs
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
- source: '[]'
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: vCur
  scopes:
    - variable.camel-case
    - variable.other.unknown.vCur
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.declaration
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: vCur
  scopes:
    - variable.camel-case
    - variable.other.unknown.vCur
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vs
  scopes:
    - variable.lower-case
    - variable.other.unknown.vs
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: vCur
  scopes:
    - variable.camel-case
    - variable.other.unknown.vCur
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_foldlStrict
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __foldl'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: op
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: nul
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Reduce a list by applying a binary operator, from left to right,'
- source: '      e.g. `foldl'' op nul [x0 x1 x2 ...] = op (op (op nul x0) x1) x2)'
- source: '      ...`. The operator is applied strictly, i.e., its arguments are'
- source: '      evaluated first. For example, `foldl'' (x: y: x + y) 0 [1 2 3]`'
- source: '      evaluates to 6.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_foldlStrict
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_foldlStrict
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: anyOrAll
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: bool
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: any
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: EvalState
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: vTmp
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: elem
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vTmp
  scopes:
    - variable.camel-case
    - variable.other.unknown.vTmp
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: res
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: vTmp
  scopes:
    - variable.camel-case
    - variable.other.unknown.vTmp
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: any
  scopes:
    - variable.lower-case
    - variable.other.unknown.any
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: any
  scopes:
    - variable.lower-case
    - variable.other.unknown.any
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '!'
  scopes:
    - keyword.operator.logical
- source: any
  scopes:
    - variable.lower-case
    - variable.other.unknown.any
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_any
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: anyOrAll
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'true'
  scopes:
    - constant.language.true
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopes:
    - variable.lower-case
    - variable.other.unknown.args
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_any
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __any
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: pred
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if the function *pred* returns `true` for at least one'
- source: '      element of *list*, and `false` otherwise.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_any
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_any
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_all
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: anyOrAll
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: 'false'
  scopes:
    - constant.language.false
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopes:
    - variable.lower-case
    - variable.other.unknown.args
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_all
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __all
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: pred
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if the function *pred* returns `true` for all elements'
- source: '      of *list*, and `false` otherwise.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_all
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_all
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_genList
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: len
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: <
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'cannot create list of size '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: <
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: arg
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: arg
  scopes:
    - variable.lower-case
    - variable.other.object.access.arg
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkApp
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: arg
  scopes:
    - variable.lower-case
    - variable.other.unknown.arg
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_genList
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __genList
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: generator
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: length
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Generate list of size *length*, with each element *i* equal to the'
- source: '      value returned by *generator* `i`. For example,'
- source: '      ```nix'
- source: '      builtins.genList (x: x * x) 5'
- source: '      ```'
- source: '      returns the list `[ 0 1 4 9 16 ]`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_genList
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_genList
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_lessThan
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_sort
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: len
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: <
  scopes:
    - keyword.operator.comparison
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: comparator
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator.bitwise
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: Value
  scopesBegin:
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: a
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: b
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Optimization: if the comparator is lessThan, bypass'
- source: '           callFunction. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: isPrimOp
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: primOp
  scopes:
    - variable.camel-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: fun
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: prim_lessThan
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_lessThan
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: CompareValues
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: a
  scopes:
    - variable.lower-case
    - variable.other.unknown.a
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: b
  scopes:
    - variable.lower-case
    - variable.other.unknown.b
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: vs
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square.array.type
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.array.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: a
  scopes:
    - variable.lower-case
    - variable.other.unknown.a
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: b
  scopes:
    - variable.lower-case
    - variable.other.unknown.b
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: vBool
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vs
  scopes:
    - variable.lower-case
    - variable.other.unknown.vs
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vBool
  scopes:
    - variable.camel-case
    - variable.other.unknown.vBool
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: vBool
  scopes:
    - variable.camel-case
    - variable.other.unknown.vBool
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.assignment
    - meta.function.definition.body.lambda
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' FIXME: std::sort can segfault if the comparator is not a strict'
- source: '       weak ordering. What to do? std::stable_sort() seems more'
- source: '       resilient, but no guarantees... '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: stable_sort
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: comparator
  scopes:
    - variable.lower-case
    - variable.other.unknown.comparator
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_sort
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __sort
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: comparator
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return *list* in sorted order. It repeatedly calls the function'
- source: '      *comparator* with two elements. The comparator should return `true`'
- source: '      if the first element is less than the second, and `false` otherwise.'
- source: '      For example,'
- source: '      ```nix'
- source: '      builtins.sort builtins.lessThan [ 483 249 526 147 42 77 ]'
- source: '      ```'
- source: '      produces the list `[ 42 77 147 249 483 526 ]`.'
- source: '      This is a stable sort: it preserves the relative order of elements'
- source: '      deemed equal by the comparator.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_sort
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_sort
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_partition
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: len
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ValueVector
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: right
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: wrong
  scopes:
    - variable.lower-case
    - variable.other.unknown.wrong
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: <
  scopes:
    - keyword.operator.comparison
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: vElem
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: vElem
  scopes:
    - variable.camel-case
    - variable.other.unknown.vElem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: res
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: vElem
  scopes:
    - variable.camel-case
    - variable.other.unknown.vElem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: right
  scopes:
    - variable.lower-case
    - variable.other.object.access.right
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: vElem
  scopes:
    - variable.camel-case
    - variable.other.unknown.vElem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: wrong
  scopes:
    - variable.lower-case
    - variable.other.object.access.wrong
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: vElem
  scopes:
    - variable.camel-case
    - variable.other.unknown.vElem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildBindings
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: vRight
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sRight
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: rsize
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: right
  scopes:
    - variable.lower-case
    - variable.other.object.access.right
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: vRight
  scopes:
    - variable.camel-case
    - variable.other.unknown.vRight
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rsize
  scopes:
    - variable.lower-case
    - variable.other.unknown.rsize
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: rsize
  scopes:
    - variable.lower-case
    - variable.other.unknown.rsize
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: memcpy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: vRight
  scopes:
    - variable.camel-case
    - variable.other.object.access.vRight
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: right
  scopes:
    - variable.lower-case
    - variable.other.object.access.right
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: Value
  scopesBegin:
    - meta.arguments.operator.sizeof
  scopes:
    - variable.other.unknown.Value
- source: '*'
  scopes:
    - keyword.operator.arithmetic
  scopesEnd:
    - meta.arguments.operator.sizeof
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: rsize
  scopes:
    - variable.lower-case
    - variable.other.unknown.rsize
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: vWrong
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sWrong
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: wsize
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: wrong
  scopes:
    - variable.lower-case
    - variable.other.object.access.wrong
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: vWrong
  scopes:
    - variable.camel-case
    - variable.other.unknown.vWrong
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: wsize
  scopes:
    - variable.lower-case
    - variable.other.unknown.wsize
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: wsize
  scopes:
    - variable.lower-case
    - variable.other.unknown.wsize
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: memcpy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: vWrong
  scopes:
    - variable.camel-case
    - variable.other.object.access.vWrong
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: wrong
  scopes:
    - variable.lower-case
    - variable.other.object.access.wrong
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: Value
  scopesBegin:
    - meta.arguments.operator.sizeof
  scopes:
    - variable.other.unknown.Value
- source: '*'
  scopes:
    - keyword.operator.arithmetic
  scopesEnd:
    - meta.arguments.operator.sizeof
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: wsize
  scopes:
    - variable.lower-case
    - variable.other.unknown.wsize
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.unknown.attrs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_partition
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __partition
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: pred
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Given a predicate function *pred*, this function returns an'
- source: '      attrset containing a list named `right`, containing the elements'
- source: '      in *list* for which *pred* returned `true`, and a list named'
- source: '      `wrong`, containing the elements for which it returned'
- source: '      `false`. For example,'
- source: '      ```nix'
- source: '      builtins.partition (x: x > 10) [1 23 9 3 42]'
- source: '      ```'
- source: '      evaluates to'
- source: '      ```nix'
- source: '      { right = [ 23 42 ]; wrong = [ 1 9 3 ]; }'
- source: '      ```'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_partition
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_partition
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_groupBy
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ValueVectorMap
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: attrs
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: vElem
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: res
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: vElem
  scopes:
    - variable.camel-case
    - variable.other.unknown.vElem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: name
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: sym
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: symbols
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: create
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: vector
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: try_emplace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: sym
  scopes:
    - variable.lower-case
    - variable.other.unknown.sym
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ValueVector
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: vector
  scopes:
    - variable.lower-case
    - variable.other.object.access.vector
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: second
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: vElem
  scopes:
    - variable.camel-case
    - variable.other.unknown.vElem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs2
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildBindings
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: i
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.unknown.attrs
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: list
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: attrs2
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs2
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: size
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: list
  scopes:
    - variable.lower-case
    - variable.other.unknown.list
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size
  scopes:
    - variable.lower-case
    - variable.other.unknown.size
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: memcpy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: list
  scopes:
    - variable.lower-case
    - variable.other.object.access.list
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: Value
  scopesBegin:
    - meta.arguments.operator.sizeof
  scopes:
    - variable.other.unknown.Value
- source: '*'
  scopes:
    - keyword.operator.arithmetic
  scopesEnd:
    - meta.arguments.operator.sizeof
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: size
  scopes:
    - variable.lower-case
    - variable.other.unknown.size
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs2
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs2
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alreadySorted
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_groupBy
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __groupBy
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: f
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Groups elements of *list* together by the string returned from the'
- source: '      function *f* called on each element. It returns an attribute set'
- source: '      where each attribute value contains the elements of *list* that are'
- source: '      mapped to the same corresponding attribute name returned by *f*.'
- source: '      For example,'
- source: '      ```nix'
- source: '      builtins.groupBy (builtins.substring 0 1) ["foo" "bar" "baz"]'
- source: '      ```'
- source: '      evaluates to'
- source: '      ```nix'
- source: '      { b = [ "bar" "baz" ]; f = [ "foo" ]; }'
- source: '      ```'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_groupBy
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_groupBy
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_concatMap
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: nrLists
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: lists
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: nrLists
  scopes:
    - variable.camel-case
    - variable.other.unknown.nrLists
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.declaration
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: size_t
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: len
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: <
  scopes:
    - keyword.operator.comparison
- source: nrLists
  scopes:
    - variable.camel-case
    - variable.other.unknown.nrLists
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Value
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: vElem
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: callFunction
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: vElem
  scopes:
    - variable.camel-case
    - variable.other.unknown.vElem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: lists
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: lists
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: lists
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: determinePos
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: determinePos
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: TypeError
  scopes:
    - variable.other.unknown.TypeError
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: addTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: while invoking '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: concatMap
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: lists
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: out
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - meta.parens.control.for
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: <
  scopes:
    - keyword.operator.comparison
- source: nrLists
  scopes:
    - variable.camel-case
    - variable.other.unknown.nrLists
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: l
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: lists
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: l
  scopes:
    - variable.lower-case
    - variable.other.unknown.l
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: memcpy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: out
  scopes:
    - variable.lower-case
    - variable.other.unknown.out
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: lists
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: l
  scopes:
    - variable.lower-case
    - variable.other.unknown.l
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: Value
  scopesBegin:
    - meta.arguments.operator.sizeof
  scopes:
    - variable.other.unknown.Value
- source: '*'
  scopes:
    - keyword.operator.arithmetic
  scopesEnd:
    - meta.arguments.operator.sizeof
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: l
  scopes:
    - variable.lower-case
    - variable.other.unknown.l
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_concatMap
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __concatMap
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: f
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      This function is equivalent to `builtins.concatLists (map f list)`'
- source: '      but is more efficient.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_concatMap
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_concatMap
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*************************************************************
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * Integer arithmetic'
- source: '*************************************************************/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_add
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nFloat
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFloat
- source: '||'
  scopes:
    - keyword.operator.logical
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nFloat
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFloat
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_add
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __add
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the sum of the numbers *e1* and *e2*.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_add
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_add
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_sub
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nFloat
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFloat
- source: '||'
  scopes:
    - keyword.operator.logical
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nFloat
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFloat
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_sub
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __sub
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the difference between the numbers *e1* and *e2*.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_sub
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_sub
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_mul
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nFloat
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFloat
- source: '||'
  scopes:
    - keyword.operator.logical
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nFloat
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFloat
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_mul
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __mul
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the product of the numbers *e1* and *e2*.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_mul
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_mul
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_div
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: NixFloat
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: f2
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: f2
  scopes:
    - variable.lower-case
    - variable.other.unknown.f2
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: division by zero
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nFloat
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFloat
- source: '||'
  scopes:
    - keyword.operator.logical
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: type
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nFloat
  scopes:
    - variable.camel-case
    - variable.other.unknown.nFloat
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceFloat
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: NixInt
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: i1
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: NixInt
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: i2
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Avoid division overflow as it might raise SIGFPE. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i1
  scopes:
    - variable.lower-case
    - variable.other.unknown.i1
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: numeric_limits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: NixInt
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: min
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: i2
  scopes:
    - variable.lower-case
    - variable.other.unknown.i2
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: overflow in integer division
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i1
  scopes:
    - variable.lower-case
    - variable.other.unknown.i1
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: i2
  scopes:
    - variable.lower-case
    - variable.other.unknown.i2
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_div
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __div
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the quotient of the numbers *e1* and *e2*.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_div
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_div
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_bitAnd
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: v
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_bitAnd
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __bitAnd
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the bitwise AND of the integers *e1* and *e2*.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_bitAnd
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_bitAnd
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_bitOr
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: v
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_bitOr
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __bitOr
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the bitwise OR of the integers *e1* and *e2*.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_bitOr
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_bitOr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_bitXor
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: v
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ^
  scopes:
    - keyword.operator.bitwise
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_bitXor
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __bitXor
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the bitwise XOR of the integers *e1* and *e2*.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_bitXor
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_bitXor
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_lessThan
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: CompareValues
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: comp
  scopes:
    - variable.lower-case
    - variable.other.object.construction
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: state
  scopes:
    - variable.lower-case
    - variable.other.unknown.state
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: comp
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_lessThan
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __lessThan
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return `true` if the number *e1* is less than the number *e2*, and'
- source: '      `false` otherwise. Evaluation aborts if either *e1* or *e2* does not'
- source: '      evaluate to a number.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_lessThan
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_lessThan
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*************************************************************
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * String manipulation'
- source: '*************************************************************/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Convert the argument to a string.  Paths are *not*'
- source: ' copied to the'
- source: '   store, so `toString /foo/bar'' yields `"/foo/bar"'', not'
- source: '   `"/nix/store/whatever..."''. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_toString
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: PathSet
  scopesBegin:
    - meta.body.function.definition
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'true'
  scopes:
    - constant.language.true
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_toString
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: toString
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Convert the expression *e* to a string. *e* can be:'
- source: '        - A string (in which case the string is returned unmodified).'
- source: '        - A path (e.g., `toString /foo/bar` yields `"/foo/bar"`.'
- source: '        - A set containing `{ __toString = self: ...; }` or `{ outPath = ...; }`.'
- source: '        - An integer.'
- source: '        - A list, in which case the string representations of its elements'
- source: '          are joined with spaces.'
- source: '        - A Boolean (`false` yields `""`, `true` yields `"1"`).'
- source: '        - `null`, which yields the empty string.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_toString
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_toString
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' `substring start len str'' returns the substring of `str'' starting'
- source: '   at character position `min(start, stringLength str)'' inclusive and'
- source: '   ending at `min(start + len, stringLength str)''.  `start'' must be'
- source: '   non-negative. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_substring
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: int
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: start
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: len
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: start
  scopes:
    - variable.lower-case
    - variable.other.unknown.start
- source: <
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: negative start position in 'substring'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: unsigned
  scopesBegin:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: int
  scopesEnd:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: start
  scopes:
    - variable.lower-case
    - variable.other.unknown.start
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: s
  scopes:
    - variable.lower-case
    - variable.other.object.access.s
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: s
  scopes:
    - variable.lower-case
    - variable.other.object.access.s
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: start
  scopes:
    - variable.lower-case
    - variable.other.unknown.start
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_substring
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __substring
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: start
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: len
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the substring of *s* from character position *start*'
- source: '      (zero-based) up to but not including *start + len*. If *start* is'
- source: '      greater than the length of the string, an empty string is returned,'
- source: '      and if *start + len* lies beyond the end of the string, only the'
- source: '      substring up to the end of the string is returned. *start* must be'
- source: '      non-negative. For example,'
- source: '      ```nix'
- source: '      builtins.substring 0 3 "nixos"'
- source: '      ```'
- source: '      evaluates to `"nix"`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_substring
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_substring
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_stringLength
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: PathSet
  scopesBegin:
    - meta.body.function.definition
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: s
  scopes:
    - variable.lower-case
    - variable.other.object.access.s
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_stringLength
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __stringLength
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return the length of the string *e*. If *e* is not a string,'
- source: '      evaluation is aborted.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_stringLength
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_stringLength
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Return the cryptographic hash of a string in base-16. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_hashString
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: type
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: optional
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: HashType
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: ht
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: parseHashType
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: type
  scopes:
    - variable.lower-case
    - variable.other.unknown.type
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: ht
  scopes:
    - variable.lower-case
    - variable.other.unknown.ht
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: unknown hash type '
- source: '%1%'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: type
  scopes:
    - variable.lower-case
    - variable.other.unknown.type
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' discarded'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: hashString
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: ht
  scopes:
    - variable.lower-case
    - variable.other.unknown.ht
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: to_string
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: Base16
  scopes:
    - variable.other.unknown.Base16
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_hashString
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __hashString
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: type
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Return a base-16 representation of the cryptographic hash of string'
- source: '      *s*. The hash algorithm specified by *type* must be one of `"md5"`,'
- source: '      `"sha1"`, `"sha256"` or `"sha512"`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_hashString
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_hashString
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: struct
  scopesBegin:
    - meta.block.struct
  scopes:
    - meta.head.struct
    - storage.type.struct
- source: RegexCache
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - meta.head.struct
    - punctuation.section.block.begin.bracket.curly.struct
- source: //
  scopesBegin:
    - meta.body.struct
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' TODO use C++20 transparent comparison when available'
  scopesEnd:
    - comment.line.double-slash
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: unordered_map
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: string_view
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: regex
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: cache
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: list
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: keys
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.function.definition
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: regex
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: get
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: std
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: string_view
  scopes:
    - entity.name.type.parameter
- source: re
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: it
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: cache
  scopes:
    - variable.lower-case
    - variable.other.object.access.cache
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: find
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: re
  scopes:
    - variable.lower-case
    - variable.other.unknown.re
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: it
  scopes:
    - variable.lower-case
    - variable.other.unknown.it
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: cache
  scopes:
    - variable.lower-case
    - variable.other.object.access.cache
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: return
  scopes:
    - keyword.control.return
- source: it
  scopes:
    - variable.lower-case
    - variable.other.object.access.it
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: second
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: keys
  scopes:
    - variable.lower-case
    - variable.other.object.access.keys
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emplace_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: re
  scopes:
    - variable.lower-case
    - variable.other.unknown.re
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: cache
  scopes:
    - variable.lower-case
    - variable.other.object.access.cache
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emplace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: keys
  scopes:
    - variable.lower-case
    - variable.other.object.access.keys
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: regex
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: keys
  scopes:
    - variable.lower-case
    - variable.other.object.access.keys
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: regex
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: extended
  scopes:
    - variable.lower-case
    - variable.other.unknown.extended
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: second
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: std
  scopesBegin:
    - meta.function.definition
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: shared_ptr
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: RegexCache
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: makeRegexCache
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: make_shared
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: RegexCache
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_match
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: re
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: regex
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: regexCache
  scopes:
    - variable.camel-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: re
  scopes:
    - variable.lower-case
    - variable.other.unknown.re
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: str
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: cmatch
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: match
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: regex_match
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: match
  scopes:
    - variable.lower-case
    - variable.other.unknown.match
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: regex
  scopes:
    - variable.lower-case
    - variable.other.unknown.regex
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkNull
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' the first match is the whole string'
  scopesEnd:
    - comment.line.double-slash
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: size_t
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: len
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: match
  scopes:
    - variable.lower-case
    - variable.other.object.access.match
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type
    - storage.type.built-in
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: <
  scopes:
    - keyword.operator.comparison
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: match
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: matched
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkNull
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: match
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: regex_error
  scopes:
    - variable.snake-case
    - variable.other.unknown.regex_error
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: code
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: regex_constants
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: error_space
  scopes:
    - variable.snake-case
    - variable.other.unknown.error_space
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' limit is _GLIBCXX_REGEX_STATE_LIMIT for libstdc++'
  scopesEnd:
    - comment.line.double-slash
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: memory limit exceeded by regular expression '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: re
  scopes:
    - variable.lower-case
    - variable.other.unknown.re
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: invalid regular expression '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: re
  scopes:
    - variable.lower-case
    - variable.other.unknown.re
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_match
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __match
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: regex
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: str
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw.s
    - punctuation.definition.string.s.begin
  scopes:
    - meta.encoding
- source: '"s('
  scopesEnd:
    - punctuation.definition.string.s.begin
- source: '      Returns a list if the [extended POSIX regular'
- source: '      expression](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html#tag_09_04)'
- source: '      *regex* matches *str* precisely, otherwise returns `null`. Each item'
- source: '      in the list is a regex group.'
- source: '      ```nix'
- source: '      builtins.match "ab" "abc"'
- source: '      ```'
- source: '      Evaluates to `null`.'
- source: '      ```nix'
- source: '      builtins.match "abc" "abc"'
- source: '      ```'
- source: '      Evaluates to `[ ]`.'
- source: '      ```nix'
- source: '      builtins.match "a(b)(c)" "abc"'
- source: '      ```'
- source: '      Evaluates to `[ "b" "c" ]`.'
- source: '      ```nix'
- source: '      builtins.match "[[:space:]]+([[:upper:]]+)[[:space:]]+" "  FOO   "'
- source: '      ```'
- source: '      Evaluates to `[ "FOO" ]`.'
- source: )s"
  scopes:
    - punctuation.definition.string.s.end
  scopesEnd:
    - string.quoted.double.raw.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_match
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_match
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Split a string with a regular expression, and return a list of the'
- source: '   non-matching parts interleaved by the lists of the matching groups. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_split
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: re
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: regex
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: regexCache
  scopes:
    - variable.camel-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: re
  scopes:
    - variable.lower-case
    - variable.other.unknown.re
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: str
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: begin
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: cregex_iterator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: regex
  scopes:
    - variable.lower-case
    - variable.other.unknown.regex
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: end
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: cregex_iterator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Any matches results are surrounded by non-matching results.'
  scopesEnd:
    - comment.line.double-slash
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: size_t
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: len
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: distance
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: begin
  scopes:
    - variable.lower-case
    - variable.other.unknown.begin
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: end
  scopes:
    - variable.lower-case
    - variable.other.unknown.end
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: size_t
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: idx
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: idx
  scopes:
    - variable.lower-case
    - variable.other.unknown.idx
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: begin
  scopes:
    - variable.lower-case
    - variable.other.unknown.begin
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: end
  scopes:
    - variable.lower-case
    - variable.other.unknown.end
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: assert
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: idx
  scopes:
    - variable.lower-case
    - variable.other.unknown.idx
- source: <=
  scopes:
    - keyword.operator.comparison
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '3'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: match
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Add a string for non-matched characters.'
  scopesEnd:
    - comment.line.double-slash
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: idx
  scopes:
    - variable.lower-case
    - variable.other.unknown.idx
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: match
  scopes:
    - variable.lower-case
    - variable.other.object.access.match
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: prefix
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Add a list for matched substrings.'
  scopesEnd:
    - comment.line.double-slash
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: size_t
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: slen
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: match
  scopes:
    - variable.lower-case
    - variable.other.object.access.match
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: elem
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: idx
  scopes:
    - variable.lower-case
    - variable.other.unknown.idx
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Start at 1, beacause the first match is the whole string.'
  scopesEnd:
    - comment.line.double-slash
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: slen
  scopes:
    - variable.lower-case
    - variable.other.unknown.slen
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type
    - storage.type.built-in
- source: si
  scopes:
    - variable.lower-case
    - variable.other.unknown.si
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: si
  scopes:
    - variable.lower-case
    - variable.other.unknown.si
- source: <
  scopes:
    - keyword.operator.comparison
- source: slen
  scopes:
    - variable.lower-case
    - variable.other.unknown.slen
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: si
  scopes:
    - variable.lower-case
    - variable.other.unknown.si
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: match
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: si
  scopes:
    - variable.lower-case
    - variable.other.unknown.si
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: matched
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.object.access.elem
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: si
  scopes:
    - variable.lower-case
    - variable.other.unknown.si
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkNull
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.object.access.elem
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: si
  scopes:
    - variable.lower-case
    - variable.other.unknown.si
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: match
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: si
  scopes:
    - variable.lower-case
    - variable.other.unknown.si
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Add a string for non-matched suffix characters.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: idx
  scopes:
    - variable.lower-case
    - variable.other.unknown.idx
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: idx
  scopes:
    - variable.lower-case
    - variable.other.unknown.idx
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: match
  scopes:
    - variable.lower-case
    - variable.other.object.access.match
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: suffix
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: str
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: assert
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: idx
  scopes:
    - variable.lower-case
    - variable.other.unknown.idx
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: len
  scopes:
    - variable.lower-case
    - variable.other.unknown.len
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: regex_error
  scopes:
    - variable.snake-case
    - variable.other.unknown.regex_error
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: e
  scopes:
    - variable.lower-case
    - variable.other.unknown.e
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: e
  scopes:
    - variable.lower-case
    - variable.other.object.access.e
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: code
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: regex_constants
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: error_space
  scopes:
    - variable.snake-case
    - variable.other.unknown.error_space
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' limit is _GLIBCXX_REGEX_STATE_LIMIT for libstdc++'
  scopesEnd:
    - comment.line.double-slash
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: memory limit exceeded by regular expression '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: re
  scopes:
    - variable.lower-case
    - variable.other.unknown.re
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: invalid regular expression '
- source: '%s'
  scopes:
    - constant.other.placeholder
- source: ''''
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: re
  scopes:
    - variable.lower-case
    - variable.other.unknown.re
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '            }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_split
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __split
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: regex
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: str
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw.s
    - punctuation.definition.string.s.begin
  scopes:
    - meta.encoding
- source: '"s('
  scopesEnd:
    - punctuation.definition.string.s.begin
- source: '      Returns a list composed of non matched strings interleaved with the'
- source: '      lists of the [extended POSIX regular'
- source: '      expression](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html#tag_09_04)'
- source: '      *regex* matches of *str*. Each item in the lists of matched'
- source: '      sequences is a regex group.'
- source: '      ```nix'
- source: '      builtins.split "(a)b" "abc"'
- source: '      ```'
- source: '      Evaluates to `[ "" [ "a" ] "c" ]`.'
- source: '      ```nix'
- source: '      builtins.split "([ac])" "abc"'
- source: '      ```'
- source: '      Evaluates to `[ "" [ "a" ] "b" [ "c" ] "" ]`.'
- source: '      ```nix'
- source: '      builtins.split "(a)|(c)" "abc"'
- source: '      ```'
- source: '      Evaluates to `[ "" [ "a" null ] "b" [ null "c" ] "" ]`.'
- source: '      ```nix'
- source: '      builtins.split "([[:upper:]]+)" " FOO "'
- source: '      ```'
- source: '      Evaluates to `[ " " [ "FOO" ] " " ]`.'
- source: )s"
  scopes:
    - punctuation.definition.string.s.end
  scopesEnd:
    - string.quoted.double.raw.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_split
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_split
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_concatStringsSep
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: PathSet
  scopesBegin:
    - meta.body.function.definition
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: sep
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: res
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: res
  scopes:
    - variable.lower-case
    - variable.other.object.access.res
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: reserve
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '32'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: sep
  scopes:
    - variable.lower-case
    - variable.other.object.access.sep
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: first
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: 'true'
  scopes:
    - constant.language.true
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: elem
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: else
  scopes:
    - keyword.control.else
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: sep
  scopes:
    - variable.lower-case
    - variable.other.unknown.sep
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: coerceToString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_concatStringsSep
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __concatStringsSep
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: separator
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: list
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Concatenate a list of strings with a separator between each'
- source: '      element, e.g. `concatStringsSep "/" ["usr" "local" "bin"] =='
- source: '      "usr/local/bin"`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_concatStringsSep
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_concatStringsSep
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_replaceStrings
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: state
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: debugThrowLastTrace
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: EvalError
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '            .'
- source: msg
  scopes:
    - variable.lower-case
    - variable.other.unknown.msg
- source: '='
  scopes:
    - keyword.operator.assignment
- source: hintfmt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '''from'' and ''to'' arguments to ''replaceStrings'' have different lengths'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '            .'
- source: errPos
  scopes:
    - variable.camel-case
    - variable.other.unknown.errPos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: positions
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '        }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: vector
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: from
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: from
  scopes:
    - variable.lower-case
    - variable.other.object.access.from
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: reserve
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: elem
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: from
  scopes:
    - variable.lower-case
    - variable.other.object.access.from
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emplace_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: vector
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: pair
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: PathSet
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: to
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: to
  scopes:
    - variable.lower-case
    - variable.other.object.access.to
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: reserve
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listSize
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: elem
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: listItems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ctx
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ctx
  scopes:
    - variable.lower-case
    - variable.other.unknown.ctx
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: to
  scopes:
    - variable.lower-case
    - variable.other.object.access.to
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emplace_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ctx
  scopes:
    - variable.lower-case
    - variable.other.unknown.ctx
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: PathSet
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: context
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: res
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Loops one past last character to handle the case where ''from'' contains an empty string.'
  scopesEnd:
    - comment.line.double-slash
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type
    - storage.type.built-in
- source: p
  scopes:
    - variable.lower-case
    - variable.other.unknown.p
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: p
  scopes:
    - variable.lower-case
    - variable.other.unknown.p
- source: <=
  scopes:
    - keyword.operator.comparison
- source: s
  scopes:
    - variable.lower-case
    - variable.other.object.access.s
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: bool
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: found
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: 'false'
  scopes:
    - constant.language.false
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: i
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: from
  scopes:
    - variable.lower-case
    - variable.other.object.access.from
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: j
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: to
  scopes:
    - variable.lower-case
    - variable.other.object.access.to
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ;
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: from
  scopes:
    - variable.lower-case
    - variable.other.object.access.from
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ++
  scopes:
    - keyword.operator.increment
- source: j
  scopes:
    - variable.lower-case
    - variable.other.unknown.j
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: s
  scopes:
    - variable.lower-case
    - variable.other.object.access.s
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: compare
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: p
  scopes:
    - variable.lower-case
    - variable.other.unknown.p
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: found
  scopes:
    - variable.lower-case
    - variable.other.unknown.found
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: j
  scopes:
    - variable.lower-case
    - variable.other.object.access.j
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: first
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: p
  scopes:
    - variable.lower-case
    - variable.other.unknown.p
- source: <
  scopes:
    - keyword.operator.comparison
- source: s
  scopes:
    - variable.lower-case
    - variable.other.object.access.s
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: s
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: p
  scopes:
    - variable.lower-case
    - variable.other.unknown.p
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: p
  scopes:
    - variable.lower-case
    - variable.other.unknown.p
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: p
  scopes:
    - variable.lower-case
    - variable.other.unknown.p
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: path
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: j
  scopes:
    - variable.lower-case
    - variable.other.object.access.j
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: second
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: context
  scopes:
    - variable.lower-case
    - variable.other.object.access.context
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: insert
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: path
  scopes:
    - variable.lower-case
    - variable.other.unknown.path
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: j
  scopes:
    - variable.lower-case
    - variable.other.object.access.j
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: second
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: clear
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: found
  scopes:
    - variable.lower-case
    - variable.other.unknown.found
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: p
  scopes:
    - variable.lower-case
    - variable.other.unknown.p
- source: <
  scopes:
    - keyword.operator.comparison
- source: s
  scopes:
    - variable.lower-case
    - variable.other.object.access.s
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: s
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: p
  scopes:
    - variable.lower-case
    - variable.other.unknown.p
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: p
  scopes:
    - variable.lower-case
    - variable.other.unknown.p
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: res
  scopes:
    - variable.lower-case
    - variable.other.unknown.res
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: context
  scopes:
    - variable.lower-case
    - variable.other.unknown.context
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_replaceStrings
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __replaceStrings
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: from
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: to
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Given string *s*, replace every occurrence of the strings in *from*'
- source: '      with the corresponding string in *to*. For example,'
- source: '      ```nix'
- source: '      builtins.replaceStrings ["oo" "a"] ["a" "i"] "foobar"'
- source: '      ```'
- source: '      evaluates to `"fabir"`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_replaceStrings
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_replaceStrings
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*************************************************************
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * Versions'
- source: '*************************************************************/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_parseDrvName
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: name
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: DrvName
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: parsed
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buildBindings
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sName
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: parsed
  scopes:
    - variable.lower-case
    - variable.other.object.access.parsed
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: version
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: parsed
  scopes:
    - variable.lower-case
    - variable.other.object.access.parsed
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: version
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.unknown.attrs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_parseDrvName
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __parseDrvName
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Split the string *s* into a package name and version. The package'
- source: '      name is everything up to but not including the first dash followed'
- source: '      by a digit, and the version is everything following that dash. The'
- source: '      result is returned in a set `{ name, version }`. Thus,'
- source: '      `builtins.parseDrvName "nix-0.12pre12876"` returns `{ name ='
- source: '      "nix"; version = "0.12pre12876"; }`.'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_parseDrvName
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_parseDrvName
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_compareVersions
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: version1
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: version2
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: compareVersions
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: version1
  scopes:
    - variable.lower-case
    - variable.other.unknown.version1
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: version2
  scopes:
    - variable.lower-case
    - variable.other.unknown.version2
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_compareVersions
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __compareVersions
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s1
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s2
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.parameter
- source: '    .'
- source: doc
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Compare two strings representing versions and return `-1` if'
- source: '      version *s1* is older than version *s2*, `0` if they are the same,'
- source: '      and `1` if *s1* is newer than *s2*. The version comparison'
- source: '      algorithm is the same as the one used by [`nix-env'
- source: '      -u`](../command-ref/nix-env.md#operation---upgrade).'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_compareVersions
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_compareVersions
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.static
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: prim_splitVersion
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: EvalState
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: state
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: PosIdx
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: args
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Value
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: v
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: version
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: forceStringNoCtx
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: args
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: iter
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: version
  scopes:
    - variable.lower-case
    - variable.other.object.access.version
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: cbegin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Strings
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: components
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: iter
  scopes:
    - variable.lower-case
    - variable.other.unknown.iter
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: version
  scopes:
    - variable.lower-case
    - variable.other.object.access.version
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: cend
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: component
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: nextComponent
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: iter
  scopes:
    - variable.lower-case
    - variable.other.unknown.iter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: version
  scopes:
    - variable.lower-case
    - variable.other.object.access.version
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: cend
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: component
  scopes:
    - variable.lower-case
    - variable.other.object.access.component
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: components
  scopes:
    - variable.lower-case
    - variable.other.object.access.components
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emplace_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: component
  scopes:
    - variable.lower-case
    - variable.other.unknown.component
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkList
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: components
  scopes:
    - variable.lower-case
    - variable.other.object.access.components
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: const
  scopesBegin:
    - meta.parens.control.for
    - meta.binding
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square.binding
- source: 'n'
  scopes:
    - variable.other.for
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: component
  scopes:
    - variable.other.for
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.binding
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
  scopesEnd:
    - meta.binding
- source: enumerate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: components
  scopes:
    - variable.lower-case
    - variable.other.unknown.components
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: state
  scopes:
    - variable.lower-case
    - variable.other.object.access.state
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: allocValue
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: component
  scopes:
    - variable.lower-case
    - variable.other.unknown.component
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: static
  scopes:
    - storage.modifier.static
- source: RegisterPrimOp
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: primop_splitVersion
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: '{'
  scopesBegin:
    - meta.function.definition.parameters
- source: '    .'
- source: name
  scopesBegin:
    - meta.parameter
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __splitVersion
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: args
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: s
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: doc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: R
  scopesBegin:
    - string.quoted.double.raw
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"('
  scopesEnd:
    - punctuation.definition.string.begin
- source: '      Split a string representing a version into its components, by the'
- source: '      same version splitting logic underlying the version comparison in'
- source: '      [`nix-env -u`](../command-ref/nix-env.md#operation---upgrade).'
- source: )"
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.raw
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    .'
- source: fun
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: prim_splitVersion
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_splitVersion
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*************************************************************
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * Primop registration'
- source: '*************************************************************/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: RegisterPrimOp
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: PrimOps
  scopes:
    - variable.other.unknown.PrimOps
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: RegisterPrimOp
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: primOps
  scopes:
    - variable.camel-case
    - variable.other.unknown.primOps
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: RegisterPrimOp
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: RegisterPrimOp
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: string
  scopesBegin:
    - variable.lower-case
  scopes:
    - variable.other.unknown.string
- source: name
  scopes:
    - variable.other.unknown.name
  scopesEnd:
    - variable.lower-case
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: arity
  scopes:
    - variable.lower-case
    - variable.other.unknown.arity
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: PrimOpFun
  scopes:
    - variable.other.unknown.PrimOpFun
- source: fun
  scopes:
    - variable.lower-case
    - variable.other.unknown.fun
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: primOps
  scopes:
    - variable.camel-case
    - variable.other.unknown.primOps
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: primOps
  scopes:
    - variable.camel-case
    - variable.other.unknown.primOps
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.new
- source: PrimOps
  scopes:
    - variable.other.unknown.PrimOps
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: primOps
  scopes:
    - variable.camel-case
    - variable.other.object.access.primOps
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '{'
- source: '        .'
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: '='
  scopes:
    - keyword.operator.assignment
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '        .'
- source: args
  scopes:
    - variable.lower-case
    - variable.other.unknown.args
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '        .'
- source: arity
  scopes:
    - variable.lower-case
    - variable.other.unknown.arity
- source: '='
  scopes:
    - keyword.operator.assignment
- source: arity
  scopes:
    - variable.lower-case
    - variable.other.unknown.arity
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '        .'
- source: fun
  scopes:
    - variable.lower-case
    - variable.other.unknown.fun
- source: '='
  scopes:
    - keyword.operator.assignment
- source: fun
  scopes:
    - variable.lower-case
    - variable.other.unknown.fun
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '    }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: RegisterPrimOp
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: RegisterPrimOp
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: Info
  scopes:
    - variable.other.unknown.Info
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: info
  scopes:
    - variable.lower-case
    - variable.other.unknown.info
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: primOps
  scopes:
    - variable.camel-case
    - variable.other.unknown.primOps
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: primOps
  scopes:
    - variable.camel-case
    - variable.other.unknown.primOps
- source: '='
  scopes:
    - keyword.operator.assignment
- source: new
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.new
- source: PrimOps
  scopes:
    - variable.other.unknown.PrimOps
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: primOps
  scopes:
    - variable.camel-case
    - variable.other.object.access.primOps
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: info
  scopes:
    - variable.lower-case
    - variable.other.unknown.info
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: EvalState
  scopes:
    - entity.name.scope-resolution.function.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.definition
- source: createBaseEnv
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: baseEnv
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.camel-case
    - variable.other.object.access.baseEnv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: up
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Add global constants such as `true'' to the base environment. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: Value
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: v
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' `builtins'' must be first! '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: buildBindings
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '128'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: finish
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: addConstant
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: builtins
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: addConstant
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'true'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkBool
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: 'false'
  scopes:
    - constant.language.false
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: addConstant
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'false'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkNull
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: addConstant
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'null'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: evalSettings
  scopes:
    - variable.camel-case
    - variable.other.object.access.evalSettings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pureEval
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: time
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: addConstant
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __currentTime
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: settings
  scopes:
    - variable.lower-case
    - variable.other.object.access.settings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: thisSystem
  scopes:
    - variable.camel-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: addConstant
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __currentSystem
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: nixVersion
  scopes:
    - variable.camel-case
    - variable.other.unknown.nixVersion
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: addConstant
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __nixVersion
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: store
  scopes:
    - variable.lower-case
    - variable.other.object.access.store
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: storeDir
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: addConstant
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __storeDir
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Language version.  This should be increased every time a new'
- source: '       language feature gets added.  It''s not necessary to increase it'
- source: '       when primops get added, because you can just use `builtins ?'
- source: '       primOp'' to check. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkInt
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: addConstant
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __langVersion
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Miscellaneous'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: evalSettings
  scopes:
    - variable.camel-case
    - variable.other.object.access.evalSettings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: enableNativeCode
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: addPrimOp
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __importNative
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: prim_importNative
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_importNative
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: addPrimOp
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __exec
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: prim_exec
  scopes:
    - variable.snake-case
    - variable.other.unknown.prim_exec
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Add a value containing the current Nix expression search path. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: mkList
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: searchPath
  scopes:
    - variable.camel-case
    - variable.other.object.access.searchPath
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: 'n'
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: i
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: searchPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.searchPath
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: attrs
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: buildBindings
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: path
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.access.attrs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: alloc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: prefix
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mkString
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.object.access.i
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: v
  scopes:
    - variable.lower-case
    - variable.other.object.access.v
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: listElems
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: ++
  scopes:
    - keyword.operator.increment
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: allocValue
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: mkAttrs
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.unknown.attrs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: addConstant
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: __nixPath
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: v
  scopes:
    - variable.lower-case
    - variable.other.unknown.v
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: RegisterPrimOp
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: primOps
  scopes:
    - variable.camel-case
    - variable.other.unknown.primOps
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: primOp
  scopes:
    - variable.other.object.declare.for
- source: ':'
  scopes:
    - punctuation.separator.colon.range-based
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: RegisterPrimOp
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: primOps
  scopes:
    - variable.camel-case
    - variable.other.unknown.primOps
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: primOp
  scopes:
    - variable.camel-case
    - variable.other.object.access.primOp
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: experimentalFeature
  scopes:
    - variable.other.property
- source: '||'
  scopes:
    - keyword.operator.logical
- source: settings
  scopes:
    - variable.lower-case
    - variable.other.object.access.settings
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: isExperimentalFeatureEnabled
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: primOp
  scopes:
    - variable.camel-case
    - variable.other.object.access.primOp
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: experimentalFeature
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: addPrimOp
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '{'
- source: '                    .'
- source: fun
  scopes:
    - variable.lower-case
    - variable.other.unknown.fun
- source: '='
  scopes:
    - keyword.operator.assignment
- source: primOp
  scopes:
    - variable.camel-case
    - variable.other.object.access.primOp
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: fun
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                    .'
- source: arity
  scopes:
    - variable.lower-case
    - variable.other.unknown.arity
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: max
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: primOp
  scopes:
    - variable.camel-case
    - variable.other.object.access.primOp
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: args
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: primOp
  scopes:
    - variable.camel-case
    - variable.other.object.access.primOp
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: arity
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                    .'
- source: name
  scopes:
    - variable.lower-case
    - variable.other.unknown.name
- source: '='
  scopes:
    - keyword.operator.assignment
- source: primOp
  scopes:
    - variable.camel-case
    - variable.other.object.access.primOp
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: name
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                    .'
- source: args
  scopes:
    - variable.lower-case
    - variable.other.unknown.args
- source: '='
  scopes:
    - keyword.operator.assignment
- source: primOp
  scopes:
    - variable.camel-case
    - variable.other.object.access.primOp
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: args
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                    .'
- source: doc
  scopes:
    - variable.lower-case
    - variable.other.unknown.doc
- source: '='
  scopes:
    - keyword.operator.assignment
- source: primOp
  scopes:
    - variable.camel-case
    - variable.other.object.access.primOp
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: doc
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '                }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Add a wrapper around the derivation primop that computes the'
- source: '       `drvPath'' and `outPath'' attributes lazily. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: sDerivationNix
  scopes:
    - variable.camel-case
    - variable.other.unknown.sDerivationNix
- source: '='
  scopes:
    - keyword.operator.assignment
- source: symbols
  scopes:
    - variable.lower-case
    - variable.other.object.access.symbols
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: create
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: derivationNixPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.derivationNixPath
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: vDerivation
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.camel-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: allocValue
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: addConstant
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: derivation
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: vDerivation
  scopes:
    - variable.camel-case
    - variable.other.unknown.vDerivation
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Now that we''ve added all primops, sort the `builtins'' set,'
- source: '       because attribute lookups expect it to be sorted. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: baseEnv
  scopes:
    - variable.camel-case
    - variable.other.object.access.baseEnv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: values
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: attrs
  scopes:
    - variable.lower-case
    - variable.other.object.property
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: sort
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: staticBaseEnv
  scopes:
    - variable.camel-case
    - variable.other.object.access.staticBaseEnv
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: sort
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' Note: we have to initialize the ''derivation'' constant *after*'
- source: '       building baseEnv/staticBaseEnv because it uses ''builtins''. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: char
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: code
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square.array.type
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.array.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: primops/derivation.nix.gen.hh
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.double.include
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' the parser needs two NUL bytes as terminators; one of them'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' is implied by being a C string.'
  scopesEnd:
    - comment.line.double-slash
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \0
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: eval
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: parse
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: code
  scopes:
    - variable.lower-case
    - variable.other.unknown.code
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: code
  scopes:
    - meta.arguments.operator.sizeof
    - variable.lower-case
    - variable.other.unknown.code
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: foFile
  scopes:
    - variable.camel-case
    - variable.other.unknown.foFile
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: derivationNixPath
  scopes:
    - variable.camel-case
    - variable.other.unknown.derivationNixPath
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: staticBaseEnv
  scopes:
    - variable.camel-case
    - variable.other.unknown.staticBaseEnv
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: vDerivation
  scopes:
    - variable.camel-case
    - variable.other.unknown.vDerivation
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.namespace
