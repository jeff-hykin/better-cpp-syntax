- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' This file is part of Asteria.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Copyleft 2018 - 2019, LH_Mouse. All wrongs reserved.'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: ../precompiled.hpp
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: token_stream.hpp
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: token.hpp
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: parser_error.hpp
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: '"'
  scopesBegin:
    - string.quoted.double.include
  scopes:
    - punctuation.definition.string.begin
- source: ../utilities.hpp
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.double.include
- source: namespace
  scopesBegin:
    - meta.block.namespace
    - meta.head.namespace
  scopes:
    - keyword.other.namespace.definition
    - storage.type.namespace.definition
- source: Asteria
  scopes:
    - entity.name.namespace
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.namespace
  scopesEnd:
    - meta.head.namespace
- source: namespace
  scopesBegin:
    - meta.body.namespace
    - meta.block.namespace
    - meta.head.namespace
  scopes:
    - keyword.other.namespace.definition
    - storage.type.namespace.definition
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.namespace
  scopesEnd:
    - meta.head.namespace
- source: class
  scopesBegin:
    - meta.body.namespace
    - meta.block.class
  scopes:
    - meta.head.class
    - storage.type.class
- source: Line_Reader
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - meta.head.class
    - punctuation.section.block.begin.bracket.curly.class
- source: private
  scopesBegin:
    - meta.body.class
    - storage.type.modifier.access.control.private
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.private
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: reference_wrapper
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: streambuf
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: m_cbuf
  scopes:
    - meta.declaration
    - variable.snake-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Cow_String
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: m_file
  scopes:
    - meta.declaration
    - variable.snake-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Cow_String
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: m_str
  scopes:
    - meta.declaration
    - variable.snake-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: uint32_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: m_line
  scopes:
    - meta.declaration
    - variable.snake-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: m_offset
  scopes:
    - meta.declaration
    - variable.snake-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: public
  scopesBegin:
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: Line_Reader
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: std
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: streambuf
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: xcbuf
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Cow_String
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: xfile
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: m_cbuf
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: xcbuf
  scopes:
    - meta.parameter.initialization
    - variable.lower-case
    - variable.other.unknown.xcbuf
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: m_file
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: xfile
  scopes:
    - meta.parameter.initialization
    - variable.lower-case
    - variable.other.unknown.xfile
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: m_str
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: m_line
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '0'
  scopes:
    - meta.parameter.initialization
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: m_offset
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '0'
  scopes:
    - meta.parameter.initialization
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
- source: Line_Reader
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Line_Reader
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: '='
  scopes:
    - keyword.operator.assignment
- source: delete
  scopes:
    - keyword.other.delete.function
    - keyword.other.delete.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Line_Reader
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '='
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Line_Reader
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '='
  scopes:
    - keyword.operator.assignment
- source: delete
  scopes:
    - keyword.other.delete.function
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: public
  scopesBegin:
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: std
  scopesBegin:
    - meta.function.definition
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: streambuf
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: cbuf
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_cbuf
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const
  scopes:
    - storage.modifier.const
- source: Cow_String
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: file
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_file
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: uint32_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: line
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_line
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: bool
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: advance
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Clear the current line buffer.'
  scopesEnd:
    - comment.line.double-slash
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_str
  scopes:
    - variable.snake-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: clear
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_offset
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Buffer a line.'
  scopesEnd:
    - comment.line.double-slash
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ;
  scopesBegin:
    - meta.parens.control.for
    - punctuation.terminator.statement
- source: ;
  scopesEnd:
    - meta.parens.control.for
    - punctuation.terminator.statement
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ich
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_cbuf
  scopes:
    - variable.snake-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: sbumpc
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ich
  scopes:
    - variable.lower-case
    - variable.other.unknown.ich
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: eof
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Return `false` to indicate that there are no more data, when nothing has been read so far.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_str
  scopes:
    - variable.snake-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ich
  scopes:
    - variable.lower-case
    - variable.other.unknown.ich
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_str
  scopes:
    - variable.snake-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ich
  scopes:
    - variable.lower-case
    - variable.other.unknown.ich
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Increment the line number.'
  scopesEnd:
    - comment.line.double-slash
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_line
  scopes:
    - variable.other.property
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ASTERIA_DEBUG_LOG
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Read line '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: setw
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_line
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ': '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_str
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: offset
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_offset
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const
  scopes:
    - storage.modifier.const
- source: char
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: data_avail
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_str
  scopes:
    - variable.snake-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_offset
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: size_avail
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_str
  scopes:
    - variable.snake-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_offset
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: char
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: peek
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: std
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: add
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: add
  scopes:
    - variable.lower-case
    - variable.other.unknown.add
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: data_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: add
  scopes:
    - variable.lower-case
    - variable.other.unknown.add
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: consume
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: std
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: add
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: add
  scopes:
    - variable.lower-case
    - variable.other.unknown.add
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ASTERIA_THROW_RUNTIME_ERROR
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: An attempt was made to seek past the end of the current line.
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_offset
  scopes:
    - variable.other.property
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: add
  scopes:
    - variable.lower-case
    - variable.other.unknown.add
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: rewind
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: std
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: xoffset
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: this
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_offset
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: xoffset
  scopes:
    - variable.lower-case
    - variable.other.unknown.xoffset
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: inline
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.inline
- source: Parser_Error
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: do_make_parser_error
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Line_Reader
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: reader
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: length
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: Code
  scopes:
    - entity.name.type.parameter
- source: code
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: Parser_Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: line
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: offset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: length
  scopes:
    - variable.lower-case
    - variable.other.unknown.length
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: code
  scopes:
    - variable.lower-case
    - variable.other.unknown.code
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: class
  scopesBegin:
    - meta.block.class
  scopes:
    - meta.head.class
    - storage.type.class
- source: Tack
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - meta.head.class
    - punctuation.section.block.begin.bracket.curly.class
- source: private
  scopesBegin:
    - meta.body.class
    - storage.type.modifier.access.control.private
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.private
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: uint32_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: m_line
  scopes:
    - meta.declaration
    - variable.snake-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: m_offset
  scopes:
    - meta.declaration
    - variable.snake-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: m_length
  scopes:
    - meta.declaration
    - variable.snake-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: public
  scopesBegin:
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: constexpr
  scopesBegin:
    - meta.function.definition.special.constructor
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: Tack
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: m_line
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '0'
  scopes:
    - meta.parameter.initialization
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: m_offset
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '0'
  scopes:
    - meta.parameter.initialization
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: m_length
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '0'
  scopes:
    - meta.parameter.initialization
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
- source: public
  scopesBegin:
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: constexpr
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.constexpr
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: uint32_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: line
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_line
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: constexpr
  scopes:
    - storage.modifier.constexpr
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: offset
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_offset
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: constexpr
  scopes:
    - storage.modifier.constexpr
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: length
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_length
  scopes:
    - variable.other.property
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: explicit
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.explicit
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: bool
  scopes:
    - entity.name.operator.type
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_line
  scopes:
    - variable.other.property
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: Tack
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: set
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Line_Reader
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: reader
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: xlength
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: this
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_line
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: line
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_offset
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: offset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_length
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: xlength
  scopes:
    - variable.lower-case
    - variable.other.unknown.xlength
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: Tack
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: clear
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: this
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_line
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: char32_t
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: do_get_utf8_code_point
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: Line_Reader
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: reader
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Read the first byte.'
  scopesEnd:
    - comment.line.double-slash
- source: char32_t
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: cpnt
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: peek
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: FF
  scopes:
    - constant.numeric.hexadecimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: <
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '80'
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' This sequence contains only one byte.'
  scopesEnd:
    - comment.line.double-slash
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: consume
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: <
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: C0
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: F8
  scopes:
    - constant.numeric.hexadecimal
- source: <=
  scopes:
    - keyword.operator.comparison
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' This is not a leading character.'
  scopesEnd:
    - comment.line.double-slash
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_utf8_sequence_invalid
  scopes:
    - variable.other.unknown.code_utf8_sequence_invalid
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Calculate the number of bytes in this code point.'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: u8len
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: E0
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: F0
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ROCKET_ASSERT
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: u8len
  scopes:
    - variable.lower-case
    - variable.other.unknown.u8len
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ROCKET_ASSERT
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: u8len
  scopes:
    - variable.lower-case
    - variable.other.unknown.u8len
- source: <=
  scopes:
    - keyword.operator.comparison
- source: '4'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: u8len
  scopes:
    - variable.lower-case
    - variable.other.unknown.u8len
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' No enough characters have been provided.'
  scopesEnd:
    - comment.line.double-slash
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_utf8_sequence_incomplete
  scopes:
    - variable.other.unknown.code_utf8_sequence_incomplete
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Unset bits that are not part of the payload.'
  scopesEnd:
    - comment.line.double-slash
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: '='
  scopes:
    - keyword.operator.assignment
- source: UINT32_C
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: FF
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: u8len
  scopes:
    - variable.lower-case
    - variable.other.unknown.u8len
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Accumulate trailing code units.'
  scopesEnd:
    - comment.line.double-slash
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: <
  scopes:
    - keyword.operator.comparison
- source: u8len
  scopes:
    - variable.lower-case
    - variable.other.unknown.u8len
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: char32_t
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: next
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: peek
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: FF
  scopes:
    - constant.numeric.hexadecimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: <
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '80'
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: C0
  scopes:
    - constant.numeric.hexadecimal
- source: <=
  scopes:
    - keyword.operator.comparison
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' This trailing character is not valid.'
  scopesEnd:
    - comment.line.double-slash
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_utf8_sequence_invalid
  scopes:
    - variable.other.unknown.code_utf8_sequence_invalid
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 3F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: D800
  scopes:
    - constant.numeric.hexadecimal
- source: <=
  scopes:
    - keyword.operator.comparison
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: <
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: E000
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '110000'
  scopes:
    - constant.numeric.hexadecimal
- source: <=
  scopes:
    - keyword.operator.comparison
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Code point value is reserved or too large.'
  scopesEnd:
    - comment.line.double-slash
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: u8len
  scopes:
    - variable.lower-case
    - variable.other.unknown.u8len
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_utf_code_point_invalid
  scopes:
    - variable.other.unknown.code_utf_code_point_invalid
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Re-encode it and check for overlong sequences.'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: mlen
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '80'
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '800'
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '10000'
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: mlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.mlen
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: u8len
  scopes:
    - variable.lower-case
    - variable.other.unknown.u8len
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Overlong sequences are not allowed.'
  scopesEnd:
    - comment.line.double-slash
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: u8len
  scopes:
    - variable.lower-case
    - variable.other.unknown.u8len
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_utf8_sequence_invalid
  scopes:
    - variable.other.unknown.code_utf8_sequence_invalid
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: consume
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: u8len
  scopes:
    - variable.lower-case
    - variable.other.unknown.u8len
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: typename
  scopes:
    - storage.type.template.argument.typename
- source: XtokenT
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: do_push_token
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: Cow_Vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Token
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: '&'
  scopes:
    - storage.modifier.reference
- source: seq
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Line_Reader
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: reader
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: length
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: XtokenT
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopesBegin:
    - storage.modifier.reference
- source: '&'
  scopesEnd:
    - storage.modifier.reference
- source: xtoken
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: seq
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.object.access.seq
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: emplace_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: file
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: line
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: offset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: length
  scopes:
    - variable.lower-case
    - variable.other.unknown.length
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rocket
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: forward
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: XtokenT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: xtoken
  scopes:
    - variable.lower-case
    - variable.other.unknown.xtoken
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: consume
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: length
  scopes:
    - variable.lower-case
    - variable.other.unknown.length
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: struct
  scopesBegin:
    - meta.block.struct
  scopes:
    - meta.head.struct
    - storage.type.struct
- source: Prefix_Comparator
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - meta.head.struct
    - punctuation.section.block.begin.bracket.curly.struct
- source: template
  scopesBegin:
    - meta.body.struct
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: typename
  scopes:
    - storage.type.template.argument.typename
- source: ElementT
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ()
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: ElementT
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: lhs
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: ElementT
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: rhs
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: compare
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: lhs
  scopes:
    - variable.lower-case
    - variable.other.object.access.lhs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rhs
  scopes:
    - variable.lower-case
    - variable.other.object.access.rhs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: lhs
  scopesBegin:
    - meta.arguments.operator.sizeof
  scopes:
    - variable.lower-case
    - variable.other.object.access.lhs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.arguments.operator.sizeof
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: <
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: typename
  scopes:
    - storage.type.template.argument.typename
- source: ElementT
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ()
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: char
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: lhs
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: ElementT
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: rhs
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: lt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: lhs
  scopes:
    - variable.lower-case
    - variable.other.unknown.lhs
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rhs
  scopes:
    - variable.lower-case
    - variable.other.object.access.rhs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: typename
  scopes:
    - storage.type.template.argument.typename
- source: ElementT
  scopes:
    - entity.name.type.template
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: bool
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ()
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: ElementT
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: lhs
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: rhs
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: lt
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: lhs
  scopes:
    - variable.lower-case
    - variable.other.object.access.lhs
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rhs
  scopes:
    - variable.lower-case
    - variable.other.unknown.rhs
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: bool
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: do_accept_identifier_or_keyword
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: Cow_Vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Token
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: '&'
  scopes:
    - storage.modifier.reference
- source: seq
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Line_Reader
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: reader
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: keyword_as_identifier
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' identifier ::='
- source: //
  scopes:
    - punctuation.definition.comment
- source: '   PCRE([A-Za-z_][A-Za-z_0-9]*)'
  scopesEnd:
    - comment.line.double-slash
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: char
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s_name_chars
  scopes:
    - variable.other.unknown.s_name_chars
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square.array.type
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.array.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_0123456789
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: bptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_name_chars
  scopes:
    - variable.other.unknown.s_name_chars
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '53'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Get an identifier.'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: eptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: tptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: find_if_not
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: eptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.eptr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator.bitwise
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: char
  scopesBegin:
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ch
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: return
  scopes:
    - keyword.control.return
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_name_chars
  scopes:
    - variable.other.unknown.s_name_chars
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '63'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: tlen
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: keyword_as_identifier
  scopes:
    - variable.other.unknown.keyword_as_identifier
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Check whether this identifier matches a keyword.'
  scopesEnd:
    - comment.line.double-slash
- source: struct
  scopesBegin:
    - meta.block.struct
  scopes:
    - meta.head.struct
    - storage.type.struct
- source: Keyword_Element
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - meta.head.struct
    - punctuation.section.block.begin.bracket.curly.struct
- source: char
  scopesBegin:
    - meta.body.struct
    - meta.declaration
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: first
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '12'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.declaration
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Token
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Keyword
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: second
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: uintptr_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: ' : '
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: static
  scopesBegin:
    - meta.tail.struct
  scopes:
    - storage.modifier.specifier.static
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: s_keywords
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_keywords
- source: '[] '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: and
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_and
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_and
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: assert
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_assert
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_assert
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: break
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_break
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_break
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: case
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_case
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_case
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: catch
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_catch
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_catch
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: const
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_const
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_const
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: continue
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_continue
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_continue
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: default
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_default
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_default
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: defer
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_defer
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_defer
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: do
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_do
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_do
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: each
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_each
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_each
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: else
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_else
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_else
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'false'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_false
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_false
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: for
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_for
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_for
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: func
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_func
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_func
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: if
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_if
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_if
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: infinity
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_infinity
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_infinity
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: lengthof
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_lengthof
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_lengthof
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: nan
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_nan
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_nan
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: not
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_not
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_not
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'null'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_null
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_null
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: or
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_or
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_or
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: return
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_return
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_return
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: switch
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_switch
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_switch
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: this
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_this
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_this
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: throw
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_throw
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_throw
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'true'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_true
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_true
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: try
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_try
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_try
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: typeof
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_typeof
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_typeof
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: unset
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_unset
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_unset
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: var
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_var
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_var
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: while
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_while
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_while
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.tail.struct
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: '#'
  scopesBegin:
    - keyword.control.directive.conditional.ifdef
  scopes:
    - punctuation.definition.directive
- source: ifdef
  scopesEnd:
    - keyword.control.directive.conditional.ifdef
- source: ROCKET_DEBUG
  scopes:
    - meta.preprocessor.conditional
    - entity.name.function.preprocessor
- source: ROCKET_ASSERT
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: is_sorted
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: begin
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_keywords
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_keywords
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: end
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_keywords
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_keywords
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Prefix_Comparator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
- source: )
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '#'
  scopesBegin:
    - keyword.control.directive.endif
  scopes:
    - punctuation.definition.directive
- source: endif
  scopesEnd:
    - keyword.control.directive.endif
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: range
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: equal_range
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: begin
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_keywords
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_keywords
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: end
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_keywords
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_keywords
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Prefix_Comparator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ;
  scopesBegin:
    - meta.parens.control.for
    - punctuation.terminator.statement
- source: ;
  scopesEnd:
    - meta.parens.control.for
    - punctuation.terminator.statement
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: range
  scopes:
    - variable.lower-case
    - variable.other.object.access.range
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: range
  scopes:
    - variable.lower-case
    - variable.other.object.access.range
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' No matching keyword has been found so far.'
  scopesEnd:
    - comment.line.double-slash
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: cur
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: range
  scopes:
    - variable.lower-case
    - variable.other.object.access.range
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: length
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: cur
  scopes:
    - variable.lower-case
    - variable.other.object.access.cur
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: compare
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: cur
  scopes:
    - variable.lower-case
    - variable.other.object.access.cur
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' A keyword has been found.'
  scopesEnd:
    - comment.line.double-slash
- source: Token
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: S_keyword
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: xtoken
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: cur
  scopes:
    - variable.lower-case
    - variable.other.object.access.cur
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.assignment
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: do_push_token
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rocket
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: xtoken
  scopes:
    - variable.lower-case
    - variable.other.unknown.xtoken
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: range
  scopes:
    - variable.lower-case
    - variable.other.object.access.range
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: ++
  scopes:
    - keyword.operator.increment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: Token
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: S_identifier
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: xtoken
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: Cow_String
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.assignment
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: do_push_token
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rocket
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: xtoken
  scopes:
    - variable.lower-case
    - variable.other.unknown.xtoken
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: bool
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: do_accept_punctuator
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: Cow_Vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Token
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: '&'
  scopes:
    - storage.modifier.reference
- source: seq
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Line_Reader
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: reader
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: static
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - storage.modifier.specifier.static
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: char
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s_punct_chars
  scopes:
    - variable.other.unknown.s_punct_chars
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square.array.type
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.array.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!%&()*+,-./:;<=>?[]^{|}~'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: bptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_punct_chars
  scopes:
    - variable.other.unknown.s_punct_chars
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: length
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_punct_chars
  scopes:
    - variable.other.unknown.s_punct_chars
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Get a punctuator.'
  scopesEnd:
    - comment.line.double-slash
- source: struct
  scopesBegin:
    - meta.block.struct
  scopes:
    - meta.head.struct
    - storage.type.struct
- source: Punctuator_Element
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - meta.head.struct
    - punctuation.section.block.begin.bracket.curly.struct
- source: char
  scopesBegin:
    - meta.body.struct
    - meta.declaration
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: first
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.declaration
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Token
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: Punctuator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: second
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: uintptr_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: ' : '
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: static
  scopesBegin:
    - meta.tail.struct
  scopes:
    - storage.modifier.specifier.static
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: s_punctuators
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_punctuators
- source: '[] '
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_notl
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_notl
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '!='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_cmp_ne
  scopes:
    - variable.other.unknown.punctuator_cmp_ne
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_mod
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_mod
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_mod_eq
  scopes:
    - variable.other.unknown.punctuator_mod_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '&'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_andb
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_andb
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '&&'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_andl
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_andl
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '&&='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_andl_eq
  scopes:
    - variable.other.unknown.punctuator_andl_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '&='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_andb_eq
  scopes:
    - variable.other.unknown.punctuator_andb_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: (
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_parenth_op
  scopes:
    - variable.other.unknown.punctuator_parenth_op
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: )
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_parenth_cl
  scopes:
    - variable.other.unknown.punctuator_parenth_cl
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '*'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_mul
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_mul
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '*='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_mul_eq
  scopes:
    - variable.other.unknown.punctuator_mul_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: +
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_add
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_add
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ++
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_inc
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_inc
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: +=
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_add_eq
  scopes:
    - variable.other.unknown.punctuator_add_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ','
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_comma
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_comma
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '-'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_sub
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_sub
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '--'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_dec
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_dec
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '-='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_sub_eq
  scopes:
    - variable.other.unknown.punctuator_sub_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: .
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_dot
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_dot
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ...
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_ellipsis
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_ellipsis
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_div
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_div
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: /=
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_div_eq
  scopes:
    - variable.other.unknown.punctuator_div_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ':'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_colon
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_colon
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ;
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_semicol
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_semicol
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: <
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_cmp_lt
  scopes:
    - variable.other.unknown.punctuator_cmp_lt
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '<<'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_sla
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_sla
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: <<<
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_sll
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_sll
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: <<<=
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_sll_eq
  scopes:
    - variable.other.unknown.punctuator_sll_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: <<=
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_sla_eq
  scopes:
    - variable.other.unknown.punctuator_sla_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: <=
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_cmp_lte
  scopes:
    - variable.other.unknown.punctuator_cmp_lte
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: <=>
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_spaceship
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_spaceship
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_assign
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_assign
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '=='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_cmp_eq
  scopes:
    - variable.other.unknown.punctuator_cmp_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '>'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_cmp_gt
  scopes:
    - variable.other.unknown.punctuator_cmp_gt
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '>='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_cmp_gte
  scopes:
    - variable.other.unknown.punctuator_cmp_gte
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '>>'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_sra
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_sra
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '>>='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_sra_eq
  scopes:
    - variable.other.unknown.punctuator_sra_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '>>>'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_srl
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_srl
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '>>>='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_srl_eq
  scopes:
    - variable.other.unknown.punctuator_srl_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '?'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_quest
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_quest
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '?='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_quest_eq
  scopes:
    - variable.other.unknown.punctuator_quest_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '?'
- source: \?
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_coales
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_coales
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '?'
- source: \?
  scopes:
    - constant.character.escape
- source: '='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_coales_eq
  scopes:
    - variable.other.unknown.punctuator_coales_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '['
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_bracket_op
  scopes:
    - variable.other.unknown.punctuator_bracket_op
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ']'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_bracket_cl
  scopes:
    - variable.other.unknown.punctuator_bracket_cl
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ^
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_xorb
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_xorb
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ^=
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_xorb_eq
  scopes:
    - variable.other.unknown.punctuator_xorb_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '{'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_brace_op
  scopes:
    - variable.other.unknown.punctuator_brace_op
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '|'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_orb
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_orb
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '|='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_orb_eq
  scopes:
    - variable.other.unknown.punctuator_orb_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '||'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_orl
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_orl
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '||='
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_orl_eq
  scopes:
    - variable.other.unknown.punctuator_orl_eq
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '}'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_brace_cl
  scopes:
    - variable.other.unknown.punctuator_brace_cl
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '~'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_notb
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_notb
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.tail.struct
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: '#'
  scopesBegin:
    - keyword.control.directive.conditional.ifdef
  scopes:
    - punctuation.definition.directive
- source: ifdef
  scopesEnd:
    - keyword.control.directive.conditional.ifdef
- source: ROCKET_DEBUG
  scopes:
    - meta.preprocessor.conditional
    - entity.name.function.preprocessor
- source: ROCKET_ASSERT
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: is_sorted
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: begin
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_punctuators
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_punctuators
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: end
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_punctuators
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_punctuators
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Prefix_Comparator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
- source: )
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '#'
  scopesBegin:
    - keyword.control.directive.endif
  scopes:
    - punctuation.definition.directive
- source: endif
  scopesEnd:
    - keyword.control.directive.endif
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' For two elements X and Y, if X is in front of Y, then X is potential a prefix of Y.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Traverse the range backwards to prevent premature matches, as a token is defined to be the longest valid character sequence.'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: range
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: equal_range
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: begin
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_punctuators
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_punctuators
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: end
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_punctuators
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_punctuators
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Prefix_Comparator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - meta.assignment
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ;
  scopesBegin:
    - meta.parens.control.for
    - punctuation.terminator.statement
- source: ;
  scopesEnd:
    - meta.parens.control.for
    - punctuation.terminator.statement
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: range
  scopes:
    - variable.lower-case
    - variable.other.object.access.range
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: range
  scopes:
    - variable.lower-case
    - variable.other.object.access.range
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: cur
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: range
  scopes:
    - variable.lower-case
    - variable.other.object.access.range
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: tlen
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: length
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: cur
  scopes:
    - variable.lower-case
    - variable.other.object.access.cur
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: <=
  scopes:
    - keyword.operator.comparison
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: compare
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: cur
  scopes:
    - variable.lower-case
    - variable.other.object.access.cur
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: first
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' A punctuator has been found.'
  scopesEnd:
    - comment.line.double-slash
- source: Token
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: S_punctuator
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: xtoken
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: cur
  scopes:
    - variable.lower-case
    - variable.other.object.access.cur
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.assignment
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: do_push_token
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rocket
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: xtoken
  scopes:
    - variable.lower-case
    - variable.other.unknown.xtoken
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: range
  scopes:
    - variable.lower-case
    - variable.other.object.access.range
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: second
  scopes:
    - variable.other.property
- source: '--'
  scopes:
    - keyword.operator.decrement
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' No matching punctuator has been found so far.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' This is caused by a character in `punct_chars` that does not exist in the table above.'
  scopesEnd:
    - comment.line.double-slash
- source: ASTERIA_TERMINATE
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: The punctuator `
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '` is unhandled.'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: bool
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: do_accept_string_literal
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: Cow_Vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Token
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: '&'
  scopes:
    - storage.modifier.reference
- source: seq
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Line_Reader
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: reader
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: head
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: escapable
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' string-literal ::='
- source: //
  scopes:
    - punctuation.definition.comment
- source: '   PCRE("([^\\]|(\\([abfnrtveZ0''"?\\]|(x[0-9A-Fa-f]{2})|(u[0-9A-Fa-f]{4})|(U[0-9A-Fa-f]{6}))))*?")'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' noescape-string-literal ::='
- source: //
  scopes:
    - punctuation.definition.comment
- source: '   PCRE(''[^'']*?'')'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: bptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: head
  scopes:
    - variable.lower-case
    - variable.other.unknown.head
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Get a string literal.'
  scopesEnd:
    - comment.line.double-slash
- source: std
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: tlen
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: Cow_String
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: value
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: escapable
  scopes:
    - variable.lower-case
    - variable.other.unknown.escapable
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Translate escape sequences as needed.'
  scopesEnd:
    - comment.line.double-slash
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ;
  scopesBegin:
    - meta.parens.control.for
    - punctuation.terminator.statement
- source: ;
  scopesEnd:
    - meta.parens.control.for
    - punctuation.terminator.statement
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: qavail
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: qavail
  scopes:
    - variable.lower-case
    - variable.other.unknown.qavail
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_string_literal_unclosed
  scopes:
    - variable.other.unknown.code_string_literal_unclosed
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: next
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: head
  scopes:
    - variable.lower-case
    - variable.other.unknown.head
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' The end of this string is encountered. Finish.'
  scopesEnd:
    - comment.line.double-slash
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \\
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' This character does not start an escape sequence. Copy it as-is.'
  scopesEnd:
    - comment.line.double-slash
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Translate this escape sequence.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: qavail
  scopes:
    - variable.lower-case
    - variable.other.unknown.qavail
- source: <
  scopes:
    - keyword.operator.comparison
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_escape_sequence_incomplete
  scopes:
    - variable.other.unknown.code_escape_sequence_incomplete
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: '='
  scopes:
    - keyword.operator.assignment
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: unsigned
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: xcnt
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: switch
  scopesBegin:
    - meta.block.switch
    - meta.head.switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.conditional.switch
  scopes:
    - punctuation.section.parens.begin.bracket.round.conditional.switch
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.conditional.switch
  scopesEnd:
    - meta.conditional.switch
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.switch
  scopesEnd:
    - meta.head.switch
- source: case
  scopesBegin:
    - meta.body.switch
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \'
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \"
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \\
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '?'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: a
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \a
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: b
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \b
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: f
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \f
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: 'n'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: r
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \r
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: t
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \t
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: v
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \v
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '0'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \0
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: Z
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \x1A
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \x1B
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: U
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: xcnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.xcnt
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' 6: "\U123456"'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Fallthrough.'
  scopesEnd:
    - comment.line.double-slash
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: u
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: xcnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.xcnt
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' 4: "\u1234"'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Fallthrough.'
  scopesEnd:
    - comment.line.double-slash
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: x
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: xcnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.xcnt
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' 2: "\x12"'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Read hex digits.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: qavail
  scopes:
    - variable.lower-case
    - variable.other.unknown.qavail
- source: <
  scopes:
    - keyword.operator.comparison
- source: xcnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.xcnt
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_escape_sequence_incomplete
  scopes:
    - variable.other.unknown.code_escape_sequence_incomplete
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: char32_t
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: cpnt
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: <
  scopes:
    - keyword.operator.comparison
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: xcnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.xcnt
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: char
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square.array.type
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.array.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 00112233445566778899AaBbCcDdEeFf
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: dptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '32'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: dptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.dptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_escape_sequence_invalid_hex
  scopes:
    - variable.other.unknown.code_escape_sequence_invalid_hex
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: dvalue
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: char32_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: dptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.dptr
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: '='
  scopes:
    - keyword.operator.assignment
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: '16'
  scopes:
    - constant.numeric.decimal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: dvalue
  scopes:
    - variable.lower-case
    - variable.other.unknown.dvalue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: x
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Write the character verbatim.'
  scopesEnd:
    - comment.line.double-slash
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Write a Unicode code point.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: D800
  scopes:
    - constant.numeric.hexadecimal
- source: <=
  scopes:
    - keyword.operator.comparison
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: <
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: E000
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '110000'
  scopes:
    - constant.numeric.hexadecimal
- source: <=
  scopes:
    - keyword.operator.comparison
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Code point value is reserved or too large.'
  scopesEnd:
    - comment.line.double-slash
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: xcnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.xcnt
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_escape_utf_code_point_invalid
  scopes:
    - variable.other.unknown.code_escape_utf_code_point_invalid
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Encode it.'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: encode_one
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator.bitwise
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: unsigned
  scopesBegin:
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: shift
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: unsigned
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: mask
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: push_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '~'
  scopes:
    - keyword.operator.bitwise
- source: mask
  scopes:
    - variable.lower-case
    - variable.other.unknown.mask
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: shift
  scopes:
    - variable.lower-case
    - variable.other.unknown.shift
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: mask
  scopes:
    - variable.lower-case
    - variable.other.unknown.mask
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.assignment
    - meta.function.definition.body.lambda
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: <
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '80'
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: FF
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: <
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '800'
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 1F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 3F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: cpnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.cpnt
- source: <
  scopes:
    - keyword.operator.comparison
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '10000'
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '12'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 0F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 3F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 3F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '18'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: '07'
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '12'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 3F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 3F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: encode_one
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 0x
  scopes:
    - keyword.other.unit.hexadecimal
- source: 3F
  scopes:
    - constant.numeric.hexadecimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: default
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.default
- source: ':'
  scopes:
    - punctuation.separator.colon.case.default
  scopesEnd:
    - meta.conditional.case
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_escape_sequence_unknown
  scopes:
    - variable.other.unknown.code_escape_sequence_unknown
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.switch
  scopesEnd:
    - meta.block.switch
    - meta.body.switch
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: xcnt
  scopes:
    - variable.lower-case
    - variable.other.unknown.xcnt
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Copy escape sequences verbatim.'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: tptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: head
  scopes:
    - variable.lower-case
    - variable.other.unknown.head
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_string_literal_unclosed
  scopes:
    - variable.other.unknown.code_string_literal_unclosed
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ++
  scopes:
    - keyword.operator.increment
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: value
  scopes:
    - variable.lower-case
    - variable.other.object.access.value
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: append
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: '='
  scopes:
    - keyword.operator.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: Token
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: S_string_literal
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: xtoken
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: rocket
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.assignment
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: do_push_token
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rocket
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: xtoken
  scopes:
    - variable.lower-case
    - variable.other.unknown.xtoken
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: Token
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: do_check_mergeability
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: Cow_Vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Token
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: '&'
  scopes:
    - storage.modifier.reference
- source: seq
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Line_Reader
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: reader
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.object.access.seq
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' No previuos token exists.'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: qstok
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: addressof
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.object.access.seq
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mut_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.object.access.qstok
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: line
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: line
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Not on the same line.'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.object.access.qstok
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: offset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.object.access.qstok
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: offset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Not contiguous.'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.object.access.qstok
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: index
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: index_punctuator
  scopes:
    - variable.snake-case
    - variable.other.unknown.index_punctuator
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Only an immediate `+` or `-` can be merged.'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: rocket
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: is_none_of
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.object.access.qstok
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: check
  scopes:
    - variable.other.property
- source: <
  scopes:
    - keyword.operator.comparison
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: S_punctuator
  scopes:
    - variable.snake-case
    - variable.other.unknown.S_punctuator
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: punct
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' {'
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_add
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_add
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_sub
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_sub
- source: ' }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Only an immediate `+` or `-` can be merged.'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.object.access.seq
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Check whether the previous token may be an infix operator.'
  scopesEnd:
    - comment.line.double-slash
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: pt
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.object.access.seq
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: rbegin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: switch
  scopesBegin:
    - meta.block.switch
    - meta.head.switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.conditional.switch
  scopes:
    - punctuation.section.parens.begin.bracket.round.conditional.switch
- source: pt
  scopes:
    - variable.lower-case
    - variable.other.object.access.pt
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: index
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.conditional.switch
  scopesEnd:
    - meta.conditional.switch
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.switch
  scopesEnd:
    - meta.head.switch
- source: case
  scopesBegin:
    - meta.body.switch
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: index_keyword
  scopes:
    - variable.snake-case
    - variable.other.unknown.index_keyword
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alt
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: pt
  scopes:
    - variable.lower-case
    - variable.other.object.access.pt
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: check
  scopes:
    - variable.other.property
- source: <
  scopes:
    - keyword.operator.comparison
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: S_keyword
  scopes:
    - variable.snake-case
    - variable.other.unknown.S_keyword
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Mergeable unless the keyword denotes a value or reference.'
  scopesEnd:
    - comment.line.double-slash
- source: bool
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: mergeable
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: rocket
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: is_none_of
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: alt
  scopes:
    - variable.lower-case
    - variable.other.object.access.alt
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: keyword
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' {'
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_null
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_null
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_true
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_true
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_false
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_false
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_nan
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_nan
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_infinity
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_infinity
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: keyword_this
  scopes:
    - variable.snake-case
    - variable.other.unknown.keyword_this
- source: ' }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: mergeable
  scopes:
    - variable.lower-case
    - variable.other.unknown.mergeable
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: index_punctuator
  scopes:
    - variable.snake-case
    - variable.other.unknown.index_punctuator
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alt
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: pt
  scopes:
    - variable.lower-case
    - variable.other.object.access.pt
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: check
  scopes:
    - variable.other.property
- source: <
  scopes:
    - keyword.operator.comparison
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: S_punctuator
  scopes:
    - variable.snake-case
    - variable.other.unknown.S_punctuator
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Mergeable unless the punctuator terminates an expression.'
  scopesEnd:
    - comment.line.double-slash
- source: bool
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: mergeable
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: rocket
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: is_none_of
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: alt
  scopes:
    - variable.lower-case
    - variable.other.object.access.alt
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: punct
  scopes:
    - variable.other.property
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ' {'
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_inc
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_inc
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_dec
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_dec
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_parenth_cl
  scopes:
    - variable.other.unknown.punctuator_parenth_cl
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_bracket_cl
  scopes:
    - variable.other.unknown.punctuator_bracket_cl
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_brace_cl
  scopes:
    - variable.other.unknown.punctuator_brace_cl
- source: ' }'
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: mergeable
  scopes:
    - variable.lower-case
    - variable.other.unknown.mergeable
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: index_identifier
  scopes:
    - variable.snake-case
    - variable.other.unknown.index_identifier
- source: ':'
  scopes:
    - punctuation.separator.colon.case
- source: case
  scopes:
    - keyword.control.case
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: index_integer_literal
  scopes:
    - variable.other.unknown.index_integer_literal
- source: ':'
  scopes:
    - punctuation.separator.colon.case
- source: case
  scopes:
    - keyword.control.case
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: index_real_literal
  scopes:
    - variable.other.unknown.index_real_literal
- source: ':'
  scopes:
    - punctuation.separator.colon.case
- source: case
  scopes:
    - keyword.control.case
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: index_string_literal
  scopes:
    - variable.other.unknown.index_string_literal
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Not mergeable, always.'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: default
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.default
- source: ':'
  scopes:
    - punctuation.separator.colon.case.default
  scopesEnd:
    - meta.conditional.case
- source: ASTERIA_TERMINATE
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: An unknown token type enumeration `
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pt
  scopes:
    - variable.lower-case
    - variable.other.object.access.pt
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: index
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '` has been encountered.'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.switch
  scopesEnd:
    - meta.block.switch
    - meta.body.switch
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Mergeable.'
  scopesEnd:
    - comment.line.double-slash
- source: return
  scopes:
    - keyword.control.return
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.unknown.qstok
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: bool
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: do_accept_numeric_literal
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: Cow_Vector
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Token
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: '&'
  scopes:
    - storage.modifier.reference
- source: seq
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Line_Reader
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: reader
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: integer_as_real
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' numeric-literal ::='
- source: //
  scopes:
    - punctuation.definition.comment
- source: '   ( binary-literal | decimal-literal | hexadecimal-literal ) exponent-suffix-opt'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' exponent-suffix-opt ::='
- source: //
  scopes:
    - punctuation.definition.comment
- source: '   decimal-exponent-suffix | binary-exponent-suffix | ""'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' binary-literal ::='
- source: //
  scopes:
    - punctuation.definition.comment
- source: '   PCRE(0[bB][01`]+(\.[01`]+)'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' decimal-literal ::='
- source: //
  scopes:
    - punctuation.definition.comment
- source: '   PCRE([0-9`]+(\.[0-9`]+))'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' hexadecimal-literal ::='
- source: //
  scopes:
    - punctuation.definition.comment
- source: '   PCRE(0[xX][0-9A-Fa-f`]+(\.[0-9A-Fa-f`]+))'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' decimal-exponent-suffix ::='
- source: //
  scopes:
    - punctuation.definition.comment
- source: '   PCRE([eE][-+]?[0-9`]+)'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' binary-exponent-suffix ::='
- source: //
  scopes:
    - punctuation.definition.comment
- source: '   PCRE([pP][-+]?[0-9`]+)'
  scopesEnd:
    - comment.line.double-slash
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: char
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square.array.type
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.array.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 00112233445566778899AaBbCcDdEeFf
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: bptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '20'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: eptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Get a numeric literal.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Declare everything that will be calculated later.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' 0. The integral part is required. The fractional and exponent parts are optional.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' 1. If `frac_begin` equals `int_end` then there is no fractional part.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' 2. If `exp_begin` equals `frac_end` then there is no exponent part.'
  scopesEnd:
    - comment.line.double-slash
- source: int
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: radix
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '10'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: int_begin
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_end
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: frac_begin
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: frac_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_end
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: exp_base
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: exp_sign
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: 'false'
  scopes:
    - constant.language.false
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: exp_begin
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: exp_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_end
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Check for radix prefixes.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: int_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_begin
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '0'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: next
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: int_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_begin
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: switch
  scopesBegin:
    - meta.block.switch
    - meta.head.switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.conditional.switch
  scopes:
    - punctuation.section.parens.begin.bracket.round.conditional.switch
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.conditional.switch
  scopesEnd:
    - meta.conditional.switch
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.switch
  scopesEnd:
    - meta.head.switch
- source: case
  scopesBegin:
    - meta.body.switch
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: B
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: b
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: radix
  scopes:
    - variable.lower-case
    - variable.other.unknown.radix
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_begin
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: X
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: x
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: radix
  scopes:
    - variable.lower-case
    - variable.other.unknown.radix
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '16'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_begin
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.switch
  scopesEnd:
    - meta.block.switch
    - meta.body.switch
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: max_digits
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: radix
  scopes:
    - variable.lower-case
    - variable.other.unknown.radix
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Look for the end of the integral part.'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: tptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: find_if_not
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: int_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_begin
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: eptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.eptr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator.bitwise
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: char
  scopesBegin:
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ch
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: return
  scopes:
    - keyword.control.return
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '`'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '||'
  scopes:
    - keyword.operator.logical
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: max_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.max_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_end
- source: '='
  scopes:
    - keyword.operator.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_end
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: int_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_begin
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_end
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_numeric_literal_incomplete
  scopes:
    - variable.other.unknown.code_numeric_literal_incomplete
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Look for the fractional part.'
  scopesEnd:
    - comment.line.double-slash
- source: frac_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_begin
- source: '='
  scopes:
    - keyword.operator.assignment
- source: int_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_end
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: frac_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_end
- source: '='
  scopes:
    - keyword.operator.assignment
- source: frac_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_begin
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: next
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: int_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_end
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.assignment
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: .
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ++
  scopes:
    - keyword.operator.increment
- source: frac_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_begin
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: find_if_not
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: frac_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_begin
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: eptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.eptr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator.bitwise
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: char
  scopesBegin:
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ch
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: return
  scopes:
    - keyword.control.return
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '`'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '||'
  scopes:
    - keyword.operator.logical
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: max_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.max_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: frac_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_end
- source: '='
  scopes:
    - keyword.operator.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: frac_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_end
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: frac_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_begin
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: frac_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_end
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_numeric_literal_incomplete
  scopes:
    - variable.other.unknown.code_numeric_literal_incomplete
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Look for the exponent.'
  scopesEnd:
    - comment.line.double-slash
- source: exp_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_begin
- source: '='
  scopes:
    - keyword.operator.assignment
- source: frac_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_end
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: exp_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_end
- source: '='
  scopes:
    - keyword.operator.assignment
- source: exp_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_begin
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: '='
  scopes:
    - keyword.operator.assignment
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: frac_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_end
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: switch
  scopesBegin:
    - meta.block.switch
    - meta.head.switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.conditional.switch
  scopes:
    - punctuation.section.parens.begin.bracket.round.conditional.switch
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.conditional.switch
  scopesEnd:
    - meta.conditional.switch
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.switch
  scopesEnd:
    - meta.head.switch
- source: case
  scopesBegin:
    - meta.body.switch
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: E
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: e
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: exp_base
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_base
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '10'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: exp_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_begin
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: P
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
- source: case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: p
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: exp_base
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_base
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: exp_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_begin
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.switch
  scopesEnd:
    - meta.block.switch
    - meta.body.switch
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: exp_base
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_base
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: '='
  scopes:
    - keyword.operator.assignment
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: exp_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_begin
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: switch
  scopesBegin:
    - meta.block.switch
    - meta.head.switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.conditional.switch
  scopes:
    - punctuation.section.parens.begin.bracket.round.conditional.switch
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.conditional.switch
  scopesEnd:
    - meta.conditional.switch
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.switch
  scopesEnd:
    - meta.head.switch
- source: case
  scopesBegin:
    - meta.body.switch
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: +
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: exp_sign
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_sign
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: exp_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_begin
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '-'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: exp_sign
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_sign
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: exp_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_begin
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.switch
  scopesEnd:
    - meta.block.switch
    - meta.body.switch
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: find_if_not
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: exp_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_begin
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: eptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.eptr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator.bitwise
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: char
  scopesBegin:
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ch
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: return
  scopes:
    - keyword.control.return
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '`'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '||'
  scopes:
    - keyword.operator.logical
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '20'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: exp_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_end
- source: '='
  scopes:
    - keyword.operator.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: exp_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_end
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: exp_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_begin
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: exp_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_end
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_numeric_literal_incomplete
  scopes:
    - variable.other.unknown.code_numeric_literal_incomplete
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Disallow suffixes. Suffixes such as `ll`, `u` and `f` are used in C and C++ to specify the types of numeric literals.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Since we make no use of them, we just reserve them for further use for good.'
  scopesEnd:
    - comment.line.double-slash
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: char
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s_suffix_chars
  scopes:
    - variable.other.unknown.s_suffix_chars
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square.array.type
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square.array.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_0123456789.
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: find_if_not
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: exp_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_end
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: eptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.eptr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: '&'
  scopes:
    - meta.lambda.capture
    - keyword.operator.bitwise
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: (
  scopesBegin:
    - meta.function.definition.parameters.lambda
  scopes:
    - punctuation.definition.parameters.begin.lambda
- source: char
  scopesBegin:
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ch
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.definition.parameters.end.lambda
  scopesEnd:
    - meta.function.definition.parameters.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: return
  scopes:
    - keyword.control.return
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_suffix_chars
  scopes:
    - variable.other.unknown.s_suffix_chars
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '64'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: tlen
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: exp_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_end
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_numeric_literal_suffix_disallowed
  scopes:
    - variable.other.unknown.code_numeric_literal_suffix_disallowed
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Parse the exponent.'
  scopesEnd:
    - comment.line.double-slash
- source: int
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: exp
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: exp_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_begin
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: exp_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_end
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: dptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '20'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: dptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.dptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: dvalue
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: dptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.dptr
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: int
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: bound
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: INT_MAX
  scopes:
    - variable.snake-case
    - variable.other.unknown.INT_MAX
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: dvalue
  scopes:
    - variable.lower-case
    - variable.other.unknown.dvalue
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '10'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: exp
  scopes:
    - variable.lower-case
    - variable.other.unknown.exp
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: bound
  scopes:
    - variable.lower-case
    - variable.other.unknown.bound
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_numeric_literal_exponent_overflow
  scopes:
    - variable.other.unknown.code_numeric_literal_exponent_overflow
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: exp
  scopes:
    - variable.lower-case
    - variable.other.unknown.exp
- source: '='
  scopes:
    - keyword.operator.assignment
- source: exp
  scopes:
    - variable.lower-case
    - variable.other.unknown.exp
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: '10'
  scopes:
    - constant.numeric.decimal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: dvalue
  scopes:
    - variable.lower-case
    - variable.other.unknown.dvalue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: exp_sign
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_sign
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: exp
  scopes:
    - variable.lower-case
    - variable.other.unknown.exp
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: exp
  scopes:
    - variable.lower-case
    - variable.other.unknown.exp
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Is this literal an integral or floating-point number?'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: integer_as_real
  scopes:
    - variable.other.unknown.integer_as_real
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: frac_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_begin
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: int_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_end
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Parse the literal as an integer.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Negative exponents are not allowed, even when the significant part is zero.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: exp
  scopes:
    - variable.lower-case
    - variable.other.unknown.exp
- source: <
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_integer_literal_exponent_negative
  scopes:
    - variable.other.unknown.code_integer_literal_exponent_negative
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Parse the significant part.'
  scopesEnd:
    - comment.line.double-slash
- source: std
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: uint64_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: value
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: int_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_begin
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: int_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_end
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: dptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: max_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.max_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: dptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.dptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: dvalue
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: uint64_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: dptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.dptr
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: uint64_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: bound
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UINT64_C
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '63'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: dvalue
  scopes:
    - variable.lower-case
    - variable.other.unknown.dvalue
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: unsigned
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: radix
  scopes:
    - variable.lower-case
    - variable.other.unknown.radix
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: bound
  scopes:
    - variable.lower-case
    - variable.other.unknown.bound
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_integer_literal_overflow
  scopes:
    - variable.other.unknown.code_integer_literal_overflow
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '='
  scopes:
    - keyword.operator.assignment
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: unsigned
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: radix
  scopes:
    - variable.lower-case
    - variable.other.unknown.radix
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: dvalue
  scopes:
    - variable.lower-case
    - variable.other.unknown.dvalue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Raise the significant part to the power of `exp`.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: <
  scopes:
    - keyword.operator.comparison
- source: exp
  scopes:
    - variable.lower-case
    - variable.other.unknown.exp
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: std
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: uint64_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: bound
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UINT64_C
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '63'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: unsigned
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: exp_base
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_base
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: bound
  scopes:
    - variable.lower-case
    - variable.other.unknown.bound
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_integer_literal_overflow
  scopes:
    - variable.other.unknown.code_integer_literal_overflow
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '*='
  scopes:
    - keyword.operator.assignment.compound
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: unsigned
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: exp_base
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_base
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Check for a previous sign symbol.'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: qstok
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: do_check_mergeability
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: uint64_t
  scopes:
    - storage.type
    - storage.type.built-in
  scopesEnd:
    - meta.qualified-type
- source: smask
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.unknown.qstok
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.object.access.qstok
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: check
  scopes:
    - variable.other.property
- source: <
  scopes:
    - keyword.operator.comparison
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: S_punctuator
  scopes:
    - variable.snake-case
    - variable.other.unknown.S_punctuator
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: punct
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_sub
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_sub
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: UINT64_MAX
  scopes:
    - variable.snake-case
    - variable.other.unknown.UINT64_MAX
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' The special value `0x1p63` is only allowed if a contiguous minus symbol precedes it.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: UINT64_C
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '63'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: smask
  scopes:
    - variable.lower-case
    - variable.other.unknown.smask
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_integer_literal_overflow
  scopes:
    - variable.other.unknown.code_integer_literal_overflow
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.unknown.qstok
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Overwrite the previous token.'
  scopesEnd:
    - comment.line.double-slash
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: offset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.object.access.qstok
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: offset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: rewind
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.object.access.qstok
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: offset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.unknown.qstok
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.object.access.seq
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pop_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Push an integer literal.'
  scopesEnd:
    - comment.line.double-slash
- source: Token
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: S_integer_literal
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: xtoken
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: int64_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: ^
  scopes:
    - keyword.operator.bitwise
- source: smask
  scopes:
    - variable.lower-case
    - variable.other.unknown.smask
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: smask
  scopes:
    - variable.lower-case
    - variable.other.unknown.smask
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.assignment
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: do_push_token
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rocket
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: xtoken
  scopes:
    - variable.lower-case
    - variable.other.unknown.xtoken
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Parse the literal as a floating-point number.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' Parse the integral part.'
  scopesEnd:
    - comment.line.double-slash
- source: double
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: value
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: bool
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: zero
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: 'true'
  scopes:
    - constant.language.true
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: int_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_begin
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: int_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.int_end
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: dptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: max_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.max_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: dptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.dptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: dvalue
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: dptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.dptr
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '='
  scopes:
    - keyword.operator.assignment
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: radix
  scopes:
    - variable.lower-case
    - variable.other.unknown.radix
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: dvalue
  scopes:
    - variable.lower-case
    - variable.other.unknown.dvalue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: zero
  scopes:
    - variable.lower-case
    - variable.other.unknown.zero
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: '='
  scopes:
    - keyword.operator.assignment
- source: dvalue
  scopes:
    - variable.lower-case
    - variable.other.unknown.dvalue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Parse the fractional part.'
  scopesEnd:
    - comment.line.double-slash
- source: double
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: frac
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: auto
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: frac_end
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_end
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: frac_begin
  scopes:
    - variable.snake-case
    - variable.other.unknown.frac_begin
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '--'
  scopes:
    - keyword.operator.decrement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: dptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: max_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.max_digits
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bptr
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: dptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.dptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: dvalue
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: dptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.dptr
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: s_digits
  scopes:
    - variable.snake-case
    - variable.other.unknown.s_digits
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: frac
  scopes:
    - variable.lower-case
    - variable.other.unknown.frac
- source: '='
  scopes:
    - keyword.operator.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: frac
  scopes:
    - variable.lower-case
    - variable.other.unknown.frac
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: dvalue
  scopes:
    - variable.lower-case
    - variable.other.unknown.dvalue
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: radix
  scopes:
    - variable.lower-case
    - variable.other.unknown.radix
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: zero
  scopes:
    - variable.lower-case
    - variable.other.unknown.zero
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: '='
  scopes:
    - keyword.operator.assignment
- source: dvalue
  scopes:
    - variable.lower-case
    - variable.other.unknown.dvalue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: frac
  scopes:
    - variable.lower-case
    - variable.other.unknown.frac
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Raise the significant part to the power of `exp`.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: exp_base
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_base
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: FLT_RADIX
  scopes:
    - variable.snake-case
    - variable.other.unknown.FLT_RADIX
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: scalbn
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: exp
  scopes:
    - variable.lower-case
    - variable.other.unknown.exp
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '#'
  scopesBegin:
    - keyword.control.directive.conditional.if
  scopes:
    - punctuation.definition.directive
- source: if
  scopesEnd:
    - keyword.control.directive.conditional.if
- source: FLT_RADIX
  scopesBegin:
    - meta.preprocessor.conditional
  scopes:
    - entity.name.function.preprocessor
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '2'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.preprocessor.conditional
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: exp_base
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_base
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: ldexp
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: exp
  scopes:
    - variable.lower-case
    - variable.other.unknown.exp
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '#'
  scopesBegin:
    - keyword.control.directive.endif
  scopes:
    - punctuation.definition.directive
- source: endif
  scopesEnd:
    - keyword.control.directive.endif
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '='
  scopes:
    - keyword.operator.assignment
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: pow
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: exp_base
  scopes:
    - variable.snake-case
    - variable.other.unknown.exp_base
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: exp
  scopes:
    - variable.lower-case
    - variable.other.unknown.exp
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Check for overflow or underflow.'
  scopesEnd:
    - comment.line.double-slash
- source: int
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: fpc
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: fpclassify
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: fpc
  scopes:
    - variable.lower-case
    - variable.other.unknown.fpc
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: FP_INFINITE
  scopes:
    - variable.snake-case
    - variable.other.unknown.FP_INFINITE
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_real_literal_overflow
  scopes:
    - variable.other.unknown.code_real_literal_overflow
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: fpc
  scopes:
    - variable.lower-case
    - variable.other.unknown.fpc
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: FP_ZERO
  scopes:
    - variable.snake-case
    - variable.other.unknown.FP_ZERO
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: zero
  scopes:
    - variable.lower-case
    - variable.other.unknown.zero
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_real_literal_underflow
  scopes:
    - variable.other.unknown.code_real_literal_underflow
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Check for a previous sign symbol.'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: qstok
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: do_check_mergeability
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: double
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: fmask
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.unknown.qstok
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.object.access.qstok
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: check
  scopes:
    - variable.other.property
- source: <
  scopes:
    - keyword.operator.comparison
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: S_punctuator
  scopes:
    - variable.snake-case
    - variable.other.unknown.S_punctuator
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: punct
  scopes:
    - variable.other.property
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: Token
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: punctuator_sub
  scopes:
    - variable.snake-case
    - variable.other.unknown.punctuator_sub
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.unknown.qstok
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Overwrite the previous token.'
  scopesEnd:
    - comment.line.double-slash
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: offset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.object.access.qstok
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: offset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: rewind
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.object.access.qstok
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: offset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: qstok
  scopes:
    - variable.lower-case
    - variable.other.unknown.qstok
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.object.access.seq
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pop_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Push a floating-point literal.'
  scopesEnd:
    - comment.line.double-slash
- source: Token
  scopesBegin:
    - meta.assignment
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: S_real_literal
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: xtoken
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: copysign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: fmask
  scopes:
    - variable.lower-case
    - variable.other.unknown.fmask
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.assignment
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: do_push_token
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: tlen
  scopes:
    - variable.lower-case
    - variable.other.unknown.tlen
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: rocket
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: xtoken
  scopes:
    - variable.lower-case
    - variable.other.unknown.xtoken
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.namespace
  scopesEnd:
    - meta.block.namespace
    - meta.body.namespace
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' namespace'
  scopesEnd:
    - comment.line.double-slash
- source: bool
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Token_Stream
  scopes:
    - entity.name.scope-resolution.function.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.definition
- source: load
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: std
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: streambuf
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: cbuf
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Cow_String
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: file
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Parser_Options
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: options
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: try
  scopes:
    - keyword.control.try
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' This has to be done before anything else because of possibility of exceptions.'
  scopesEnd:
    - comment.line.double-slash
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_stor
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Store tokens parsed here in normal order.'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' We will have to reverse this sequence before storing it into `*this` if it is accepted.'
  scopesEnd:
    - comment.line.double-slash
- source: Cow_Vector
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Token
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: seq
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Save the position of an unterminated block comment.'
  scopesEnd:
    - comment.line.double-slash
- source: Tack
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: bcomm
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Read source code line by line.'
  scopesEnd:
    - comment.line.double-slash
- source: Line_Reader
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: reader
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: cbuf
  scopes:
    - variable.lower-case
    - variable.other.unknown.cbuf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: file
  scopes:
    - variable.lower-case
    - variable.other.unknown.file
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: advance
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Discard the first line if it looks like a shebang.'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: line
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '&&'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: compare
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '#!'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: /////////////////////////////////////////////////////////////////////////
  scopes:
    - comment.line.double-slash.documentation
    - punctuation.definition.comment.documentation
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Phase 1'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '   Ensure this line is a valid UTF-8 string.'
  scopesEnd:
    - comment.line.double-slash
- source: /////////////////////////////////////////////////////////////////////////
  scopes:
    - comment.line.double-slash.documentation
    - punctuation.definition.comment.documentation
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: do_get_utf8_code_point
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: rewind
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /////////////////////////////////////////////////////////////////////////
  scopes:
    - comment.line.double-slash.documentation
    - punctuation.definition.comment.documentation
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Phase 2'
- source: //
  scopes:
    - punctuation.definition.comment
- source: '   Break this line down into tokens.'
  scopesEnd:
    - comment.line.double-slash
- source: /////////////////////////////////////////////////////////////////////////
  scopes:
    - comment.line.double-slash.documentation
    - punctuation.definition.comment.documentation
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Are we inside a block comment?'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: bcomm
  scopes:
    - variable.lower-case
    - variable.other.unknown.bcomm
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Search for the terminator of this block comment.'
  scopesEnd:
    - comment.line.double-slash
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: s_bcomm_term
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '*'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: /
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: bptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: eptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: tptr
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: search
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: eptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.eptr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: s_bcomm_term
  scopes:
    - variable.other.unknown.s_bcomm_term
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: s_bcomm_term
  scopes:
    - variable.other.unknown.s_bcomm_term
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: eptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.eptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' The block comment will not end in this line. Stop.'
  scopesEnd:
    - comment.line.double-slash
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: consume
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: +=
  scopes:
    - keyword.operator.assignment.compound
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Finish this comment and resume from the end of it.'
  scopesEnd:
    - comment.line.double-slash
- source: bcomm
  scopes:
    - variable.lower-case
    - variable.other.object.access.bcomm
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: clear
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: consume
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: static_cast
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.cast.static_cast
- source: <
  scopes:
    - keyword.operator.comparison
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: tptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.tptr
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: bptr
  scopes:
    - variable.lower-case
    - variable.other.unknown.bptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Read a character.'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: head
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: peek
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: char_traits
  scopes:
    - entity.name.scope-resolution.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: find
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \t
  scopesBegin:
    - constant.character.escape
- source: \v
- source: \f
- source: \r
- source: \n
  scopesEnd:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '6'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: head
  scopes:
    - variable.lower-case
    - variable.other.unknown.head
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Skip a space.'
  scopesEnd:
    - comment.line.double-slash
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: consume
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: head
  scopes:
    - variable.lower-case
    - variable.other.unknown.head
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: /
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: next
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: peek
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: /
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Start a line comment. Discard all remaining characters in this line.'
  scopesEnd:
    - comment.line.double-slash
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: consume
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: break
  scopes:
    - keyword.control.break
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: next
  scopes:
    - variable.lower-case
    - variable.other.unknown.next
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: '*'
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Start a block comment.'
  scopesEnd:
    - comment.line.double-slash
- source: bcomm
  scopes:
    - variable.lower-case
    - variable.other.object.access.bcomm
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: set
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: consume
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: continue
  scopes:
    - keyword.control.continue
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: bool
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: token_got
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: do_accept_identifier_or_keyword
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: options
  scopes:
    - variable.lower-case
    - variable.other.object.access.options
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: keyword_as_identifier
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '||'
  scopes:
    - keyword.operator.logical
- source: do_accept_punctuator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '||'
  scopes:
    - keyword.operator.logical
- source: do_accept_string_literal
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \"
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '||'
  scopes:
    - keyword.operator.logical
- source: do_accept_string_literal
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: \'
  scopes:
    - constant.character.escape
- source: ''''
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.single
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: options
  scopes:
    - variable.lower-case
    - variable.other.object.access.options
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: escapable_single_quote_string
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '||'
  scopes:
    - keyword.operator.logical
- source: do_accept_numeric_literal
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: options
  scopes:
    - variable.lower-case
    - variable.other.object.access.options
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: integer_as_real
  scopes:
    - variable.other.property
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '!'
  scopes:
    - keyword.operator.logical
- source: token_got
  scopes:
    - variable.snake-case
    - variable.other.unknown.token_got
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ASTERIA_DEBUG_LOG
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Non-token character encountered in source code: '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data_avail
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: throw
  scopes:
    - keyword.control.throw
- source: do_make_parser_error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.unknown.reader
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_token_character_unrecognized
  scopes:
    - variable.other.unknown.code_token_character_unrecognized
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: reader
  scopes:
    - variable.lower-case
    - variable.other.object.access.reader
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: rewind
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: bcomm
  scopes:
    - variable.lower-case
    - variable.other.unknown.bcomm
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' A block comment may straddle multiple lines. We just mark the first line here.'
  scopesEnd:
    - comment.line.double-slash
- source: throw
  scopes:
    - keyword.control.throw
- source: Parser_Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: bcomm
  scopes:
    - variable.lower-case
    - variable.other.object.access.bcomm
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: line
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bcomm
  scopes:
    - variable.lower-case
    - variable.other.object.access.bcomm
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: offset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bcomm
  scopes:
    - variable.lower-case
    - variable.other.object.access.bcomm
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_block_comment_unclosed
  scopes:
    - variable.other.unknown.code_block_comment_unclosed
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ///////////////////////////////////////////////////////////////////////////
  scopes:
    - comment.line.double-slash.documentation
    - punctuation.definition.comment.documentation
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Finish'
  scopesEnd:
    - comment.line.double-slash
- source: ///////////////////////////////////////////////////////////////////////////
  scopes:
    - comment.line.double-slash.documentation
    - punctuation.definition.comment.documentation
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: reverse
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.object.access.seq
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mut_begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.object.access.seq
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: mut_end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_stor
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: rocket
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: seq
  scopes:
    - variable.lower-case
    - variable.other.unknown.seq
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: catch
  scopes:
    - keyword.control.catch
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: Parser_Error
  scopes:
    - variable.snake-case
    - variable.other.unknown.Parser_Error
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: err
  scopes:
    - variable.lower-case
    - variable.other.unknown.err
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Don''t play with this at home.'
  scopesEnd:
    - comment.line.double-slash
- source: ASTERIA_DEBUG_LOG
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'Caught `Parser_Error`:'
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'line = '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: err
  scopes:
    - variable.lower-case
    - variable.other.object.access.err
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: line
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ', offset = '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: err
  scopes:
    - variable.lower-case
    - variable.other.object.access.err
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: offset
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ', length = '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: err
  scopes:
    - variable.lower-case
    - variable.other.object.access.err
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'code = '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: err
  scopes:
    - variable.lower-case
    - variable.other.object.access.err
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: code
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: ': '
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: get_code_description
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: err
  scopes:
    - variable.lower-case
    - variable.other.object.access.err
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: code
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_stor
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: rocket
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: err
  scopes:
    - variable.lower-case
    - variable.other.unknown.err
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: 'false'
  scopes:
    - constant.language.false
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Token_Stream
  scopes:
    - entity.name.scope-resolution.function.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.definition
- source: clear
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: this
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_stor
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: Parser_Error
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: Token_Stream
  scopes:
    - entity.name.scope-resolution.function.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.definition
- source: get_parser_error
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: switch
  scopesBegin:
    - meta.body.function.definition
    - meta.block.switch
    - meta.head.switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.conditional.switch
  scopes:
    - punctuation.section.parens.begin.bracket.round.conditional.switch
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: state
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.conditional.switch
  scopesEnd:
    - meta.conditional.switch
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.switch
  scopesEnd:
    - meta.head.switch
- source: case
  scopesBegin:
    - meta.body.switch
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: state_empty
  scopes:
    - variable.snake-case
    - variable.other.unknown.state_empty
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Parser_Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_no_data_loaded
  scopes:
    - variable.other.unknown.code_no_data_loaded
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: state_error
  scopes:
    - variable.snake-case
    - variable.other.unknown.state_error
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_stor
  scopes:
    - variable.snake-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: as
  scopes:
    - variable.other.property
- source: <
  scopes:
    - keyword.operator.comparison
- source: Parser_Error
  scopes:
    - variable.snake-case
    - variable.other.unknown.Parser_Error
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: state_success
  scopes:
    - variable.snake-case
    - variable.other.unknown.state_success
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: Parser_Error
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Parser_Error
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: code_success
  scopes:
    - variable.snake-case
    - variable.other.unknown.code_success
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: default
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.default
- source: ':'
  scopes:
    - punctuation.separator.colon.case.default
  scopesEnd:
    - meta.conditional.case
- source: ASTERIA_TERMINATE
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: An unknown state enumeration `
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: state
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '` has been encountered.'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.switch
  scopesEnd:
    - meta.block.switch
    - meta.body.switch
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: bool
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Token_Stream
  scopes:
    - entity.name.scope-resolution.function.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.definition
- source: empty
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: switch
  scopesBegin:
    - meta.body.function.definition
    - meta.block.switch
    - meta.head.switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.conditional.switch
  scopes:
    - punctuation.section.parens.begin.bracket.round.conditional.switch
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: state
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.conditional.switch
  scopesEnd:
    - meta.conditional.switch
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.switch
  scopesEnd:
    - meta.head.switch
- source: case
  scopesBegin:
    - meta.body.switch
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: state_empty
  scopes:
    - variable.snake-case
    - variable.other.unknown.state_empty
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: state_error
  scopes:
    - variable.snake-case
    - variable.other.unknown.state_error
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: 'true'
  scopes:
    - constant.language.true
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: state_success
  scopes:
    - variable.snake-case
    - variable.other.unknown.state_success
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_stor
  scopes:
    - variable.snake-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: as
  scopes:
    - variable.other.property
- source: <
  scopes:
    - keyword.operator.comparison
- source: Cow_Vector
  scopes:
    - variable.snake-case
    - variable.other.unknown.Cow_Vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: Token
  scopes:
    - variable.other.unknown.Token
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: default
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.default
- source: ':'
  scopes:
    - punctuation.separator.colon.case.default
  scopesEnd:
    - meta.conditional.case
- source: ASTERIA_TERMINATE
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: An unknown state enumeration `
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: state
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '` has been encountered.'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.switch
  scopesEnd:
    - meta.block.switch
    - meta.body.switch
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const
  scopes:
    - storage.modifier.const
- source: Token
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: Token_Stream
  scopes:
    - entity.name.scope-resolution.function.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.definition
- source: peek_opt
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: switch
  scopesBegin:
    - meta.body.function.definition
    - meta.block.switch
    - meta.head.switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.conditional.switch
  scopes:
    - punctuation.section.parens.begin.bracket.round.conditional.switch
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: state
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.conditional.switch
  scopesEnd:
    - meta.conditional.switch
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.switch
  scopesEnd:
    - meta.head.switch
- source: case
  scopesBegin:
    - meta.body.switch
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: state_empty
  scopes:
    - variable.snake-case
    - variable.other.unknown.state_empty
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ASTERIA_THROW_RUNTIME_ERROR
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: No data have been loaded so far.
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: state_error
  scopes:
    - variable.snake-case
    - variable.other.unknown.state_error
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ASTERIA_THROW_RUNTIME_ERROR
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: The previous load operation has failed.
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: state_success
  scopes:
    - variable.snake-case
    - variable.other.unknown.state_success
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alt
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_stor
  scopes:
    - variable.snake-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: as
  scopes:
    - variable.other.property
- source: <
  scopes:
    - keyword.operator.comparison
- source: Cow_Vector
  scopes:
    - variable.snake-case
    - variable.other.unknown.Cow_Vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: Token
  scopes:
    - variable.other.unknown.Token
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: alt
  scopes:
    - variable.lower-case
    - variable.other.object.access.alt
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: nullptr
  scopes:
    - constant.language.nullptr
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: alt
  scopes:
    - variable.lower-case
    - variable.other.object.access.alt
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: default
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.default
- source: ':'
  scopes:
    - punctuation.separator.colon.case.default
  scopesEnd:
    - meta.conditional.case
- source: ASTERIA_TERMINATE
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: An unknown state enumeration `
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: state
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '` has been encountered.'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.switch
  scopesEnd:
    - meta.block.switch
    - meta.body.switch
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: Token_Stream
  scopes:
    - entity.name.scope-resolution.function.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.definition
- source: shift
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: switch
  scopesBegin:
    - meta.body.function.definition
    - meta.block.switch
    - meta.head.switch
  scopes:
    - keyword.control.switch
- source: (
  scopesBegin:
    - meta.conditional.switch
  scopes:
    - punctuation.section.parens.begin.bracket.round.conditional.switch
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: state
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.conditional.switch
  scopesEnd:
    - meta.conditional.switch
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.switch
  scopesEnd:
    - meta.head.switch
- source: case
  scopesBegin:
    - meta.body.switch
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: state_empty
  scopes:
    - variable.snake-case
    - variable.other.unknown.state_empty
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ASTERIA_THROW_RUNTIME_ERROR
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: No data have been loaded so far.
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: state_error
  scopes:
    - variable.snake-case
    - variable.other.unknown.state_error
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ASTERIA_THROW_RUNTIME_ERROR
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: The previous load operation has failed.
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: case
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.case
- source: state_success
  scopes:
    - variable.snake-case
    - variable.other.unknown.state_success
- source: ':'
  scopes:
    - punctuation.separator.colon.case
  scopesEnd:
    - meta.conditional.case
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alt
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: m_stor
  scopes:
    - variable.snake-case
    - variable.other.object.property
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: as
  scopes:
    - variable.other.property
- source: <
  scopes:
    - keyword.operator.comparison
- source: Cow_Vector
  scopes:
    - variable.snake-case
    - variable.other.unknown.Cow_Vector
- source: <
  scopes:
    - keyword.operator.comparison
- source: Token
  scopes:
    - variable.other.unknown.Token
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: alt
  scopes:
    - variable.lower-case
    - variable.other.object.access.alt
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: empty
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: ASTERIA_THROW_RUNTIME_ERROR
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: There are no more tokens from this stream.
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: alt
  scopes:
    - variable.lower-case
    - variable.other.object.access.alt
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: pop_back
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: default
  scopesBegin:
    - meta.conditional.case
  scopes:
    - keyword.control.default
- source: ':'
  scopes:
    - punctuation.separator.colon.case.default
  scopesEnd:
    - meta.conditional.case
- source: ASTERIA_TERMINATE
  scopes:
    - entity.name.function.call.upper-case
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: An unknown state enumeration `
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: state
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '` has been encountered.'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
    - punctuation.section.arguments.begin.bracket.round.function.call.upper-case
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.switch
  scopesEnd:
    - meta.block.switch
    - meta.body.switch
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.namespace
  scopesEnd:
    - meta.block.namespace
    - meta.body.namespace
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' namespace Asteria'
