- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' vim:set noexpandtab tabstop=6 ft=c++'
  scopesEnd:
    - comment.line.double-slash
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: '    Copyright 2019'
- source: '    Licensed under the Apache License, Version 2.0 (the "License");'
- source: '    you may not use this file except in compliance with the License.'
- source: '    You may obtain a copy of the License at'
- source: '        http://www.apache.org/licenses/LICENSE-2.0'
- source: '    Unless required by applicable law or agreed to in writing, software'
- source: '    distributed under the License is distributed on an "AS IS" BASIS,'
- source: '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
- source: '    See the License for the specific language governing permissions and'
- source: '    limitations under the License.'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: '#'
  scopesBegin:
    - keyword.control.directive.conditional.ifndef
  scopes:
    - punctuation.definition.directive
- source: ifndef
  scopesEnd:
    - keyword.control.directive.conditional.ifndef
- source: _BASIC_STRING_HPP
  scopes:
    - meta.preprocessor.conditional
    - entity.name.function.preprocessor
- source: '#'
  scopesBegin:
    - meta.preprocessor.macro
    - keyword.control.directive.define
  scopes:
    - punctuation.definition.directive
- source: define
  scopesEnd:
    - keyword.control.directive.define
- source: _BASIC_STRING_HPP
  scopes:
    - entity.name.function.preprocessor
  scopesEnd:
    - meta.preprocessor.macro
- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: fwd/string
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: cassert
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: cstring
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: algorithm
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: iterator
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: limits
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: memory
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: string_view
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: tuple
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: namespace
  scopesBegin:
    - meta.block.namespace
    - meta.head.namespace
  scopes:
    - keyword.other.namespace.definition
    - storage.type.namespace.definition
- source: std
  scopes:
    - entity.name.namespace
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.namespace
  scopesEnd:
    - meta.head.namespace
- source: namespace
  scopesBegin:
    - meta.body.namespace
    - meta.block.namespace
    - meta.head.namespace
  scopes:
    - keyword.other.namespace.definition
    - storage.type.namespace.definition
- source: details
  scopes:
    - entity.name.namespace
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.namespace
  scopesEnd:
    - meta.head.namespace
- source: template
  scopesBegin:
    - meta.body.namespace
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template.argument.class
- source: CharT
  scopes:
    - entity.name.type.template
  scopesEnd:
    - meta.template.definition
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: SSO_size
  scopes:
    - variable.snake-case
    - variable.other.unknown.SSO_size
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '['
  scopes:
    - punctuation.definition.capture.begin.lambda
- source: ']'
  scopes:
    - punctuation.definition.capture.end.lambda
- source: '{'
  scopesBegin:
    - meta.function.definition.body.lambda
  scopes:
    - punctuation.section.block.begin.bracket.curly.lambda
- source: class
  scopesBegin:
    - meta.block.class
  scopes:
    - meta.head.class
    - storage.type.class
- source: __long_layout
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - meta.head.class
    - punctuation.section.block.begin.bracket.curly.class
- source: CharT
  scopesBegin:
    - meta.body.class
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: d
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: size_t
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: c
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: size_t
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: s
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: return
  scopes:
    - keyword.control.return
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: __long_layout
  scopes:
    - meta.arguments.operator.sizeof
    - variable.other.unknown.__long_layout
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: /
  scopes:
    - keyword.operator.arithmetic
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: CharT
  scopes:
    - meta.arguments.operator.sizeof
    - variable.other.unknown.CharT
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.lambda
  scopesEnd:
    - meta.function.definition.body.lambda
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.namespace
  scopesEnd:
    - meta.block.namespace
    - meta.body.namespace
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template.argument.class
- source: CharT
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: class
  scopes:
    - storage.type.template.argument.class
- source: Traits
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: class
  scopes:
    - storage.type.template.argument.class
- source: Allocator
  scopes:
    - entity.name.type.template
  scopesEnd:
    - meta.template.definition
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: class
  scopesBegin:
    - meta.block.class
  scopes:
    - meta.head.class
    - storage.type.class
- source: basic_string
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - meta.head.class
    - punctuation.section.block.begin.bracket.curly.class
- source: public
  scopesBegin:
    - meta.body.class
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: using
  scopesBegin:
    - meta.declaration.type.alias
  scopes:
    - keyword.other.using.directive
- source: traits_type
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Traits
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: value_type
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: allocator_type
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Allocator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: size_type
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: typename
  scopes:
    - keyword.other.typename
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: allocator_traits
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Allocator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: size_type
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: difference_type
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.declaration.type.alias
- source: typename
  scopes:
    - storage.modifier
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: allocator_traits
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Allocator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: difference_type
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopesBegin:
    - meta.declaration.type.alias
  scopes:
    - keyword.other.using.directive
- source: reference
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: value_type
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: const_reference
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: value_type
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: pointer
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: typename
  scopes:
    - keyword.other.typename
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: allocator_traits
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Allocator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: pointer
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: const_pointer
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.declaration.type.alias
- source: typename
  scopes:
    - storage.modifier
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: allocator_traits
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Allocator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: const_pointer
  scopes:
    - entity.name.type
  scopesEnd:
    - meta.qualified-type
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopesBegin:
    - meta.declaration.type.alias
  scopes:
    - keyword.other.using.directive
- source: iterator
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: const_iterator
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: reverse_iterator
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: reverse_iterator
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: const_reverse_iterator
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: reverse_iterator
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: const_iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.declaration.type.alias
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: npos
  scopes:
    - variable.lower-case
    - variable.other.unknown.npos
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: private
  scopesBegin:
    - storage.type.modifier.access.control.private
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.private
- source: static_assert
  scopes:
    - keyword.other.static-assert
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.static-assert
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: is_same_v
  scopes:
    - variable.other.unknown.is_same_v
- source: <
  scopes:
    - keyword.operator.comparison
- source: value_type
  scopes:
    - variable.snake-case
    - variable.other.unknown.value_type
- source: ','
  scopesBegin:
    - meta.static-assert.message
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'typename Traits::char_type>,'
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'CharT and Traits::char_type must be the same'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.static-assert.message
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.static-assert
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static_assert
  scopes:
    - keyword.other.static-assert
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.static-assert
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: is_trivial_v
  scopes:
    - variable.other.unknown.is_trivial_v
- source: <
  scopes:
    - keyword.operator.comparison
- source: value_type
  scopes:
    - variable.snake-case
    - variable.other.unknown.value_type
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: ','
  scopesBegin:
    - meta.static-assert.message
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: CharT must be trivial
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.static-assert.message
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.static-assert
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' private types'
  scopesEnd:
    - comment.line.double-slash
- source: using
  scopesBegin:
    - meta.declaration.type.alias
  scopes:
    - keyword.other.using.directive
- source: _Sat
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: allocator_traits
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Allocator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: _Sv
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: basic_string_view
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: Traits
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: _UCharT
  scopes:
    - entity.name.type
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: make_unsigned_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.declaration.type.alias
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: size_t
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: _SSO_Cap
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.other.unknown._SSO_Cap
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: details
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: SSO_size
  scopes:
    - variable.snake-case
    - variable.other.unknown.SSO_size
- source: <
  scopes:
    - keyword.operator.comparison
- source: CharT
  scopes:
    - variable.other.unknown.CharT
- source: '>'
  scopes:
    - keyword.operator.comparison
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopesBegin:
    - meta.assignment
  scopes:
    - storage.modifier.specifier.const
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: size_t
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: _size_mask
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.other.unknown._size_mask
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ULL
  scopes:
    - keyword.other.suffix.literal.built-in.integer
    - keyword.other.unit.suffix.integer
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: numeric_limits
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: digits
  scopes:
    - variable.lower-case
    - variable.other.unknown.digits
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: struct
  scopesBegin:
    - meta.block.struct
  scopes:
    - meta.head.struct
    - storage.type.struct
- source: _long
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - meta.head.struct
    - punctuation.section.block.begin.bracket.curly.struct
- source: CharT
  scopesBegin:
    - meta.body.struct
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: data
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: size_t
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: capacity
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: size_t
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: size
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: struct
  scopes:
    - meta.head.struct
    - storage.type.struct
- source: _short
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - meta.head.struct
    - punctuation.section.block.begin.bracket.curly.struct
- source: CharT
  scopesBegin:
    - meta.body.struct
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: buf
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.declaration
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _UCharT
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: remain
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: static_assert
  scopes:
    - keyword.other.static-assert
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.static-assert
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: _long
  scopes:
    - meta.arguments.operator.sizeof
    - variable.other.unknown._long
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: _short
  scopes:
    - meta.arguments.operator.sizeof
    - variable.other.unknown._short
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.static-assert
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: union
  scopesBegin:
    - meta.block.union
  scopes:
    - meta.head.union
    - storage.type.union
- source: _rep
  scopes:
    - entity.name.type.union
- source: '{'
  scopes:
    - meta.head.union
    - punctuation.section.block.begin.bracket.curly.union
- source: _long
  scopesBegin:
    - meta.body.union
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: _l
  scopes:
    - meta.declaration
    - variable.other.unknown._l
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _short
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: _s
  scopes:
    - meta.declaration
    - variable.other.unknown._s
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.union
  scopesEnd:
    - meta.body.union
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.union
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' the only member'
  scopesEnd:
    - comment.line.double-slash
- source: std
  scopesBegin:
    - meta.declaration
    - meta.qualified-type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: tuple
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: _rep
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: Allocator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: __string
  scopes:
    - meta.declaration
    - variable.other.unknown.__string
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' helpers'
  scopesEnd:
    - comment.line.double-slash
- source: constexpr
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.constexpr
- source: bool
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: __is_long
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: '!'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _s
  scopes:
    - variable.other.unknown._s
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: remain
  scopes:
    - variable.other.property
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: numeric_limits
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: _UCharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: digits
  scopes:
    - variable.lower-case
    - variable.other.unknown.digits
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: constexpr
  scopes:
    - storage.modifier.constexpr
- source: const
  scopes:
    - storage.modifier.const
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: __data
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __is_long
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _l
  scopes:
    - variable.other.unknown._l
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data
  scopes:
    - variable.other.property
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: addressof
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _s
  scopes:
    - variable.other.unknown._s
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buf
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: constexpr
  scopes:
    - storage.modifier.constexpr
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: __data
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __is_long
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _l
  scopes:
    - variable.other.unknown._l
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data
  scopes:
    - variable.other.property
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: addressof
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _s
  scopes:
    - variable.other.unknown._s
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: buf
  scopes:
    - variable.other.property
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: constexpr
  scopes:
    - storage.modifier.constexpr
- source: size_t
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: __capacity
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __is_long
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _l
  scopes:
    - variable.other.unknown._l
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: capacity
  scopes:
    - variable.other.property
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: constexpr
  scopes:
    - storage.modifier.constexpr
- source: size_t
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: __size
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: __is_long
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _l
  scopes:
    - variable.other.unknown._l
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - variable.other.property
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: _size_mask
  scopes:
    - variable.other.unknown._size_mask
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: size_t
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: remain
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _s
  scopes:
    - variable.other.unknown._s
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: remain
  scopes:
    - variable.other.property
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: remain
  scopes:
    - variable.lower-case
    - variable.other.unknown.remain
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: constexpr
  scopes:
    - storage.modifier.constexpr
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: _Set_long_size
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type
    - storage.type.built-in
- source: size
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: std
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _l
  scopes:
    - variable.other.unknown._l
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: size
  scopes:
    - variable.lower-case
    - variable.other.unknown.size
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: _size_mask
  scopes:
    - variable.other.unknown._size_mask
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: constexpr
  scopes:
    - storage.modifier.constexpr
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: _Set_short_size
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type
    - storage.type.built-in
- source: size
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: std
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _s
  scopes:
    - variable.other.unknown._s
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: remain
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: size
  scopes:
    - variable.lower-case
    - variable.other.unknown.size
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' if preserve is true, _Set_size can create a long form string that has a'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' length less than _SSO_Cap'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' NOTE: it is undefined behavior to set a short string''s size to more than'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' _SSO_Cap when preserve is true'
  scopesEnd:
    - comment.line.double-slash
- source: constexpr
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.constexpr
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: _Set_size
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type
    - storage.type.built-in
- source: size
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: bool
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: preserve
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: 'false'
  scopes:
    - constant.language.false
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: small
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: preserve
  scopes:
    - variable.lower-case
    - variable.other.unknown.preserve
- source: '?'
  scopes:
    - keyword.operator.ternary
- source: '!'
  scopes:
    - keyword.operator.logical
- source: __is_long
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ':'
  scopes:
    - keyword.operator.ternary
- source: size
  scopes:
    - variable.lower-case
    - variable.other.unknown.size
- source: <=
  scopes:
    - keyword.operator.comparison
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: small
  scopes:
    - variable.lower-case
    - variable.other.unknown.small
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Set_short_size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: size
  scopes:
    - variable.lower-case
    - variable.other.unknown.size
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Set_long_size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: size
  scopes:
    - variable.lower-case
    - variable.other.unknown.size
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' determine the capacity needed such the allocation is a multiple of 16'
  scopesEnd:
    - comment.line.double-slash
- source: size_t
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type
    - storage.type.built-in
- source: __capacity_from_count
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type
    - storage.type.built-in
- source: count
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' returns _SSO_Cap or:'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' find the smallest multiple of 16 - 1  that is bigger than count'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: <=
  scopes:
    - keyword.operator.comparison
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: '15'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: _New_allocate
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type
    - storage.type.built-in
- source: count
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: size_type
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: capacity
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: __capacity_from_count
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _l
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Sat
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: capacity
  scopes:
    - variable.lower-case
    - variable.other.unknown.capacity
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: capacity
  scopes:
    - variable.lower-case
    - variable.other.unknown.capacity
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: _size_mask
  scopes:
    - variable.other.unknown._size_mask
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' technically at this point every element should be constructed'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' however CharT is required to be trivial so it is not needed.'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _s
  scopes:
    - variable.other.unknown._s
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: remain
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: _Deallocate
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: __is_long
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Sat
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: deallocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: __capacity
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: _Set_size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: _Set_contents
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: CharT
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: buf
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: contents
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: assert
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '!'
  scopes:
    - keyword.operator.logical
- source: __is_long
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '||'
  scopes:
    - keyword.operator.logical
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: this
  scopes:
    - variable.language.this
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: copy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: contents
  scopes:
    - variable.lower-case
    - variable.other.unknown.contents
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Set_size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: _Set_contents
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: contents
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: _Set_contents
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: contents
  scopes:
    - variable.lower-case
    - variable.other.unknown.contents
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' always makes the string long'
  scopesEnd:
    - comment.line.double-slash
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: _Resize
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type
    - storage.type.built-in
- source: new_cap
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: new_cap
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.snake-case
    - variable.other.unknown.new_cap
- source: '='
  scopes:
    - keyword.operator.assignment
- source: __capacity_from_count
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: new_cap
  scopes:
    - variable.snake-case
    - variable.other.unknown.new_cap
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: _Sat
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: new_cap
  scopes:
    - variable.snake-case
    - variable.other.unknown.new_cap
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Set_contents
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Deallocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _l
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: new_cap
  scopes:
    - variable.snake-case
    - variable.other.unknown.new_cap
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: _size_mask
  scopes:
    - variable.other.unknown._size_mask
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: _Push_back
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: CharT
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: elem
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: size
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: size
  scopes:
    - variable.lower-case
    - variable.other.unknown.size
- source: <
  scopes:
    - keyword.operator.comparison
- source: __capacity
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: size
  scopes:
    - variable.lower-case
    - variable.other.unknown.size
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: size
  scopes:
    - variable.lower-case
    - variable.other.unknown.size
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Set_size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: size
  scopes:
    - variable.lower-case
    - variable.other.unknown.size
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' _New_allocate can''t be used as the string may be short.'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: old_cap
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: __capacity
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' equivelent to ceil(cap*1.5)'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: new_cap
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: old_cap
  scopes:
    - variable.snake-case
    - variable.other.unknown.old_cap
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: old_cap
  scopes:
    - variable.snake-case
    - variable.other.unknown.old_cap
- source: '>>'
  scopes:
    - keyword.operator.bitwise.shift
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: old_cap
  scopes:
    - variable.snake-case
    - variable.other.unknown.old_cap
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.assignment
    - meta.parens
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Resize
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: new_cap
  scopes:
    - variable.snake-case
    - variable.other.unknown.new_cap
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Push_back
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: elem
  scopes:
    - variable.lower-case
    - variable.other.unknown.elem
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Insert [first, last) at pos'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' requires: Iterator to be at least a ForwardIterator'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' requires: capacity() >= size() + std::distance(first, last)'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template.argument.class
- source: Iterator
  scopes:
    - entity.name.type.template
  scopesEnd:
    - meta.template.definition
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: _Insert_no_resize
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type
    - storage.type.built-in
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Iterator
  scopes:
    - entity.name.type.parameter
- source: first
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Iterator
  scopes:
    - entity.name.type.parameter
- source: last
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: distance
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: distance
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: distance
  scopes:
    - variable.lower-case
    - variable.other.unknown.distance
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: distance
  scopes:
    - variable.lower-case
    - variable.other.unknown.distance
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ++
  scopes:
    - keyword.operator.increment
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: _Set_size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: distance
  scopes:
    - variable.lower-case
    - variable.other.unknown.distance
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Insert [first, last) at pos'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' requires: Iterator to be at least a ForwardIterator'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template.argument.class
- source: Iterator
  scopes:
    - entity.name.type.template
  scopesEnd:
    - meta.template.definition
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: _Insert_resize
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type
    - storage.type.built-in
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Iterator
  scopes:
    - entity.name.type.parameter
- source: first
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Iterator
  scopes:
    - entity.name.type.parameter
- source: last
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: distance
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: distance
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: old_buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' calling _Resize then _Insert_no_resize would work but it would cause,'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' in the insert: aaaabbbb -> aaaaIIIIbbbb `bbbb` would be copied twice'
  scopesEnd:
    - comment.line.double-slash
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: new_cap
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: __capacity_from_count
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: distance
  scopes:
    - variable.lower-case
    - variable.other.unknown.distance
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: new_buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.snake-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: _Sat
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: std
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: new_cap
  scopes:
    - variable.snake-case
    - variable.other.unknown.new_cap
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' copy up to [0, pos)'
  scopesEnd:
    - comment.line.double-slash
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: copy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: new_buf
  scopes:
    - variable.snake-case
    - variable.other.unknown.new_buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: old_buf
  scopes:
    - variable.snake-case
    - variable.other.unknown.old_buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: new_buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ++
  scopes:
    - keyword.operator.increment
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' copy from [pos, size) to the new buffer'
  scopesEnd:
    - comment.line.double-slash
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: copy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: new_buf
  scopes:
    - variable.snake-case
    - variable.other.unknown.new_buf
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: distance
  scopes:
    - variable.lower-case
    - variable.other.unknown.distance
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: old_buf
  scopes:
    - variable.snake-case
    - variable.other.unknown.old_buf
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: distance
  scopes:
    - variable.lower-case
    - variable.other.unknown.distance
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Deallocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _l
  scopes:
    - variable.other.property
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: new_buf
  scopes:
    - variable.snake-case
    - variable.other.unknown.new_buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: new_cap
  scopes:
    - variable.snake-case
    - variable.other.unknown.new_cap
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: distance
  scopes:
    - variable.lower-case
    - variable.other.unknown.distance
- source: '|'
  scopes:
    - keyword.operator.bitwise
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: _size_mask
  scopes:
    - variable.other.unknown._size_mask
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: new_buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' Insert [first, last) at pos'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' requires: Iterator to be at least a ForwardIterator'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template.argument.class
- source: Iterator
  scopes:
    - entity.name.type.template
  scopesEnd:
    - meta.template.definition
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: _Insert
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type
    - storage.type.built-in
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Iterator
  scopes:
    - entity.name.type.parameter
- source: first
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Iterator
  scopes:
    - entity.name.type.parameter
- source: last
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: distance
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: distance
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: distance
  scopes:
    - variable.lower-case
    - variable.other.unknown.distance
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: __capacity
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Insert_resize
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Insert_no_resize
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: public
  scopesBegin:
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: allocator_type
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: get_allocator
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: get
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: basic_string
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: noexcept
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.noexcept
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.noexcept
- source: noexcept
  scopesBegin:
    - meta.arguments.operator.noexcept
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.noexcept
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.noexcept
- source: Allocator
  scopesBegin:
    - meta.arguments.operator.noexcept
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.arguments.operator.noexcept
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.noexcept
  scopesEnd:
    - meta.arguments.operator.noexcept
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.noexcept
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: basic_string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: Allocator
  scopesBegin:
    - meta.parameter.initialization
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: explicit
  scopesBegin:
    - meta.function.definition.special.constructor
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.explicit
- source: basic_string
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: __string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '{.'
  scopesBegin:
    - meta.parameter.initialization
- source: _s
  scopes:
    - variable.other.unknown._s
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {{}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
- source: '}}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' see LWG 3076 for defect report, disabling comes from libc++'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopes:
    - storage.type.template.argument.class
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: __is_allocator
  scopes:
    - entity.name.scope-resolution.template.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Allocator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: nullptr_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: basic_string
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: ch
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: __string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '{}'
  scopesBegin:
    - meta.parameter.initialization
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: CharT
  scopesBegin:
    - meta.body.function.definition.special.constructor
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type
    - storage.type.built-in
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: <
  scopes:
    - keyword.operator.comparison
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ++
  scopes:
    - keyword.operator.increment
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.body.function.definition.special.constructor
- source: basic_string
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: basic_string
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: other
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: __string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '{}'
  scopesBegin:
    - meta.parameter.initialization
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: size_type
  scopesBegin:
    - meta.body.function.definition.special.constructor
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: count
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Set_contents
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.body.function.definition.special.constructor
- source: basic_string
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: basic_string
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: other
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: __string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '{}'
  scopesBegin:
    - meta.parameter.initialization
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: count
  scopesBegin:
    - meta.body.function.definition.special.constructor
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: min
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Set_contents
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.body.function.definition.special.constructor
- source: basic_string
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: __string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '{}'
  scopesBegin:
    - meta.parameter.initialization
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: _New_allocate
  scopesBegin:
    - meta.body.function.definition.special.constructor
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Set_contents
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
    - meta.body.function.definition.special.constructor
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopes:
    - storage.type.template.argument.class
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: __is_allocator
  scopes:
    - entity.name.scope-resolution.template.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Allocator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: nullptr_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: basic_string
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: basic_string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: s
  scopesBegin:
    - meta.parameter.initialization
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: length
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopes:
    - storage.type.template.argument.class
- source: InputIt
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: is_least_input_iterator
  scopes:
    - entity.name.scope-resolution.template.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: InputIt
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopesBegin:
    - keyword.operator.arithmetic
- source: '*'
  scopesEnd:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - storage.type.template.argument.nullptr
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: basic_string
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: InputIt
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: first
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: InputIt
  scopes:
    - entity.name.type.parameter
- source: last
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: __string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '{}'
  scopesBegin:
    - meta.parameter.initialization
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: if
  scopesBegin:
    - meta.body.function.definition.special.constructor
  scopes:
    - keyword.control.if
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: is_least_forward_iterator
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: InputIt
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: count
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: distance
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: CharT
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ++
  scopes:
    - keyword.operator.increment
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: __string
  scopes:
    - variable.other.unknown.__string
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Push_back
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.body.function.definition.special.constructor
- source: basic_string
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: basic_string
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: other
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: basic_string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: other
  scopesBegin:
    - meta.parameter.initialization
  scopes:
    - variable.lower-case
    - variable.other.unknown.other
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
- source: basic_string
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: basic_string
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: other
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: __string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '{}'
  scopesBegin:
    - meta.parameter.initialization
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: size_type
  scopesBegin:
    - meta.body.function.definition.special.constructor
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: count
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: CharT
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: copy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.body.function.definition.special.constructor
- source: basic_string
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: basic_string
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopesBegin:
    - storage.modifier.reference
- source: '&'
  scopesEnd:
    - storage.modifier.reference
- source: other
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: basic_string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: std
  scopesBegin:
    - meta.parameter.initialization
  scopes:
    - entity.name.scope-resolution.function.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.function.call
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: other
  scopes:
    - variable.lower-case
    - variable.other.unknown.other
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get_allocator
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
- source: basic_string
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: basic_string
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopesBegin:
    - storage.modifier.reference
- source: '&'
  scopesEnd:
    - storage.modifier.reference
- source: other
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: __string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '{}'
  scopesBegin:
    - meta.parameter.initialization
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: if
  scopesBegin:
    - meta.body.function.definition.special.constructor
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get_allocator
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' perform new alloc then copy'
  scopesEnd:
    - comment.line.double-slash
- source: size_type
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: count
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: CharT
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: copy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' this works for both short and long representations'
  scopesEnd:
    - comment.line.double-slash
- source: memcpy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: this
  scopes:
    - variable.language.this
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: other
  scopes:
    - variable.lower-case
    - variable.other.unknown.other
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: basic_string
  scopes:
    - meta.arguments.operator.sizeof
    - variable.snake-case
    - variable.other.unknown.basic_string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' the cheapest unspecified string is to set ._s.remain to'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' 0 that creates a _SSO_Cap length string, even if it was a long'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' before. deallocation is not needed as `this` now has control'
- source: //
  scopes:
    - punctuation.definition.comment
- source: ' of the buffers lifetime'
  scopesEnd:
    - comment.line.double-slash
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _Set_size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.body.function.definition.special.constructor
- source: basic_string
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: std
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: initializer_list
  scopes:
    - entity.name.type.parameter
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: ilist
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: basic_string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: ilist
  scopesBegin:
    - meta.parameter.initialization
  scopes:
    - variable.lower-case
    - variable.other.object.access.ilist
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ilist
  scopes:
    - variable.lower-case
    - variable.other.object.access.ilist
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' see LWG 2946, 2758 for defect report'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopes:
    - storage.type.template.argument.class
- source: T
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: is_convertible_v
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: _Sv
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopesBegin:
    - keyword.operator.arithmetic
- source: '*'
  scopesEnd:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - storage.type.template.argument.nullptr
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: explicit
  scopesBegin:
    - meta.function.definition.special.constructor
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.explicit
- source: basic_string
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: _Sv
  scopesBegin:
    - meta.body.function.definition.special.constructor
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: cv
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: size_type
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: count
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: cv
  scopes:
    - variable.lower-case
    - variable.other.object.access.cv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Set_contents
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: cv
  scopes:
    - variable.lower-case
    - variable.other.object.access.cv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
    - meta.body.function.definition.special.constructor
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopes:
    - storage.type.template.argument.class
- source: T
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: is_convertible
  scopes:
    - entity.name.scope-resolution.template.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: _Sv
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopesBegin:
    - keyword.operator.arithmetic
- source: '*'
  scopesEnd:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - storage.type.template.argument.nullptr
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: basic_string
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: 'n'
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: basic_string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: _Sv
  scopesBegin:
    - meta.parameter.initialization
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ~basic_string
  scopesBegin:
    - meta.function.definition.special.member.destructor
    - meta.head.function.definition.special.member.destructor
  scopes:
    - entity.name.function.destructor
    - entity.name.function.definition.special.member.destructor
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.member.destructor
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.member.destructor
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.member.destructor
  scopesEnd:
    - meta.head.function.definition.special.member.destructor
- source: _Deallocate
  scopesBegin:
    - meta.body.function.definition.special.member.destructor
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.member.destructor
  scopesEnd:
    - meta.function.definition.special.member.destructor
    - meta.body.function.definition.special.member.destructor
- source: basic_string
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '='
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: basic_string
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: str
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: this
  scopes:
    - variable.language.this
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: str
  scopes:
    - variable.lower-case
    - variable.other.unknown.str
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: __capacity
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: <
  scopes:
    - keyword.operator.comparison
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: __size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Deallocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: __size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: _Set_contents
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: __data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: __size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '='
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: basic_string
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopesBegin:
    - storage.modifier.reference
- source: '&'
  scopesEnd:
    - storage.modifier.reference
- source: other
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: noexcept
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.noexcept
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.noexcept
- source: _Sat
  scopesBegin:
    - meta.arguments.operator.noexcept
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: propagate_on_container_move_assignment
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '||'
  scopes:
    - keyword.operator.logical
- source: _Sat
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: is_always_equal
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
  scopesEnd:
    - meta.arguments.operator.noexcept
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.noexcept
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: if
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: this
  scopes:
    - variable.language.this
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: other
  scopes:
    - variable.lower-case
    - variable.other.unknown.other
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: get_allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: get_allocator
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '||'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: _Sat
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: propagate_on_container_move_assignment
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: size_type
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: count
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: __size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Set_contents
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: __data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: memcpy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: this
  scopes:
    - variable.language.this
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: other
  scopes:
    - variable.lower-case
    - variable.other.unknown.other
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sizeof
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.sizeof
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.sizeof
- source: basic_string
  scopes:
    - meta.arguments.operator.sizeof
    - variable.snake-case
    - variable.other.unknown.basic_string
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.sizeof
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: other
  scopes:
    - variable.lower-case
    - variable.other.object.access.other
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: _Set_size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '='
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: s
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: size_type
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: count
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: Traits
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: length
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: __capacity
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: <
  scopes:
    - keyword.operator.comparison
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Deallocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: _Set_contents
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '='
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: CharT
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: ch
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: _Deallocate
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: CharT
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '='
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: std
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: initializer_list
  scopes:
    - entity.name.type.parameter
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: ilist
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: CharT
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: this
  scopes:
    - variable.language.this
- source: '->'
  scopes:
    - punctuation.separator.pointer-access
- source: __capacity
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: <
  scopes:
    - keyword.operator.comparison
- source: ilist
  scopes:
    - variable.lower-case
    - variable.other.object.access.ilist
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Deallocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: '='
  scopes:
    - keyword.operator.assignment
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: copy
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ilist
  scopes:
    - variable.lower-case
    - variable.other.object.access.ilist
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ilist
  scopes:
    - variable.lower-case
    - variable.other.object.access.ilist
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopes:
    - storage.type.template.argument.class
- source: T
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: is_convertible
  scopes:
    - entity.name.scope-resolution.template.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: _Sv
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: is_convertible_v
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopesBegin:
    - keyword.operator.arithmetic
- source: '*'
  scopesEnd:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - storage.type.template.argument.nullptr
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: basic_string
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '='
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: t
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: _Deallocate
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Sv
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: cv
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: size_type
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: count
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: cv
  scopes:
    - variable.lower-case
    - variable.other.object.access.cv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: length
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: CharT
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Set_contents
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: cv
  scopes:
    - variable.lower-case
    - variable.other.object.access.cv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: basic_string
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: assign
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: ch
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: _Deallocate
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: CharT
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type
    - storage.type.built-in
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: <
  scopes:
    - keyword.operator.comparison
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ++
  scopes:
    - keyword.operator.increment
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: assign
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: basic_string
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: str
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: '='
  scopes:
    - keyword.operator.assignment
- source: str
  scopes:
    - variable.lower-case
    - variable.other.unknown.str
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: assign
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: basic_string
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: str
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: npos
  scopes:
    - variable.lower-case
    - variable.other.unknown.npos
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substring
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: assign
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: basic_string
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopesBegin:
    - storage.modifier.reference
- source: '&'
  scopesEnd:
    - storage.modifier.reference
- source: str
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: noexcept
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.noexcept
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.noexcept
- source: _Sat
  scopesBegin:
    - meta.arguments.operator.noexcept
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: propagate_on_container_move_assignment
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: '||'
  scopes:
    - keyword.operator.logical
- source: _Sat
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: is_always_equal
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
  scopesEnd:
    - meta.arguments.operator.noexcept
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: move
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: str
  scopes:
    - variable.lower-case
    - variable.other.unknown.str
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: assign
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: assign
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: s
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: length
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopes:
    - storage.type.template.argument.class
- source: InputIt
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: is_least_input_iterator
  scopes:
    - entity.name.scope-resolution.template.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: InputIt
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopesBegin:
    - keyword.operator.arithmetic
- source: '*'
  scopesEnd:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - storage.type.template.argument.nullptr
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: basic_string
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: assign
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: InputIt
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: first
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: InputIt
  scopes:
    - entity.name.type.parameter
- source: last
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: _Deallocate
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: constexpr
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.constexpr
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: is_least_forward_iterator
  scopes:
    - entity.name.scope-resolution
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: InputIt
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: value
  scopes:
    - variable.lower-case
    - variable.other.unknown.value
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: count
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: distance
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: CharT
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: buf
  scopes:
    - variable.lower-case
    - variable.other.unknown.buf
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ++
  scopes:
    - keyword.operator.increment
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Push_back
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopes:
    - storage.type.template.argument.class
- source: T
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: is_convertible_v
  scopesBegin:
    - meta.qualified-type
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: _Sv
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopesBegin:
    - keyword.operator.arithmetic
- source: '*'
  scopesEnd:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - storage.type.template.argument.nullptr
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: basic_string
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: assign
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '}'
  scopes:
    - meta.body.function.definition
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopes:
    - storage.type.template.argument.class
- source: T
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: is_convertible
  scopes:
    - entity.name.scope-resolution.template.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: _Sv
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopesBegin:
    - keyword.operator.arithmetic
- source: '*'
  scopesEnd:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - storage.type.template.argument.nullptr
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: basic_string
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: assign
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: 'n'
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: _Sv
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: reference
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: at
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: out_of_range
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'std::basic_string'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const_reference
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: at
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: '>='
  scopes:
    - keyword.operator.comparison
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: throw
  scopes:
    - keyword.control.throw
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: out_of_range
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: 'std::basic_string'
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: reference
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '[]'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.body.function.definition.special.operator-overload
- source: const_reference
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '[]'
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: reference
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: front
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const_reference
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: front
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: reference
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: back
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const_reference
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: back
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: data
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const
  scopes:
    - storage.modifier.const
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: data
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const
  scopes:
    - storage.modifier.const
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: c_str
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: operator
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.head.function.definition.special.operator-overload
    - keyword.other.operator.overload
- source: std
  scopes:
    - entity.name.scope-resolution.operator-overload
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.operator-overload
- source: basic_string_view
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - entity.name.operator.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: Traits
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: basic_string_view
  scopes:
    - entity.name.function.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: Traits
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: iterator
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: begin
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const_iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: begin
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const_iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: cbegin
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: end
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const_iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: end
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const_iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: cend
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: rbegin
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: reverse_iterator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const_iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: rbegin
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: reverse_iterator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const_iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: crbegin
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: reverse_iterator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: rend
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: reverse_iterator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const_iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: rend
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: reverse_iterator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: const_iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: crend
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: reverse_iterator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: '[['
  scopesBegin:
    - support.other.attribute
  scopes:
    - punctuation.section.attribute.begin
- source: nodiscard
  scopes:
    - entity.other.attribute.nodiscard
- source: ']]'
  scopes:
    - punctuation.section.attribute.end
  scopesEnd:
    - support.other.attribute
- source: bool
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: empty
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: size_type
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: size
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: size_type
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: max_size
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: _size_mask
  scopes:
    - variable.other.unknown._size_mask
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: '2'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: reserve
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: new_cap
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: new_cap
  scopes:
    - variable.snake-case
    - variable.other.unknown.new_cap
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: __capacity
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Resize
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: new_cap
  scopes:
    - variable.snake-case
    - variable.other.unknown.new_cap
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: reserve
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '}'
  scopes:
    - meta.body.function.definition
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: ' NOOP '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: size_type
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: capacity
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: const
  scopes:
    - storage.modifier.specifier.functional.post-parameters.const
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: __capacity
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: shrink_to_fit
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' dont purposely make a string long'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Resize
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: clear
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: _Set_size
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: insert
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: index
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: ch
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: _Insert
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: index
  scopes:
    - variable.lower-case
    - variable.other.unknown.index
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: _Repeat_iterator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: _Repeat_iterator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: insert
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: index
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: s
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: auto
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: distance
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: distance
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Insert
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: index
  scopes:
    - variable.lower-case
    - variable.other.unknown.index
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: distance
  scopes:
    - variable.lower-case
    - variable.other.unknown.distance
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: insert
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: index
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: _Insert
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: index
  scopes:
    - variable.lower-case
    - variable.other.unknown.index
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: insert
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: index
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: basic_string
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: str
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: _Insert
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: index
  scopes:
    - variable.lower-case
    - variable.other.unknown.index
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: insert
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: index
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: basic_string
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: str
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: index_str
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: npos
  scopes:
    - variable.lower-case
    - variable.other.unknown.npos
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: count
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: min
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: __size
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: index_str
  scopes:
    - variable.snake-case
    - variable.other.unknown.index_str
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Insert
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: index
  scopes:
    - variable.lower-case
    - variable.other.unknown.index
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: __data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: index_str
  scopes:
    - variable.snake-case
    - variable.other.unknown.index_str
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: str
  scopes:
    - variable.lower-case
    - variable.other.object.access.str
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: __data
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: index_str
  scopes:
    - variable.snake-case
    - variable.other.unknown.index_str
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: insert
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const_iterator
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: ch
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: insert
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: insert
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const_iterator
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: ch
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: insert
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopes:
    - storage.type.template.argument.class
- source: InputIt
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: is_least_input_iterator
  scopes:
    - entity.name.scope-resolution.template.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: InputIt
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopesBegin:
    - keyword.operator.arithmetic
- source: '*'
  scopesEnd:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - storage.type.template.argument.nullptr
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: iterator
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: insert
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const_iterator
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: InputIt
  scopes:
    - entity.name.type.parameter
- source: first
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: InputIt
  scopes:
    - entity.name.type.parameter
- source: last
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: //
  scopesBegin:
    - meta.body.function.definition
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' insert is expensive, optimize to _Push_back if can'
  scopesEnd:
    - comment.line.double-slash
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: end
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: _Push_back
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: else
  scopes:
    - keyword.control.else
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: indx
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: while
  scopes:
    - keyword.control.while
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: '!='
  scopes:
    - keyword.operator.comparison
- source: last
  scopes:
    - variable.lower-case
    - variable.other.unknown.last
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: auto
  scopesBegin:
    - meta.assignment
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: ch
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: _Insert
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: indx
  scopes:
    - variable.lower-case
    - variable.other.unknown.indx
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: _Repeat_iterator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: _Repeat_iterator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: first
  scopes:
    - variable.lower-case
    - variable.other.unknown.first
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: ++
  scopes:
    - keyword.operator.increment
- source: indx
  scopes:
    - variable.lower-case
    - variable.other.unknown.indx
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: insert
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const_iterator
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: initializer_list
  scopes:
    - entity.name.type.parameter
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
- source: ilist
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: _Insert
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: __data
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ilist
  scopes:
    - variable.lower-case
    - variable.other.object.access.ilist
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ilist
  scopes:
    - variable.lower-case
    - variable.other.object.access.ilist
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopes:
    - storage.type.template.argument.class
- source: T
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: is_convertible
  scopes:
    - entity.name.scope-resolution.template.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: _Sv
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: is_convertible
  scopes:
    - entity.name.scope-resolution.template.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopesBegin:
    - keyword.operator.arithmetic
- source: '*'
  scopesEnd:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - storage.type.template.argument.nullptr
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: basic_string
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: insert
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: pos
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: t
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: _Sv
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: sv
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: insert
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: pos
  scopes:
    - variable.lower-case
    - variable.other.unknown.pos
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sv
  scopes:
    - variable.lower-case
    - variable.other.object.access.sv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sv
  scopes:
    - variable.lower-case
    - variable.other.object.access.sv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopes:
    - storage.type.template.argument.class
- source: T
  scopes:
    - entity.name.type.template
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: is_convertible
  scopes:
    - entity.name.scope-resolution.template.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: _Sv
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&&'
  scopesBegin:
    - keyword.operator.logical
- source: '!'
  scopesEnd:
    - keyword.operator.logical
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: is_convertible
  scopes:
    - entity.name.scope-resolution.template.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - keyword.operator.bitwise
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: CharT
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: void
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopesBegin:
    - keyword.operator.arithmetic
- source: '*'
  scopesEnd:
    - keyword.operator.arithmetic
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
- source: '='
  scopes:
    - keyword.operator.assignment
- source: nullptr
  scopes:
    - storage.type.template.argument.nullptr
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: basic_string
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: insert
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: index
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: T
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: t
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: index_str
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: npos
  scopes:
    - variable.lower-case
    - variable.other.unknown.npos
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: _Sv
  scopesBegin:
    - meta.body.function.definition
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: sv
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: _Sv
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: t
  scopes:
    - variable.lower-case
    - variable.other.unknown.t
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: substr
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: index_str
  scopes:
    - variable.snake-case
    - variable.other.unknown.index_str
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: insert
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: index
  scopes:
    - variable.lower-case
    - variable.other.unknown.index
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sv
  scopes:
    - variable.lower-case
    - variable.other.object.access.sv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: begin
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: sv
  scopes:
    - variable.lower-case
    - variable.other.object.access.sv
- source: .
  scopes:
    - punctuation.separator.dot-access
- source: end
  scopes:
    - entity.name.function.member
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.member
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: basic_string
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '&'
  scopes:
    - storage.modifier.reference
- source: erase
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: index
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: size_type
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: npos
  scopes:
    - variable.lower-case
    - variable.other.unknown.npos
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: count
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: min
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: __size
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: '-'
  scopes:
    - keyword.operator.arithmetic
- source: index
  scopes:
    - variable.lower-case
    - variable.other.unknown.index
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: return
  scopes:
    - keyword.control.return
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: this
  scopes:
    - variable.language.this
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.body.function.definition
- source: iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: erase
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const_iterator
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: position
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '}'
  scopes:
    - meta.body.function.definition
    - punctuation.section.block.end.bracket.curly.function.definition
- source: iterator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: erase
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: const_iterator
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: first
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const_iterator
  scopes:
    - entity.name.type.parameter
- source: last
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: '}'
  scopes:
    - meta.body.function.definition
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.class
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.namespace
  scopesEnd:
    - meta.block.namespace
    - meta.body.namespace
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' namespace std'
  scopesEnd:
    - comment.line.double-slash
- source: '#'
  scopesBegin:
    - keyword.control.directive.endif
  scopes:
    - punctuation.definition.directive
- source: endif
