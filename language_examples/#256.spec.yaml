- source: class
  scopesBegin:
    - meta.block.class
  scopes:
    - meta.head.class
    - storage.type.class
- source: basic_string
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - meta.head.class
    - punctuation.section.block.begin.bracket.curly.class
- source: basic_string
  scopesBegin:
    - meta.body.class
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: noexcept
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.noexcept
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.noexcept
- source: noexcept
  scopesBegin:
    - meta.arguments.operator.noexcept
  scopes:
    - keyword.operator.functionlike
    - keyword.operator.noexcept
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.operator.noexcept
- source: Allocator
  scopesBegin:
    - meta.arguments.operator.noexcept
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.arguments.operator.noexcept
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.noexcept
  scopesEnd:
    - meta.arguments.operator.noexcept
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.operator.noexcept
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: basic_string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: Allocator
  scopesBegin:
    - meta.parameter.initialization
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
- source: explicit
  scopes:
    - storage.modifier.specifier.functional.pre-parameters.explicit
- source: basic_string
  scopesBegin:
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: noexcept
  scopes:
    - storage.modifier.specifier.functional.post-parameters.noexcept
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: __string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '{.'
  scopesBegin:
    - meta.parameter.initialization
- source: _s
  scopes:
    - variable.other.unknown._s
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ' {{}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: _SSO_Cap
  scopes:
    - variable.other.unknown._SSO_Cap
- source: '}}'
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: '}'
  scopes:
    - meta.body.function.definition.special.constructor
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' see LWG 3076 for defect report, disabling comes from libc++'
  scopesEnd:
    - comment.line.double-slash
- source: template
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopes:
    - variable.lower-case
    - variable.other.unknown.class
- source: '='
  scopes:
    - keyword.operator.assignment
- source: std
  scopes:
    - entity.name.scope-resolution.template.definition
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.definition
- source: enable_if_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: __is_allocator
  scopes:
    - entity.name.scope-resolution.template.call
- source: <
  scopesBegin:
    - meta.template.call
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: Allocator
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.template.call
    - meta.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: value
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma.template.argument
- source: nullptr_t
  scopes:
    - support.type.posix-reserved
    - support.type.built-in.posix-reserved
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
  scopesEnd:
    - meta.template.definition
- source: basic_string
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: size_type
  scopesBegin:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
  scopes:
    - entity.name.type.parameter
- source: count
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.type.parameter
- source: ch
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: Allocator
  scopes:
    - entity.name.type.parameter
- source: '&'
  scopes:
    - storage.modifier.reference
- source: alloc
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: Allocator
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.function.definition.parameters.special.constructor
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
- source: ':'
  scopes:
    - punctuation.separator.initializers
- source: __string
  scopes:
    - entity.name.function.call.initializer
- source: (
  scopes:
    - >-
      punctuation.section.arguments.begin.bracket.round.function.call.initializer
- source: '{}'
  scopesBegin:
    - meta.parameter.initialization
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: alloc
  scopes:
    - variable.lower-case
    - variable.other.unknown.alloc
  scopesEnd:
    - meta.parameter.initialization
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call.initializer
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.head.function.definition.special.constructor
- source: CharT
  scopesBegin:
    - meta.body.function.definition.special.constructor
    - meta.assignment
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: buf
  scopesBegin:
    - meta.assignment
  scopes:
    - variable.lower-case
    - variable.other.assignment
- source: '='
  scopes:
    - keyword.operator.assignment
  scopesEnd:
    - meta.assignment
- source: _New_allocate
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
  scopesEnd:
    - meta.assignment
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: size_t
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type
    - storage.type.built-in
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: <
  scopes:
    - keyword.operator.comparison
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ++
  scopes:
    - keyword.operator.increment
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ch
  scopes:
    - variable.lower-case
    - variable.other.unknown.ch
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: traits_type
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: assign
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: buf
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: count
  scopes:
    - variable.lower-case
    - variable.other.unknown.count
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: CharT
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: )
  scopesBegin:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: )
  scopesEnd:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
    - meta.body.function.definition.special.constructor
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
