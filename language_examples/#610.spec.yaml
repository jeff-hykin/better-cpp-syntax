- source: '#'
  scopesBegin:
    - meta.preprocessor.include
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: string
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.other.lt-gt.include
- source: '#'
  scopesBegin:
    - keyword.control.directive.include
  scopes:
    - punctuation.definition.directive
- source: include
  scopesEnd:
    - keyword.control.directive.include
- source: <
  scopesBegin:
    - string.quoted.other.lt-gt.include
  scopes:
    - punctuation.definition.string.begin
- source: string_view
- source: '>'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - meta.preprocessor.include
    - string.quoted.other.lt-gt.include
- source: using
  scopesBegin:
    - meta.using-namespace
  scopes:
    - keyword.other.using.directive
- source: namespace
  scopes:
    - keyword.other.namespace.directive
    - storage.type.namespace.directive
- source: std
  scopes:
    - entity.name.scope-resolution.namespace.using
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.namespace.using
- source: literals
  scopes:
    - entity.name.scope-resolution.namespace.using
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.namespace.using
- source: string_view_literals
  scopes:
    - entity.name.namespace
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: using
  scopes:
    - keyword.other.using.directive
- source: namespace
  scopes:
    - keyword.other.namespace.directive
    - storage.type.namespace.directive
- source: std
  scopes:
    - entity.name.scope-resolution.namespace.using
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.namespace.using
- source: literals
  scopes:
    - entity.name.scope-resolution.namespace.using
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.namespace.using
- source: string_literals
  scopes:
    - entity.name.namespace
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.using-namespace
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: view
  scopes:
    - variable.lower-case
    - variable.other.unknown.view
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Hello
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: sv
  scopes:
    - keyword.other.suffix.literal.user-defined.reserved.string
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: owned
  scopes:
    - variable.lower-case
    - variable.other.unknown.owned
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: Hello
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: s
  scopes:
    - keyword.other.suffix.literal.user-defined.reserved.string
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: typename
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template.argument.typename
- source: T
  scopes:
    - entity.name.type.template
  scopesEnd:
    - meta.template.definition
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: struct
  scopesBegin:
    - meta.block.struct
  scopes:
    - meta.head.struct
    - storage.type.struct
- source: Wrapper
  scopes:
    - entity.name.type.struct
- source: '{'
  scopes:
    - meta.head.struct
    - punctuation.section.block.begin.bracket.curly.struct
- source: T
  scopesBegin:
    - meta.body.struct
    - meta.declaration
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: content
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.struct
  scopesEnd:
    - meta.body.struct
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.struct
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: Wrapper
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.qualified-type
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: std
  scopes:
    - entity.name.scope-resolution.template.call
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.template.call
- source: wstring
  scopes:
    - meta.qualified-type
    - entity.name.type
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '""'
  scopesBegin:
    - entity.name.operator.custom-literal
- source: _wrap
  scopesEnd:
    - entity.name.operator.custom-literal
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: const
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.modifier.specifier.const
- source: wchar_t
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: s
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: std
  scopes:
    - entity.name.scope-resolution.parameter
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution.parameter
- source: size_t
  scopes:
    - storage.type
    - storage.type.built-in
- source: 'n'
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: s
  scopes:
    - variable.lower-case
    - variable.other.unknown.s
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'n'
  scopes:
    - variable.lower-case
    - variable.other.unknown.n
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: wide_string
  scopes:
    - variable.snake-case
    - variable.other.unknown.wide_string
- source: '='
  scopes:
    - keyword.operator.assignment
- source: L
  scopesBegin:
    - string.quoted.double
    - punctuation.definition.string.begin
  scopes:
    - meta.encoding
- source: '"'
  scopesEnd:
    - punctuation.definition.string.begin
- source: ws
- source: '"'
  scopes:
    - punctuation.definition.string.end
- source: _wrap
  scopes:
    - keyword.other.suffix.literal.user-defined.string
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: raw_wide_string
  scopes:
    - variable.other.unknown.raw_wide_string
- source: '='
  scopes:
    - keyword.operator.assignment
- source: LR
  scopesBegin:
    - string.quoted.double.raw.--
    - punctuation.definition.string.--.begin
  scopes:
    - meta.encoding
- source: '"--('
  scopesEnd:
    - punctuation.definition.string.--.begin
- source: rws
- source: )--"
  scopes:
    - punctuation.definition.string.--.end
- source: _wrap
  scopes:
    - keyword.other.suffix.literal.user-defined.string
  scopesEnd:
    - string.quoted.double.raw.--
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopes:
    - storage.modifier.specifier.static
- source: Wrapper
  scopesBegin:
    - meta.function.definition.special.operator-overload
    - meta.qualified-type
  scopes:
    - entity.name.type
- source: <
  scopesBegin:
    - meta.template.call
  scopes:
    - punctuation.section.angle-brackets.begin.template.call
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.call
  scopesEnd:
    - meta.qualified-type
    - meta.template.call
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: '""'
  scopesBegin:
    - entity.name.operator.custom-literal
- source: _wrap
  scopesEnd:
    - entity.name.operator.custom-literal
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: char
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: c
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: return
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - keyword.control.return
- source: '{'
  scopesBegin:
    - meta.block
  scopes:
    - punctuation.section.block.begin.bracket.curly
- source: c
  scopes:
    - variable.lower-case
    - variable.other.unknown.c
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly
  scopesEnd:
    - meta.block
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: auto
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: character
  scopes:
    - variable.lower-case
    - variable.other.unknown.character
- source: '='
  scopes:
    - keyword.operator.assignment
- source: ''''
  scopesBegin:
    - string.quoted.single
  scopes:
    - punctuation.definition.string.begin
- source: c
- source: ''''
  scopes:
    - punctuation.definition.string.end
- source: _wrap
  scopes:
    - keyword.other.suffix.literal.user-defined.character
  scopesEnd:
    - string.quoted.single
- source: ;
  scopes:
    - punctuation.terminator.statement
