- source: using
  scopesBegin:
    - meta.using-namespace
  scopes:
    - keyword.other.using.directive
- source: namespace
  scopes:
    - keyword.other.namespace.directive
    - storage.type.namespace.directive
- source: std
  scopes:
    - entity.name.namespace
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.using-namespace
- source: template
  scopes:
    - storage.type.template
- source: <
  scopes:
    - punctuation.section.angle-brackets.begin.template.definition
- source: class
  scopesBegin:
    - meta.template.definition
  scopes:
    - storage.type.template.argument.class
- source: ANYTYPE
  scopes:
    - entity.name.type.template
  scopesEnd:
    - meta.template.definition
- source: '>'
  scopes:
    - punctuation.section.angle-brackets.end.template.definition
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: thing
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: a
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: Blah
  scopes:
    - entity.name.type.parameter
- source: other_thing
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: c
  scopes:
    - variable.parameter
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '10'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: ANYTYPE
  scopes:
    - entity.name.type.parameter
- source: f
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: return
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.return
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
  scopesEnd:
    - meta.function.definition
    - meta.body.function.definition
- source: int
  scopesBegin:
    - meta.function.definition.special.operator-overload
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: operator
  scopesBegin:
    - meta.head.function.definition.special.operator-overload
  scopes:
    - keyword.other.operator.overload
- source: ^
  scopes:
    - entity.name.operator
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.operator-overload
- source: double
  scopesBegin:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: a
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: double
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: b
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters.special.operator-overload
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.operator-overload
- source: '{'
  scopes:
    - >-
      punctuation.section.block.begin.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.head.function.definition.special.operator-overload
- source: cout
  scopesBegin:
    - meta.body.function.definition.special.operator-overload
  scopes:
    - variable.lower-case
    - variable.other.unknown.cout
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: testing
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: return
  scopes:
    - keyword.control.return
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - >-
      punctuation.section.block.end.bracket.curly.function.definition.special.operator-overload
  scopesEnd:
    - meta.function.definition.special.operator-overload
    - meta.body.function.definition.special.operator-overload
- source: int
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: main
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: arg_num
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopesBegin:
    - storage.modifier.pointer
- source: '*'
  scopesEnd:
    - storage.modifier.pointer
- source: vargs
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: if
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: and
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.and
- source: '0'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: cout
  scopes:
    - variable.lower-case
    - variable.other.unknown.cout
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: this is the and operator
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'true'
  scopes:
    - constant.language.true
- source: and
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.and
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: c
  scopes:
    - variable.lower-case
    - variable.other.unknown.c
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: cout
  scopes:
    - variable.lower-case
    - variable.other.unknown.cout
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: this is the and operator
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: if
  scopes:
    - keyword.control.if
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: 'true'
  scopes:
    - constant.language.true
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: and
  scopes:
    - keyword.operator.wordlike
    - keyword.operator.and
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: c
  scopes:
    - variable.lower-case
    - variable.other.unknown.c
- source: '>'
  scopes:
    - keyword.operator.comparison
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: cout
  scopes:
    - variable.lower-case
    - variable.other.unknown.cout
- source: '<<'
  scopes:
    - keyword.operator.bitwise.shift
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: this is still the and operator
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '#'
  scopesBegin:
    - meta.preprocessor.diagnostic.$reference(directive)
    - keyword.control.directive.diagnostic.error
  scopes:
    - punctuation.definition.directive
- source: error
  scopesEnd:
    - keyword.control.directive.diagnostic.error
- source: I
  scopesBegin:
    - string.unquoted
- source: ' should be able to write single quotes in here: Don''t make errors'
  scopesEnd:
    - meta.preprocessor.diagnostic.$reference(directive)
    - string.unquoted
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
