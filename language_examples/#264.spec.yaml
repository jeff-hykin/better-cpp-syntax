- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: func
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.function.definition
  scopesEnd:
    - meta.head.function.definition
- source: printf
  scopesBegin:
    - meta.body.function.definition
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%d'
  scopes:
    - constant.other.placeholder
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: 'N'
  scopes:
    - variable.upper-case
    - variable.other.unknown.N
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: <=
  scopes:
    - keyword.operator.comparison
- source: 'N'
  scopes:
    - variable.upper-case
    - variable.other.unknown.N
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: printf
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: '%d'
  scopesBegin:
    - constant.other.placeholder
- source: '%c'
  scopesEnd:
    - constant.other.placeholder
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: randint
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '1000000006'
  scopes:
    - constant.numeric.decimal
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: '"'
  scopesBegin:
    - string.quoted.double
  scopes:
    - punctuation.definition.string.begin
- source: \n
  scopes:
    - constant.character.escape
- source: '"'
  scopes:
    - punctuation.definition.string.end
  scopesEnd:
    - string.quoted.double
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '=='
  scopes:
    - keyword.operator.comparison
- source: 'N'
  scopes:
    - variable.upper-case
    - variable.other.unknown.N
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: static
  scopesBegin:
    - meta.declaration
  scopes:
    - storage.modifier.specifier.static
- source: int
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: perm
  scopes:
    - meta.declaration
    - variable.lower-case
    - variable.other.declare
- source: '['
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - punctuation.definition.begin.bracket.square
- source: 'N'
  scopes:
    - variable.upper-case
    - variable.other.unknown.N
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.declaration
    - meta.bracket.square.access
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: for
  scopes:
    - keyword.control.for
- source: (
  scopesBegin:
    - meta.parens
  scopes:
    - punctuation.section.parens.begin.bracket.round
- source: int
  scopesBegin:
    - meta.parens.control.for
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: <=
  scopes:
    - keyword.operator.comparison
- source: 'N'
  scopes:
    - variable.upper-case
    - variable.other.unknown.N
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: ++
  scopes:
    - keyword.operator.increment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
  scopesEnd:
    - meta.parens.control.for
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round
  scopesEnd:
    - meta.parens
- source: perm
  scopesBegin:
    - meta.bracket.square.access
  scopes:
    - variable.other.object
- source: '['
  scopes:
    - punctuation.definition.begin.bracket.square
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ']'
  scopes:
    - punctuation.definition.end.bracket.square
  scopesEnd:
    - meta.bracket.square.access
- source: '='
  scopes:
    - keyword.operator.assignment
- source: i
  scopes:
    - variable.lower-case
    - variable.other.unknown.i
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: std
  scopes:
    - entity.name.scope-resolution
- source: '::'
  scopes:
    - punctuation.separator.namespace.access
    - punctuation.separator.scope-resolution
- source: shuffle
  scopes:
    - entity.name.function.call
- source: (
  scopes:
    - punctuation.section.arguments.begin.bracket.round.function.call
- source: perm
  scopes:
    - variable.lower-case
    - variable.other.unknown.perm
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: perm
  scopes:
    - variable.lower-case
    - variable.other.unknown.perm
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: '1'
  scopes:
    - constant.numeric.decimal
- source: +
  scopes:
    - keyword.operator.arithmetic
- source: 'N'
  scopes:
    - variable.upper-case
    - variable.other.unknown.N
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: gen
  scopes:
    - variable.lower-case
    - variable.other.unknown.gen
- source: )
  scopes:
    - punctuation.section.arguments.end.bracket.round.function.call
- source: //
  scopesBegin:
    - comment.line.double-slash
  scopes:
    - punctuation.definition.comment
- source: ' std::shuffle(perm + 1, prem + N, perm + 1 + N)'
  scopesEnd:
    - comment.line.double-slash
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.function.definition
