- source: /*!
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * ... text ...'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
- source: /*!
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' ... text ...'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: ///
  scopesBegin:
    - comment.line.double-slash.documentation
    - punctuation.definition.comment.documentation
- source: ///
  scopesEnd:
    - punctuation.definition.comment.documentation
- source: ' ... text ...'
- source: ///
  scopesBegin:
    - punctuation.definition.comment.documentation
- source: //!
- source: //!
  scopesEnd:
    - punctuation.definition.comment.documentation
- source: ... text ...
- source: //!
  scopesBegin:
    - punctuation.definition.comment.documentation
- source: /////////////////////////////////////////////////
- source: ///
  scopesEnd:
    - punctuation.definition.comment.documentation
- source: ' ... text ...'
- source: /////////////////////////////////////////////////
  scopesBegin:
    - punctuation.definition.comment.documentation
- source: ///
  scopesEnd:
    - punctuation.definition.comment.documentation
- source: '@throw'
  scopes:
    - storage.type.class.doxygen
- source: ' std::runtime_error On error.'
- source: ///
  scopes:
    - punctuation.definition.comment.documentation
- source: '@throws'
  scopes:
    - storage.type.class.doxygen
- source: ' std::runtime_error On error.'
  scopesEnd:
    - comment.line.double-slash.documentation
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: test
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /**
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * '
- source: '@param'
  scopes:
    - storage.type.class.doxygen
- source: p0
  scopes:
    - variable.parameter
- source: ' is the first p.'
- source: ' * '
- source: '@param'
  scopes:
    - storage.type.class.doxygen
- source: '['
- source: in
  scopes:
    - keyword.other.parameter.direction.in
- source: ']'
- source: p0
  scopes:
    - variable.parameter
- source: ' is an input parameter'
- source: ' * '
- source: '@param'
  scopes:
    - storage.type.class.doxygen
- source: '['
- source: in
  scopes:
    - keyword.other.parameter.direction.in
- source: ','
- source: out
  scopes:
    - keyword.other.parameter.direction.out
- source: ']'
- source: io
  scopes:
    - variable.parameter
- source: ' is an in-out paramater'
- source: ' * '
- source: '@param'
  scopes:
    - storage.type.class.doxygen
- source: ' ['
- source: in
  scopes:
    - keyword.other.parameter.direction.in
- source: ']'
- source: p1
  scopes:
    - variable.parameter
- source: ' is a param with a space'
- source: ' * '
- source: '@param'
  scopes:
    - storage.type.class.doxygen
- source: '['
- source: out
  scopes:
    - keyword.other.parameter.direction.out
- source: ']'
- source: dest
  scopes:
    - variable.parameter
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
- source: /**
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * '
- source: '@startuml'
  scopes:
    - storage.type.class.doxygen
- source: ' * Alice -> Bob : Hello'
- source: ' * '
- source: '@enduml'
  scopes:
    - storage.type.class.doxygen
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: //!
  scopesBegin:
    - comment.line.double-slash.documentation
  scopes:
    - punctuation.definition.comment.documentation
- source: ' Brief description, which is'
- source: //!
  scopes:
    - punctuation.definition.comment.documentation
- source: ' really a detailed description since it spans multiple lines.'
  scopesEnd:
    - comment.line.double-slash.documentation
- source: /*!
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' Another detailed description!'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: var
  scopes:
    - variable.lower-case
    - variable.other.unknown.var
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: '!< Detailed description after the member '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
- source: /*
  scopes:
    - punctuation.definition.comment.begin
- source: '******************************************'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: ' /**'
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: '                                                *  ... text'
- source: '***********************************************/'
  scopes:
    - punctuation.definition.comment.end.documentation
- source: /**
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * A brief history of JavaDoc-style (C-style) comments.'
- source: ' *'
- source: ' * This is the typical JavaDoc-style C-style comment. It starts with two'
- source: ' * asterisks.'
- source: ' *'
- source: ' * '
- source: '@param'
  scopes:
    - storage.type.class.doxygen
- source: theory
  scopes:
    - variable.parameter
- source: ' Even if there is only one possible unified theory. it is just a'
- source: ' *               set of rules and equations.'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: cstyle
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: theory
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: >-
    /*******************************************************************************
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' * A brief history of JavaDoc-style (C-style) banner comments.'
- source: ' *'
- source: ' * This is the typical JavaDoc-style C-style "banner" comment. It starts with'
- source: ' * a forward slash followed by some number, n, of asterisks, where n > 2. It''s'
- source: ' * written this way to be more "visible" to developers who are reading the'
- source: ' * source code.'
- source: ' *'
- source: ' * Often, developers are unaware that this is not (by default) a valid Doxygen'
- source: ' * comment block!'
- source: ' *'
- source: ' * However, as long as JAVADOC_BLOCK = YES is added to the Doxyfile, it will'
- source: ' * work as expected.'
- source: ' *'
- source: ' * This style of commenting behaves well with clang-format.'
- source: ' *'
- source: ' * '
- source: '@param'
  scopes:
    - storage.type.class.doxygen
- source: theory
  scopes:
    - variable.parameter
- source: ' Even if there is only one possible unified theory. it is just a'
- source: ' *               set of rules and equations.'
- source: >-
    ******************************************************************************/
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: javadocBanner
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: theory
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: '*************************************************************************'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: ' /**'
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: '                                                                               * A brief'
- source: '                                                                               *history of'
- source: '                                                                               *Doxygen-style'
- source: '                                                                               *banner'
- source: '                                                                               *comments.'
- source: '                                                                               *'
- source: '                                                                               * This is a'
- source: '                                                                               *Doxygen-style'
- source: '                                                                               *C-style'
- source: '                                                                               *"banner"'
- source: '                                                                               *comment.'
- source: '                                                                               *It starts'
- source: '                                                                               *with a'
- source: '                                                                               *"normal"'
- source: '                                                                               * comment'
- source: '                                                                               *and is'
- source: '                                                                               *then'
- source: '                                                                               *converted'
- source: '                                                                               *to a'
- source: '                                                                               *"special"'
- source: '                                                                               *comment'
- source: '                                                                               *block near'
- source: '                                                                               *the end of'
- source: '                                                                               * the first'
- source: '                                                                               *line. It'
- source: '                                                                               *is written'
- source: '                                                                               *this way'
- source: '                                                                               *to be more'
- source: '                                                                               *"visible"'
- source: '                                                                               *to'
- source: '                                                                               *developers'
- source: '                                                                               * who are'
- source: '                                                                               *reading'
- source: '                                                                               *the source'
- source: '                                                                               *code. This'
- source: '                                                                               *style of'
- source: '                                                                               *commenting'
- source: '                                                                               *behaves'
- source: '                                                                               *poorly'
- source: '                                                                               *with'
- source: '                                                                               *clang-format.'
- source: '                                                                               *'
- source: '                                                                               * '
- source: '@param'
  scopes:
    - storage.type.class.doxygen
- source: '                                                                               *theory'
- source: '                                                                               *Even if'
- source: '                                                                               *there is'
- source: '                                                                               *only one'
- source: '                                                                               *possible'
- source: '                                                                               *unified'
- source: '                                                                               *theory. it'
- source: '                                                                               *is just a'
- source: '                                                                               *               set'
- source: '                                                                               *of rules'
- source: '                                                                               *and'
- source: '                                                                               *equations.'
- source: >-
    ******************************************************************************/
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: void
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: doxygenBanner
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: theory
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //!
  scopesBegin:
    - comment.line.double-slash.documentation
  scopes:
    - punctuation.definition.comment.documentation
- source: '  A test class.'
  scopesEnd:
    - comment.line.double-slash.documentation
- source: /*!
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: '  A more elaborate class description.'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: class
  scopesBegin:
    - meta.block.class
  scopes:
    - meta.head.class
    - storage.type.class
- source: QTstyle_Test
  scopes:
    - entity.name.type.class
- source: '{'
  scopes:
    - meta.head.class
    - punctuation.section.block.begin.bracket.curly.class
- source: public
  scopesBegin:
    - meta.body.class
    - storage.type.modifier.access.control.public
- source: ':'
  scopes:
    - punctuation.separator.colon.access.control
  scopesEnd:
    - storage.type.modifier.access.control.public
- source: //!
  scopesBegin:
    - comment.line.double-slash.documentation
  scopes:
    - punctuation.definition.comment.documentation
- source: ' An enum.'
  scopesEnd:
    - comment.line.double-slash.documentation
- source: "\t/*!"
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' More detailed enum description. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: enum
  scopesBegin:
    - meta.block.enum
    - meta.head.enum
  scopes:
    - storage.type.enum
- source: TEnum
  scopes:
    - entity.name.type.enum
- source: '{'
  scopes:
    - punctuation.section.block.begin.bracket.curly.enum
  scopesEnd:
    - meta.head.enum
- source: TVal1
  scopesBegin:
    - meta.body.enum
    - meta.enum.definition
  scopes:
    - variable.other.enummember
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.enum.definition
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: '!< Enum value TVal1. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: TVal2
  scopesBegin:
    - meta.enum.definition
  scopes:
    - variable.other.enummember
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
  scopesEnd:
    - meta.enum.definition
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: '!< Enum value TVal2. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: TVal3
  scopes:
    - meta.enum.definition
    - variable.other.enummember
- source: /*
  scopesBegin:
    - comment.block
  scopes:
    - punctuation.definition.comment.begin
- source: '!< Enum value TVal3. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end
  scopesEnd:
    - comment.block
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.enum
  scopesEnd:
    - meta.body.enum
- source: //!
  scopesBegin:
    - meta.tail.enum
    - comment.line.double-slash.documentation
  scopes:
    - punctuation.definition.comment.documentation
- source: ' Enum pointer.'
  scopesEnd:
    - comment.line.double-slash.documentation
- source: "\t    /*!"
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' Details. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: '*'
  scopes:
    - keyword.operator.arithmetic
- source: enumPtr
  scopes:
    - variable.camel-case
    - variable.other.unknown.enumPtr
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: //!
  scopesBegin:
    - comment.line.double-slash.documentation
  scopes:
    - punctuation.definition.comment.documentation
- source: ' Enum variable.'
  scopesEnd:
    - comment.line.double-slash.documentation
- source: "\t    /*!"
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: ' Details. '
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: enumVar
  scopes:
    - variable.camel-case
    - variable.other.unknown.enumVar
  scopesEnd:
    - meta.tail.enum
- source: ;
  scopes:
    - punctuation.terminator.statement
  scopesEnd:
    - meta.block.enum
- source: //!
  scopesBegin:
    - comment.line.double-slash.documentation
  scopes:
    - punctuation.definition.comment.documentation
- source: ' A constructor.'
  scopesEnd:
    - comment.line.double-slash.documentation
- source: "\t/*!"
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: "\t  A more elaborate description of the constructor."
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: QTstyle_Test
  scopesBegin:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
  scopes:
    - entity.name.function.constructor
    - entity.name.function.definition.special.constructor
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.special.constructor
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.constructor
  scopesEnd:
    - meta.function.definition.special.constructor
    - meta.head.function.definition.special.constructor
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //!
  scopesBegin:
    - comment.line.double-slash.documentation
  scopes:
    - punctuation.definition.comment.documentation
- source: ' A destructor.'
  scopesEnd:
    - comment.line.double-slash.documentation
- source: "\t/*!"
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: "\t  A more elaborate description of the destructor."
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: ~QTstyle_Test
  scopesBegin:
    - meta.function.definition.special.member.destructor
    - meta.head.function.definition.special.member.destructor
  scopes:
    - entity.name.function.destructor
    - entity.name.function.definition.special.member.destructor
- source: (
  scopes:
    - >-
      punctuation.section.parameters.begin.bracket.round.special.member.destructor
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.special.member.destructor
  scopesEnd:
    - meta.function.definition.special.member.destructor
    - meta.head.function.definition.special.member.destructor
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //!
  scopesBegin:
    - comment.line.double-slash.documentation
  scopes:
    - punctuation.definition.comment.documentation
- source: ' A normal member taking two arguments and returning an integer value.'
  scopesEnd:
    - comment.line.double-slash.documentation
- source: "\t/*!"
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: \param
  scopes:
    - storage.type.class.doxygen
- source: a
  scopes:
    - variable.parameter
- source: ' an integer argument.'
- source: \param
  scopes:
    - storage.type.class.doxygen
- source: s
  scopes:
    - variable.parameter
- source: ' a constant character pointer.'
- source: \return
  scopes:
    - storage.type.class.doxygen
- source: ' The test results'
- source: \sa
  scopes:
    - storage.type.class.doxygen
- source: ' QTstyle_Test(), ~QTstyle_Test(), testMeToo() and publicVar()'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: int
  scopesBegin:
    - meta.function.definition
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: testMe
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: int
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: a
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: const
  scopes:
    - storage.modifier.specifier.const
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: '*'
  scopes:
    - storage.modifier.pointer
- source: s
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //!
  scopesBegin:
    - comment.line.double-slash.documentation
  scopes:
    - punctuation.definition.comment.documentation
- source: ' A pure virtual member.'
  scopesEnd:
    - comment.line.double-slash.documentation
- source: "\t/*!"
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: \sa
  scopes:
    - storage.type.class.doxygen
- source: ' testMe()'
- source: \param
  scopes:
    - storage.type.class.doxygen
- source: c1
  scopes:
    - variable.parameter
- source: ' the first argument.'
- source: \param
  scopes:
    - storage.type.class.doxygen
- source: c2
  scopes:
    - variable.parameter
- source: ' the second argument.'
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: virtual
  scopesBegin:
    - meta.function.definition
  scopes:
    - storage.modifier.virtual
- source: void
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: testMeToo
  scopesBegin:
    - meta.head.function.definition
  scopes:
    - entity.name.function.definition
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round
- source: char
  scopesBegin:
    - meta.function.definition.parameters
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: c1
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: char
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: c2
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.function.definition.parameters
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round
- source: '='
  scopes:
    - keyword.operator.assignment
- source: '0'
  scopes:
    - constant.numeric.decimal
  scopesEnd:
    - meta.function.definition
    - meta.head.function.definition
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //!
  scopesBegin:
    - comment.line.double-slash.documentation
  scopes:
    - punctuation.definition.comment.documentation
- source: ' A public variable.'
  scopesEnd:
    - comment.line.double-slash.documentation
- source: "\t/*!"
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: "\t  Details."
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: int
  scopesBegin:
    - meta.declaration
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: publicVar
  scopes:
    - meta.declaration
    - variable.camel-case
    - variable.other.declare
  scopesEnd:
    - meta.declaration
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: //!
  scopesBegin:
    - comment.line.double-slash.documentation
  scopes:
    - punctuation.definition.comment.documentation
- source: ' A function variable.'
  scopesEnd:
    - comment.line.double-slash.documentation
- source: "\t/*!"
  scopesBegin:
    - comment.block.documentation
  scopes:
    - punctuation.definition.comment.begin.documentation
- source: "\t  Details."
- source: '*/'
  scopes:
    - punctuation.definition.comment.end.documentation
  scopesEnd:
    - comment.block.documentation
- source: int
  scopes:
    - meta.qualified-type
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: (
  scopes:
    - punctuation.section.parens.begin.bracket.round.function.pointer
- source: '*'
  scopes:
    - punctuation.definition.function.pointer.dereference
- source: handler
  scopes:
    - variable.other.definition.pointer.function
- source: )
  scopes:
    - punctuation.section.parens.end.bracket.round.function.pointer
- source: (
  scopes:
    - punctuation.section.parameters.begin.bracket.round.function.pointer
- source: int
  scopesBegin:
    - meta.parameter
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: a
  scopes:
    - variable.parameter
- source: ','
  scopes:
    - punctuation.separator.delimiter.comma
- source: int
  scopes:
    - storage.type.primitive
    - storage.type.built-in.primitive
- source: b
  scopes:
    - variable.parameter
  scopesEnd:
    - meta.parameter
- source: )
  scopes:
    - punctuation.section.parameters.end.bracket.round.function.pointer
- source: ;
  scopes:
    - punctuation.terminator.statement
- source: '}'
  scopes:
    - punctuation.section.block.end.bracket.curly.class
  scopesEnd:
    - meta.body.class
- source: ;
  scopes:
    - punctuation.terminator.statement
