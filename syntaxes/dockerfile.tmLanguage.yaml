---
scopeName: source.dockerfile
fileTypes:
- dockerfile
version: ''
information_for_contributors:
- This code was auto generated by a much-more-readble ruby file
- see https://github.com/jeff-hykin/cpp-textmate-grammar/blob/master
patterns:
- include: "#commands"
- include: "#escape"
- include: "#variable"
- include: "#comments"
- include: "#strings"
repository:
  strings:
    patterns:
    - include: "#string_single"
    - include: "#string_double"
  escape:
    match: "\\\\."
    name: constant.character.escaped.dockerfile
  string_single:
    name: string.quoted.single.dockerfile
    begin: "(')"
    beginCaptures:
      '1':
        name: punctuation.definition.string.begin.dockerfile
    end: "(')"
    endCaptures:
      '1':
        name: punctuation.definition.string.end.dockerfile
    patterns:
    - include: "#escape"
    - include: "#variable"
  string_double:
    name: string.quoted.double.dockerfile
    begin: (")
    beginCaptures:
      '1':
        name: punctuation.definition.string.begin.dockerfile
    end: (")
    endCaptures:
      '1':
        name: punctuation.definition.string.end.dockerfile
    patterns:
    - include: "#escape"
    - include: "#variable"
  comments:
    match: "^\\s*+(#)(.*$)"
    captures:
      '1':
        name: comment.line.number-sign.dockerfile punctuation.definition.comment.dockerfile
      '2':
        name: comment.line.number-sign.dockerfile
  variable:
    match: "(\\$)(\\w+)"
    captures:
      '1':
        name: punctuation.definition.variable.dockerfile variable.other.dockerfile
      '2':
        name: variable.other.dockerfile
  commands:
    patterns:
    - include: "#run_statement"
    - include: "#from_statement"
    - match: "^\\s*+(?:((?i-mx:ONBUILD))\\s++)?((?i-mx:CMD|ENTRYPOINT|ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|HEALTHCHECK|LABEL|MAINTAINER|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR))\\s"
      captures:
        '1':
          name: keyword.control.onbuild.dockerfile
        '2':
          name: keyword.other.special-method.$2.dockerfile
  from_statement:
    match: "((?i-mx:FROM))\\s+([^\\s]+)(?:\\s+((?i-mx:AS))\\s+([^\\s]++))?"
    captures:
      '1':
        name: keyword.other.special-method.from.dockerfile
      '2':
        patterns:
        - match: "[^:@]+"
          name: entity.name.image.dockerfile
        - match: "(\\:)(\\S++)"
          captures:
            '1':
              name: punctuation.separator.version.dockerfile constant.numeric.version.dockerfile
            '2':
              name: constant.numeric.version.dockerfile
        - match: "(\\@)(\\S++)"
          captures:
            '1':
              name: punctuation.separator.version.dockerfile constant.constant.language.symbol.digest.dockerfile
            '2':
              name: constant.constant.language.symbol.digest.dockerfile
      '3':
        name: keyword.other.special-method.as.dockerfile
      '4':
        name: entity.name.image.stage.dockerfile
  shell:
    scopeName: source.shell
    fileTypes:
    - sh
    version: ''
    information_for_contributors:
    - This code was auto generated by a much-more-readble ruby file
    - see https://github.com/jeff-hykin/cpp-textmate-grammar/blob/master
    patterns:
    - name: source.shell.dockerfile
      begin: "(?=^|\\A|\\G)"
      end: "(?-mix:(?<=[^\\\\]\\n))"
      patterns:
      - include: "#initial_context"
    repository:
      boolean:
        match: "\\b(?:true|false)\\b"
        name: constant.language.$0.shell.dockerfile
      numeric_constant:
        match: "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*"
        captures:
          '0':
            patterns:
            - begin: "(?=.)"
              end: "$"
              patterns:
              - match: "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$"
                captures:
                  '1':
                    name: keyword.other.unit.hexadecimal.shell.dockerfile
                  '2':
                    name: constant.numeric.hexadecimal.shell.dockerfile
                    patterns:
                    - match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])"
                      name: punctuation.separator.constant.numeric.shell.dockerfile
                  '3':
                    name: punctuation.separator.constant.numeric.shell.dockerfile
                  '4':
                    name: constant.numeric.hexadecimal.shell.dockerfile
                  '5':
                    name: constant.numeric.hexadecimal.shell.dockerfile
                    patterns:
                    - match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])"
                      name: punctuation.separator.constant.numeric.shell.dockerfile
                  '6':
                    name: punctuation.separator.constant.numeric.shell.dockerfile
                  '8':
                    name: keyword.other.unit.exponent.hexadecimal.shell.dockerfile
                  '9':
                    name: keyword.operator.plus.exponent.hexadecimal.shell.dockerfile
                  '10':
                    name: keyword.operator.minus.exponent.hexadecimal.shell.dockerfile
                  '11':
                    name: constant.numeric.exponent.hexadecimal.shell.dockerfile
                    patterns:
                    - match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])"
                      name: punctuation.separator.constant.numeric.shell.dockerfile
                  '12':
                    name: keyword.other.unit.suffix.floating-point.shell.dockerfile
              - match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$"
                captures:
                  '2':
                    name: constant.numeric.decimal.shell.dockerfile
                    patterns:
                    - match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])"
                      name: punctuation.separator.constant.numeric.shell.dockerfile
                  '3':
                    name: punctuation.separator.constant.numeric.shell.dockerfile
                  '4':
                    name: constant.numeric.decimal.point.shell.dockerfile
                  '5':
                    name: constant.numeric.decimal.shell.dockerfile
                    patterns:
                    - match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])"
                      name: punctuation.separator.constant.numeric.shell.dockerfile
                  '6':
                    name: punctuation.separator.constant.numeric.shell.dockerfile
                  '8':
                    name: keyword.other.unit.exponent.decimal.shell.dockerfile
                  '9':
                    name: keyword.operator.plus.exponent.decimal.shell.dockerfile
                  '10':
                    name: keyword.operator.minus.exponent.decimal.shell.dockerfile
                  '11':
                    name: constant.numeric.exponent.decimal.shell.dockerfile
                    patterns:
                    - match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])"
                      name: punctuation.separator.constant.numeric.shell.dockerfile
                  '12':
                    name: keyword.other.unit.suffix.floating-point.shell.dockerfile
              - match: "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$"
                captures:
                  '1':
                    name: keyword.other.unit.binary.shell.dockerfile
                  '2':
                    name: constant.numeric.binary.shell.dockerfile
                    patterns:
                    - match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])"
                      name: punctuation.separator.constant.numeric.shell.dockerfile
                  '3':
                    name: punctuation.separator.constant.numeric.shell.dockerfile
                  '4':
                    name: keyword.other.unit.suffix.integer.shell.dockerfile
              - match: "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$"
                captures:
                  '1':
                    name: keyword.other.unit.octal.shell.dockerfile
                  '2':
                    name: constant.numeric.octal.shell.dockerfile
                    patterns:
                    - match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])"
                      name: punctuation.separator.constant.numeric.shell.dockerfile
                  '3':
                    name: punctuation.separator.constant.numeric.shell.dockerfile
                  '4':
                    name: keyword.other.unit.suffix.integer.shell.dockerfile
              - match: "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$"
                captures:
                  '1':
                    name: keyword.other.unit.hexadecimal.shell.dockerfile
                  '2':
                    name: constant.numeric.hexadecimal.shell.dockerfile
                    patterns:
                    - match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])"
                      name: punctuation.separator.constant.numeric.shell.dockerfile
                  '3':
                    name: punctuation.separator.constant.numeric.shell.dockerfile
                  '5':
                    name: keyword.other.unit.exponent.hexadecimal.shell.dockerfile
                  '6':
                    name: keyword.operator.plus.exponent.hexadecimal.shell.dockerfile
                  '7':
                    name: keyword.operator.minus.exponent.hexadecimal.shell.dockerfile
                  '8':
                    name: constant.numeric.exponent.hexadecimal.shell.dockerfile
                    patterns:
                    - match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])"
                      name: punctuation.separator.constant.numeric.shell.dockerfile
                  '9':
                    name: keyword.other.unit.suffix.integer.shell.dockerfile
              - match: "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$"
                captures:
                  '2':
                    name: constant.numeric.decimal.shell.dockerfile
                    patterns:
                    - match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])"
                      name: punctuation.separator.constant.numeric.shell.dockerfile
                  '3':
                    name: punctuation.separator.constant.numeric.shell.dockerfile
                  '5':
                    name: keyword.other.unit.exponent.decimal.shell.dockerfile
                  '6':
                    name: keyword.operator.plus.exponent.decimal.shell.dockerfile
                  '7':
                    name: keyword.operator.minus.exponent.decimal.shell.dockerfile
                  '8':
                    name: constant.numeric.exponent.decimal.shell.dockerfile
                    patterns:
                    - match: "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])"
                      name: punctuation.separator.constant.numeric.shell.dockerfile
                  '9':
                    name: keyword.other.unit.suffix.integer.shell.dockerfile
              - match: "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+"
                name: invalid.illegal.constant.numeric.shell.dockerfile
      command_context:
        patterns:
        - include: "#comment"
        - include: "#pipeline"
        - include: "#statement_seperator"
        - include: "#compound-command"
        - include: "#string"
        - include: "#variable"
        - include: "#interpolation"
        - include: "#heredoc"
        - include: "#herestring"
        - include: "#redirection"
        - include: "#pathname"
        - include: "#keyword"
        - include: "#support"
        - include: "#line_continuation"
      option_context:
        patterns:
        - include: "#compound-command"
        - include: "#string"
        - include: "#variable"
        - include: "#interpolation"
        - include: "#heredoc"
        - include: "#herestring"
        - include: "#redirection"
        - include: "#pathname"
        - include: "#keyword"
        - include: "#support"
      logical_expression_context:
        patterns:
        - include: "#logical-expression"
        - include: "#comment"
        - include: "#boolean"
        - include: "#numeric_constant"
        - include: "#pipeline"
        - include: "#statement_seperator"
        - include: "#string"
        - include: "#variable"
        - include: "#interpolation"
        - include: "#heredoc"
        - include: "#herestring"
        - include: "#pathname"
        - include: "#keyword"
        - include: "#support"
      variable_assignment_context:
        patterns:
        - include: "#initial_context"
      line_continuation:
        match: "\\\\(?=\\n)"
        name: constant.character.escape.line-continuation.shell.dockerfile
      case-clause:
        patterns:
        - begin: "(?=\\S)"
          end: ";;"
          endCaptures:
            '0':
              name: punctuation.terminator.case-clause.shell.dockerfile
          name: meta.scope.case-clause.shell.dockerfile
          patterns:
          - begin: "\\(|(?=\\S)"
            beginCaptures:
              '0':
                name: punctuation.definition.case-pattern.shell.dockerfile
            end: "\\)"
            endCaptures:
              '0':
                name: punctuation.definition.case-pattern.shell.dockerfile
            name: meta.scope.case-pattern.shell.dockerfile
            patterns:
            - match: "\\|"
              name: punctuation.separator.pipe-sign.shell.dockerfile
            - include: "#string"
            - include: "#variable"
            - include: "#interpolation"
            - include: "#pathname"
          - begin: "(?<=\\))"
            end: "(?=;;)"
            name: meta.scope.case-clause-body.shell.dockerfile
            patterns:
            - include: "#initial_context"
      comment:
        begin: "(^\\s+)?(?<=^|\\W)(?<!-)(?=#)(?!#{)"
        beginCaptures:
          '1':
            name: punctuation.whitespace.comment.leading.shell.dockerfile
        end: "(?!\\G)"
        patterns:
        - begin: "#!"
          beginCaptures:
            '0':
              name: punctuation.definition.comment.shebang.shell.dockerfile
          end: "$"
          name: comment.line.number-sign.shebang.shell.dockerfile
        - begin: "#"
          beginCaptures:
            '0':
              name: punctuation.definition.comment.shell.dockerfile
          end: "$"
          name: comment.line.number-sign.shell.dockerfile
      compound-command:
        patterns:
        - begin: "\\[{1,2}"
          beginCaptures:
            '0':
              name: punctuation.definition.logical-expression.shell.dockerfile
          end: "\\]{1,2}"
          endCaptures:
            '0':
              name: punctuation.definition.logical-expression.shell.dockerfile
          name: meta.scope.logical-expression.shell.dockerfile
          patterns:
          - include: "#logical-expression"
          - include: "#initial_context"
        - begin: "\\({2}"
          beginCaptures:
            '0':
              name: punctuation.definition.string.begin.shell.dockerfile
          end: "\\){2}"
          endCaptures:
            '0':
              name: punctuation.definition.string.end.shell.dockerfile
          name: string.other.math.shell.dockerfile
          patterns:
          - include: "#math"
        - begin: "\\("
          beginCaptures:
            '0':
              name: punctuation.definition.subshell.shell.dockerfile
          end: "\\)"
          endCaptures:
            '0':
              name: punctuation.definition.subshell.shell.dockerfile
          name: meta.scope.subshell.shell.dockerfile
          patterns:
          - include: "#initial_context"
        - begin: "(?<=\\s|^){(?=\\s|$)"
          beginCaptures:
            '0':
              name: punctuation.definition.group.shell.dockerfile
          end: "(?<=^|;)\\s*(})"
          endCaptures:
            '1':
              name: punctuation.definition.group.shell.dockerfile
          name: meta.scope.group.shell.dockerfile
          patterns:
          - include: "#initial_context"
      function-definition:
        patterns:
        - begin: "(?<=^|;|&|\\s)(function)\\s+([^\\s\\\\]+)(?:\\s*(\\(\\)))?"
          beginCaptures:
            '1':
              name: storage.type.function.shell.dockerfile
            '2':
              name: entity.name.function.shell.dockerfile
            '3':
              name: punctuation.definition.arguments.shell.dockerfile
          end: ";|&|$"
          endCaptures:
            '0':
              name: punctuation.definition.function.shell.dockerfile
          name: meta.function.shell.dockerfile
          patterns:
          - include: "#initial_context"
        - begin: "(?<=^|;|&|\\s)([^\\s\\\\=]+)\\s*(\\(\\))"
          beginCaptures:
            '1':
              name: entity.name.function.shell.dockerfile
            '2':
              name: punctuation.definition.arguments.shell.dockerfile
          end: ";|&|$"
          endCaptures:
            '0':
              name: punctuation.definition.function.shell.dockerfile
          name: meta.function.shell.dockerfile
          patterns:
          - include: "#initial_context"
      heredoc:
        patterns:
        - begin: (<<)-\s*("|'|)\s*(RUBY)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^\\t*(RUBY)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.no-indent.ruby.shell.dockerfile
          contentName: source.ruby.embedded.shell.dockerfile
          patterns:
          - include: source.ruby
        - begin: (<<)\s*("|'|)\s*(RUBY)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^(RUBY)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.ruby.shell.dockerfile
          contentName: source.ruby.embedded.shell.dockerfile
          patterns:
          - include: source.ruby
        - begin: (<<)-\s*("|'|)\s*(PYTHON)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^\\t*(PYTHON)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.no-indent.python.shell.dockerfile
          contentName: source.python.embedded.shell.dockerfile
          patterns:
          - include: source.python
        - begin: (<<)\s*("|'|)\s*(PYTHON)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^(PYTHON)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.python.shell.dockerfile
          contentName: source.python.embedded.shell.dockerfile
          patterns:
          - include: source.python
        - begin: (<<)-\s*("|'|)\s*(APPLESCRIPT)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^\\t*(APPLESCRIPT)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.no-indent.applescript.shell.dockerfile
          contentName: source.applescript.embedded.shell.dockerfile
          patterns:
          - include: source.applescript
        - begin: (<<)\s*("|'|)\s*(APPLESCRIPT)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^(APPLESCRIPT)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.applescript.shell.dockerfile
          contentName: source.applescript.embedded.shell.dockerfile
          patterns:
          - include: source.applescript
        - begin: (<<)-\s*("|'|)\s*(HTML)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^\\t*(HTML)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.no-indent.html.shell.dockerfile
          contentName: text.html.embedded.shell.dockerfile
          patterns:
          - include: text.html.basic
        - begin: (<<)\s*("|'|)\s*(HTML)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^(HTML)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.html.shell.dockerfile
          contentName: text.html.embedded.shell.dockerfile
          patterns:
          - include: text.html.basic
        - begin: (<<)-\s*("|'|)\s*(MARKDOWN)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^\\t*(MARKDOWN)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.no-indent.markdown.shell.dockerfile
          contentName: text.html.markdown.embedded.shell.dockerfile
          patterns:
          - include: text.html.markdown
        - begin: (<<)\s*("|'|)\s*(MARKDOWN)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^(MARKDOWN)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.markdown.shell.dockerfile
          contentName: text.html.markdown.embedded.shell.dockerfile
          patterns:
          - include: text.html.markdown
        - begin: (<<)-\s*("|'|)\s*(TEXTILE)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^\\t*(TEXTILE)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.no-indent.textile.shell.dockerfile
          contentName: text.html.textile.embedded.shell.dockerfile
          patterns:
          - include: text.html.textile
        - begin: (<<)\s*("|'|)\s*(TEXTILE)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^(TEXTILE)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.textile.shell.dockerfile
          contentName: text.html.textile.embedded.shell.dockerfile
          patterns:
          - include: text.html.textile
        - begin: (<<)-\s*("|'|)\s*(SHELL)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^\\t*(\\3)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          contentName: source.shell.embedded.shell.dockerfile
          name: string.unquoted.heredoc.no-indent.shell.shell.dockerfile
          patterns:
          - include: source.shell
        - begin: (<<)\s*("|'|)\s*(SHELL)(?=\s|;|&|<|"|')\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^(\\3)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.shell.shell.dockerfile
          contentName: source.shell.embedded.shell.dockerfile
          patterns:
          - include: source.shell
        - begin: (<<)-\s*("|'|)\s*\\?([^;&<\s]+)\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^\\t*(\\3)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.no-indent.shell.dockerfile
        - begin: (<<)\s*("|'|)\s*\\?([^;&<\s]+)\2
          beginCaptures:
            '1':
              name: keyword.operator.heredoc.shell.dockerfile
            '3':
              name: keyword.control.heredoc-token.shell.dockerfile
          end: "^(\\3)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.heredoc-token.shell.dockerfile
          name: string.unquoted.heredoc.shell.dockerfile
      herestring:
        patterns:
        - begin: "(<<<)\\s*(('))"
          beginCaptures:
            '1':
              name: keyword.operator.herestring.shell.dockerfile
            '2':
              name: string.quoted.single.shell.dockerfile
            '3':
              name: punctuation.definition.string.begin.shell.dockerfile
          end: "(')"
          endCaptures:
            '0':
              name: string.quoted.single.shell.dockerfile
            '1':
              name: punctuation.definition.string.end.shell.dockerfile
          name: meta.herestring.shell.dockerfile
          contentName: string.quoted.single.shell.dockerfile
        - begin: (<<<)\s*(("))
          beginCaptures:
            '1':
              name: keyword.operator.herestring.shell.dockerfile
            '2':
              name: string.quoted.double.shell.dockerfile
            '3':
              name: punctuation.definition.string.begin.shell.dockerfile
          end: (")
          endCaptures:
            '0':
              name: string.quoted.double.shell.dockerfile
            '1':
              name: punctuation.definition.string.end.shell.dockerfile
          name: meta.herestring.shell.dockerfile
          contentName: string.quoted.double.shell.dockerfile
        - captures:
            '1':
              name: keyword.operator.herestring.shell.dockerfile
            '2':
              name: string.unquoted.herestring.shell.dockerfile
              patterns:
              - include: "#initial_context"
          match: "(<<<)\\s*(([^\\s)\\\\]|\\\\.)+)"
          name: meta.herestring.shell.dockerfile
      interpolation:
        patterns:
        - begin: "\\$\\({2}"
          beginCaptures:
            '0':
              name: punctuation.definition.evaluation.arithmetic.begin.shell.dockerfile
          end: "\\){2}"
          endCaptures:
            '0':
              name: punctuation.definition.evaluation.arithmetic.end.shell.dockerfile
          name: string.other.math.shell.dockerfile
          patterns:
          - include: "#math"
        - begin: "`"
          beginCaptures:
            '0':
              name: punctuation.definition.evaluation.backticks.shell.dockerfile
          end: "`"
          endCaptures:
            '0':
              name: punctuation.definition.evaluation.backticks.shell.dockerfile
          name: string.interpolated.backtick.shell.dockerfile
          patterns:
          - match: "\\\\[`\\\\$]"
            name: constant.character.escape.shell.dockerfile
          - begin: "(?<=\\W)(?=#)(?!#{)"
            beginCaptures:
              '1':
                name: punctuation.whitespace.comment.leading.shell.dockerfile
            end: "(?!\\G)"
            patterns:
            - begin: "#"
              beginCaptures:
                '0':
                  name: punctuation.definition.comment.shell.dockerfile
              end: "(?=`)"
              name: comment.line.number-sign.shell.dockerfile
          - include: "#initial_context"
        - begin: "\\$\\("
          beginCaptures:
            '0':
              name: punctuation.definition.evaluation.parens.begin.shell.dockerfile
          end: "\\)"
          endCaptures:
            '0':
              name: punctuation.definition.evaluation.parens.end.shell.dockerfile
          name: string.interpolated.dollar.shell.dockerfile
          patterns:
          - include: "#initial_context"
      keyword:
        patterns:
        - match: "(?<=^|;|&|\\s)(then|else|elif|fi|for|in|do|done|select|case|continue|esac|while|until|return)(?=\\s|;|&|$)"
          name: keyword.control.shell.dockerfile
        - match: "(?<=^|;|&|\\s)(?:export|declare|typeset|local|readonly)(?=\\s|;|&|$)"
          name: storage.modifier.shell.dockerfile
      logical-expression:
        patterns:
        - comment: do we want a special rule for ( expr )?
          match: "=[=~]?|!=?|<|>|&&|\\|\\|"
          name: keyword.operator.logical.shell.dockerfile
        - match: "(?<!\\S)-(nt|ot|ef|eq|ne|l[te]|g[te]|[a-hknoprstuwxzOGLSN])"
          name: keyword.operator.logical.shell.dockerfile
      loop:
        patterns:
        - begin: "(?<=^|;|&|\\s)(for)\\s+(?=\\({2})"
          beginCaptures:
            '1':
              name: keyword.control.shell.dockerfile
          end: "(?<=^|;|&|\\s)done(?=\\s|;|&|$)"
          endCaptures:
            '0':
              name: keyword.control.shell.dockerfile
          name: meta.scope.for-loop.shell.dockerfile
          patterns:
          - include: "#initial_context"
        - begin: "(?<=^|;|&|\\s)(for)\\s+(.+?)\\s+(in)(?=\\s|;|&|$)"
          beginCaptures:
            '1':
              name: keyword.control.shell.dockerfile
            '2':
              name: variable.other.loop.shell.dockerfile
              patterns:
              - include: "#string"
            '3':
              name: keyword.control.shell.dockerfile
          end: "(?<=^|;|&|\\s)done(?=\\s|;|&|$)"
          endCaptures:
            '0':
              name: keyword.control.shell.dockerfile
          name: meta.scope.for-in-loop.shell.dockerfile
          patterns:
          - include: "#initial_context"
        - begin: "(?<=^|;|&|\\s)(while|until)(?=\\s|;|&|$)"
          beginCaptures:
            '1':
              name: keyword.control.shell.dockerfile
          end: "(?<=^|;|&|\\s)done(?=\\s|;|&|$)"
          endCaptures:
            '0':
              name: keyword.control.shell.dockerfile
          name: meta.scope.while-loop.shell.dockerfile
          patterns:
          - include: "#initial_context"
        - begin: "(?<=^|;|&|\\s)(select)\\s+((?:[^\\s\\\\]|\\\\.)+)(?=\\s|;|&|$)"
          beginCaptures:
            '1':
              name: keyword.control.shell.dockerfile
            '2':
              name: variable.other.loop.shell.dockerfile
          end: "(?<=^|;|&|\\s)(done)(?=\\s|;|&|$)"
          endCaptures:
            '1':
              name: keyword.control.shell.dockerfile
          name: meta.scope.select-block.shell.dockerfile
          patterns:
          - include: "#initial_context"
        - begin: "(?<=^|;|&|\\s)case(?=\\s|;|&|$)"
          beginCaptures:
            '0':
              name: keyword.control.shell.dockerfile
          end: "(?<=^|;|&|\\s)esac(?=\\s|;|&|$)"
          endCaptures:
            '0':
              name: keyword.control.shell.dockerfile
          name: meta.scope.case-block.shell.dockerfile
          patterns:
          - begin: "(?<=^|;|&|\\s)in(?=\\s|;|&|$)"
            beginCaptures:
              '0':
                name: keyword.control.shell.dockerfile
            end: "(?<=^|;|&|\\s)(?=esac(\\s|;|&|$))"
            name: meta.scope.case-body.shell.dockerfile
            patterns:
            - include: "#comment"
            - include: "#case-clause"
            - include: "#initial_context"
          - include: "#initial_context"
        - begin: "(?<=^|;|&|\\s)if(?=\\s|;|&|$)"
          beginCaptures:
            '0':
              name: keyword.control.shell.dockerfile
          end: "(?<=^|;|&|\\s)fi(?=\\s|;|&|$)"
          endCaptures:
            '0':
              name: keyword.control.shell.dockerfile
          name: meta.scope.if-block.shell.dockerfile
          patterns:
          - include: "#initial_context"
      math:
        patterns:
        - include: "#variable"
        - match: "\\+{1,2}|-{1,2}|!|~|\\*{1,2}|/|%|<[<=]?|>[>=]?|==|!=|^|\\|{1,2}|&{1,2}|\\?|\\:|,|=|[*/%+\\-&^|]=|<<=|>>="
          name: keyword.operator.arithmetic.shell.dockerfile
        - match: 0[xX][0-9A-Fa-f]+
          name: constant.numeric.hex.shell.dockerfile
        - match: 0\d+
          name: constant.numeric.octal.shell.dockerfile
        - match: "\\d{1,2}#[0-9a-zA-Z@_]+"
          name: constant.numeric.other.shell.dockerfile
        - match: "\\d+"
          name: constant.numeric.integer.shell.dockerfile
      pathname:
        patterns:
        - match: "(?<=\\s|:|=|^)~"
          name: keyword.operator.tilde.shell.dockerfile
        - match: "\\*|\\?"
          name: keyword.operator.glob.shell.dockerfile
        - begin: "([?*+@!])(\\()"
          beginCaptures:
            '1':
              name: keyword.operator.extglob.shell.dockerfile
            '2':
              name: punctuation.definition.extglob.shell.dockerfile
          end: "\\)"
          endCaptures:
            '0':
              name: punctuation.definition.extglob.shell.dockerfile
          name: meta.structure.extglob.shell.dockerfile
          patterns:
          - include: "#initial_context"
      pipeline:
        patterns:
        - match: "(?<=^|;|&|\\s)(time)(?=\\s|;|&|$)"
          name: keyword.other.shell.dockerfile
        - match: "[|!]"
          name: keyword.operator.pipe.shell.dockerfile
      redirection:
        patterns:
        - begin: "[><]\\("
          beginCaptures:
            '0':
              name: punctuation.definition.string.begin.shell.dockerfile
          end: "\\)"
          endCaptures:
            '0':
              name: punctuation.definition.string.end.shell.dockerfile
          name: string.interpolated.process-substitution.shell.dockerfile
          patterns:
          - include: "#initial_context"
        - match: "(?<![<>])(&>|\\d*>&\\d*|\\d*(>>|>|<)|\\d*<&|\\d*<>)(?![<>])"
          name: keyword.operator.redirect.shell.dockerfile
      string:
        patterns:
        - match: "\\\\."
          name: constant.character.escape.shell.dockerfile
        - begin: "'"
          beginCaptures:
            '0':
              name: punctuation.definition.string.begin.shell.dockerfile
          end: "'"
          endCaptures:
            '0':
              name: punctuation.definition.string.end.shell.dockerfile
          name: string.quoted.single.shell.dockerfile
        - begin: \$?"
          beginCaptures:
            '0':
              name: punctuation.definition.string.begin.shell.dockerfile
          end: "\""
          endCaptures:
            '0':
              name: punctuation.definition.string.end.shell.dockerfile
          name: string.quoted.double.shell.dockerfile
          patterns:
          - match: \\[\$`"\\\n]
            name: constant.character.escape.shell.dockerfile
          - include: "#variable"
          - include: "#interpolation"
        - begin: "\\$'"
          beginCaptures:
            '0':
              name: punctuation.definition.string.begin.shell.dockerfile
          end: "'"
          endCaptures:
            '0':
              name: punctuation.definition.string.end.shell.dockerfile
          name: string.quoted.single.dollar.shell.dockerfile
          patterns:
          - match: "\\\\(a|b|e|f|n|r|t|v|\\\\|')"
            name: constant.character.escape.ansi-c.shell.dockerfile
          - match: "\\\\[0-9]{3}"
            name: constant.character.escape.octal.shell.dockerfile
          - match: "\\\\x[0-9a-fA-F]{2}"
            name: constant.character.escape.hex.shell.dockerfile
          - match: "\\\\c."
            name: constant.character.escape.control-char.shell.dockerfile
      support:
        patterns:
        - match: "(?<=^|;|&|\\s)(?::|\\.)(?=\\s|;|&|$)"
          name: support.function.builtin.shell.dockerfile
        - match: "(?<=^|;|&|\\s)(?:alias|bg|bind|break|builtin|caller|cd|command|compgen|complete|dirs|disown|echo|enable|eval|exec|exit|false|fc|fg|getopts|hash|help|history|jobs|kill|let|logout|popd|printf|pushd|pwd|read|readonly|set|shift|shopt|source|suspend|test|times|trap|true|type|ulimit|umask|unalias|unset|wait)(?=\\s|;|&|$)"
          name: support.function.builtin.shell.dockerfile
      statement_seperator:
        match: "(?:(?:(?:(?:(;)|(&&))|(\\|\\|))|(&))|\\n)"
        captures:
          '1':
            name: punctuation.terminator.statement.semicolon.shell.dockerfile
          '2':
            name: punctuation.separator.statement.and.shell.dockerfile
          '3':
            name: punctuation.separator.statement.or.shell.dockerfile
          '4':
            name: punctuation.separator.statement.background.shell.dockerfile
      assignment:
        name: meta.expression.assignment.shell.dockerfile
        begin: "\\s*+((?:^|\\b)[a-zA-Z_][a-zA-Z0-9_]*+(?:\\b|$))(\\=)"
        beginCaptures:
          '1':
            name: variable.other.assignment.shell.dockerfile
          '2':
            name: keyword.operator.assignment.shell.dockerfile
        end: "(?:(?:(?:(?:(;)|(&&))|(\\|\\|))|(&))|\\n)"
        endCaptures:
          '1':
            name: punctuation.terminator.statement.semicolon.shell.dockerfile
          '2':
            name: punctuation.separator.statement.and.shell.dockerfile
          '3':
            name: punctuation.separator.statement.or.shell.dockerfile
          '4':
            name: punctuation.separator.statement.background.shell.dockerfile
        patterns:
        - include: "#variable_assignment_context"
      command_name:
        name: entity.name.command.shell.dockerfile
        begin: "\\s*+(?!(?:!|%|&|\\||\\(|\\{|\\[|<|>|#|\\n|$|;))"
        end: "(?:(?=\\s)|(?=;|\\||&|$|\\n|\\)|\\`|\\}|\\{|#|\\])(?<!\\\\))"
        patterns:
        - include: "#command_context"
      argument:
        name: meta.argument.shell.dockerfile
        begin: "\\s++(?!(?:!|%|&|\\||\\(|\\{|\\[|<|>|#|\\n|$|;))"
        end: "(?=\\s|;|\\||&|$|\\n|\\)|\\`)"
        patterns:
        - include: "#command_context"
        - match: '[^ \|&;<>\(\)\$`\\"'']+'
          captures:
            '0':
              name: string.unquoted.argument.shell.dockerfile
              patterns:
              - match: "\\*"
                name: variable.language.special.wildcard.shell.dockerfile
      option:
        contentName: string.unquoted.argument.shell.dockerfile constant.other.option.shell.dockerfile
        begin: "\\s++(-)((?!(?:!|%|&|\\||\\(|\\{|\\[|<|>|#|\\n|$|;)))"
        beginCaptures:
          '1':
            name: string.unquoted.argument.shell.dockerfile constant.other.option.dash.shell.dockerfile
          '2':
            name: string.unquoted.argument.shell.dockerfile constant.other.option.shell.dockerfile
        end: "(?:(?=\\s)|(?=;|\\||&|$|\\n|\\)|\\`|\\}|\\{|#|\\])(?<!\\\\))"
        patterns:
        - include: "#option_context"
      command_call:
        name: meta.statement.shell.dockerfile
        begin: "(?<=(?:^|;|\\||&|!|\\(|\\{|\\`|\\A|\\G))\\s*+(?!function\\W|function\\$|select\\W|select\\$|case\\W|case\\$|do\\W|do\\$|done\\W|done\\$|elif\\W|elif\\$|else\\W|else\\$|esac\\W|esac\\$|fi\\W|fi\\$|for\\W|for\\$|if\\W|if\\$|in\\W|in\\$|then\\W|then\\$|until\\W|until\\$|while\\W|while\\$|alias\\W|alias\\$|bg\\W|bg\\$|command\\W|command\\$|false\\W|false\\$|fc\\W|fc\\$|fg\\W|fg\\$|getopts\\W|getopts\\$|hash\\W|hash\\$|jobs\\W|jobs\\$|kill\\W|kill\\$|newgrp\\W|newgrp\\$|read\\W|read\\$|true\\W|true\\$|umask\\W|umask\\$|unalias\\W|unalias\\$|wait\\W|wait\\$)"
        end: "(?=;|\\||&|$|\\n|\\)|\\`|\\}|\\{|#|\\])(?<!\\\\)"
        patterns:
        - include: "#option"
        - include: "#argument"
        - include: "#command_name"
        - include: "#command_context"
      logical_expression:
        name: meta.scope.logical-expression.shell.dockerfile
        begin: "(\\[{1,2})"
        beginCaptures:
          '1':
            name: punctuation.definition.logical-expression.shell.dockerfile
        end: "(\\]{1,2})"
        endCaptures:
          '1':
            name: punctuation.definition.logical-expression.shell.dockerfile
        patterns:
        - include: "#logical-expression"
        - include: "#comment"
        - include: "#boolean"
        - include: "#numeric_constant"
        - include: "#pipeline"
        - include: "#statement_seperator"
        - include: "#string"
        - include: "#variable"
        - include: "#interpolation"
        - include: "#heredoc"
        - include: "#herestring"
        - include: "#pathname"
        - include: "#keyword"
        - include: "#support"
      variable:
        patterns:
        - match: "(\\$)(\\@)"
          captures:
            '1':
              name: punctuation.definition.variable.shell.dockerfile variable.parameter.positional.all.shell.dockerfile
            '2':
              name: variable.parameter.positional.all.shell.dockerfile
        - match: "(\\$)([0-9])"
          captures:
            '1':
              name: punctuation.definition.variable.shell.dockerfile variable.parameter.positional.shell.dockerfile
            '2':
              name: variable.parameter.positional.shell.dockerfile
        - match: "(\\$)(\\{[0-9]+\\})"
          captures:
            '1':
              name: punctuation.definition.variable.shell.dockerfile variable.parameter.positional.shell.dockerfile
            '2':
              name: variable.parameter.positional.shell.dockerfile
        - match: "(\\$)([-*#?$!0_])"
          captures:
            '1':
              name: punctuation.definition.variable.shell.dockerfile variable.language.special.shell.dockerfile
            '2':
              name: variable.language.special.shell.dockerfile
        - begin: "(\\$)(\\{)"
          beginCaptures:
            '1':
              name: punctuation.definition.variable.shell.dockerfile punctuation.section.bracket.curly.variable.begin.shell.dockerfile
            '2':
              name: punctuation.section.bracket.curly.variable.begin.shell.dockerfile
          end: "(\\})"
          endCaptures:
            '1':
              name: punctuation.section.bracket.curly.variable.end.shell.dockerfile
          patterns:
          - match: "!|:[-=?]?|\\*|@|#{1,2}|%{1,2}|/"
            name: keyword.operator.expansion.shell.dockerfile
          - captures:
              '1':
                name: punctuation.section.array.shell.dockerfile
              '3':
                name: punctuation.section.array.shell.dockerfile
            match: "(\\[)([^\\]]+)(\\])"
          - include: "#variable"
          - include: "#string"
        - match: "(\\$)(\\w+)"
          captures:
            '1':
              name: punctuation.definition.variable.shell.dockerfile variable.other.normal.shell.dockerfile
            '2':
              name: variable.other.normal.shell.dockerfile
      initial_context:
        patterns:
        - include: "#comment"
        - include: "#boolean"
        - include: "#numeric_constant"
        - include: "#pipeline"
        - include: "#statement_seperator"
        - include: "#logical_expression"
        - include: "#compound-command"
        - include: "#loop"
        - include: "#string"
        - include: "#function-definition"
        - include: "#variable"
        - include: "#interpolation"
        - include: "#heredoc"
        - include: "#herestring"
        - include: "#redirection"
        - include: "#pathname"
        - include: "#keyword"
        - include: "#assignment"
        - include: "#command_call"
        - include: "#support"
    name: Shell.dockerfile Script.dockerfile
  run_statement:
    contentName: meta.command.run.dockerfile
    begin: "((?<!\\w)RUN(?!\\w))"
    beginCaptures:
      '1':
        name: keyword.other.special-method.dockerfile
    end: "(?<=[^\\\\]\\n)"
    patterns:
    - include: "#shell"
name: Dockerfile
